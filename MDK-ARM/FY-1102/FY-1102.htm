<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\FY-1102\FY-1102.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\FY-1102\FY-1102.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Sun Apr 26 23:43:46 2020
<BR><P>
<H3>Maximum Stack Usage =       1704 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
Alarm_DataSave_CallBack &rArr; SaveLog &rArr; SaveDeviceInfo &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1e]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1e]">ADC_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1e]">ADC_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[7d]">APP_TO_UART2_TXServer</a> from com_server.o(i.APP_TO_UART2_TXServer) referenced from com_server.o(i.UART_TO_FY1000_CCB_Init_S)
 <LI><a href="#[7a]">APP_TO_UART3_TXServer</a> from com_server.o(i.APP_TO_UART3_TXServer) referenced from com_server.o(i.UART_TO_BRC188_CCB_Init_S)
 <LI><a href="#[7a]">APP_TO_UART3_TXServer</a> from com_server.o(i.APP_TO_UART3_TXServer) referenced from com_server.o(i.UART_TO_DDF2_CCB_Init_S)
 <LI><a href="#[7a]">APP_TO_UART3_TXServer</a> from com_server.o(i.APP_TO_UART3_TXServer) referenced from com_server.o(i.UART_TO_FY188_CCB_Init_S)
 <LI><a href="#[7a]">APP_TO_UART3_TXServer</a> from com_server.o(i.APP_TO_UART3_TXServer) referenced from com_server.o(i.UART_TO_FY2000_CCB_Init_S)
 <LI><a href="#[7a]">APP_TO_UART3_TXServer</a> from com_server.o(i.APP_TO_UART3_TXServer) referenced from com_server.o(i.UART_TO_HT2X188_CCB_Init_S)
 <LI><a href="#[7a]">APP_TO_UART3_TXServer</a> from com_server.o(i.APP_TO_UART3_TXServer) referenced from com_server.o(i.UART_TO_HZCRL_CCB_Init_S)
 <LI><a href="#[7a]">APP_TO_UART3_TXServer</a> from com_server.o(i.APP_TO_UART3_TXServer) referenced from com_server.o(i.UART_TO_NWK_CCB_Init_S)
 <LI><a href="#[7a]">APP_TO_UART3_TXServer</a> from com_server.o(i.APP_TO_UART3_TXServer) referenced from com_server.o(i.UART_TO_XY188_CCB_Init_S)
 <LI><a href="#[88]">Alarm_DataSave_CallBack</a> from main.o(i.Alarm_DataSave_CallBack) referenced from main.o(i.main)
 <LI><a href="#[78]">Alarm_UserShare_CallBack</a> from main.o(i.Alarm_UserShare_CallBack) referenced from main.o(i.Task12_F)
 <LI><a href="#[79]">BRC188_Pack_RxServer_S</a> from brc188pro.o(i.BRC188_Pack_RxServer_S) referenced from com_server.o(i.UART_TO_BRC188_CCB_Init_S)
 <LI><a href="#[89]">BeepWork_RebackFun</a> from beep.o(i.BeepWork_RebackFun) referenced from main.o(i.main)
 <LI><a href="#[6]">BusFault_Handler</a> from stm32f4xx_it.o(i.BusFault_Handler) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[20]">CAN1_RX0_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[21]">CAN1_RX1_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[22]">CAN1_SCE_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[1f]">CAN1_TX_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[4a]">CAN2_RX0_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[4b]">CAN2_RX1_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[4c]">CAN2_SCE_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[49]">CAN2_TX_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[c6]">ClirateSet</a> from sys_state.o(i.ClirateSet) referenced from rtx_cli.o(.constdata)
 <LI><a href="#[7b]">DDF2_Pack_RxServer_S</a> from ddf2pro.o(i.DDF2_Pack_RxServer_S) referenced from com_server.o(i.UART_TO_DDF2_CCB_Init_S)
 <LI><a href="#[17]">DMA1_Stream0_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[18]">DMA1_Stream1_IRQHandler</a> from m4_uart3.o(i.DMA1_Stream1_IRQHandler) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[19]">DMA1_Stream2_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[1a]">DMA1_Stream3_IRQHandler</a> from m4_uart3.o(i.DMA1_Stream3_IRQHandler) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[1b]">DMA1_Stream4_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[1c]">DMA1_Stream5_IRQHandler</a> from m4_uart2.o(i.DMA1_Stream5_IRQHandler) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[1d]">DMA1_Stream6_IRQHandler</a> from m4_uart2.o(i.DMA1_Stream6_IRQHandler) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[3b]">DMA1_Stream7_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[44]">DMA2_Stream0_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[45]">DMA2_Stream1_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[46]">DMA2_Stream2_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[47]">DMA2_Stream3_IRQHandler</a> from m4_sdio.o(i.DMA2_Stream3_IRQHandler) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[48]">DMA2_Stream4_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[4e]">DMA2_Stream5_IRQHandler</a> from m4_uart1.o(i.DMA2_Stream5_IRQHandler) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[4f]">DMA2_Stream6_IRQHandler</a> from m4_sdio.o(i.DMA2_Stream6_IRQHandler) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[50]">DMA2_Stream7_IRQHandler</a> from m4_uart1.o(i.DMA2_Stream7_IRQHandler) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[9]">DebugMon_Handler</a> from stm32f4xx_it.o(i.DebugMon_Handler) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[12]">EXTI0_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[34]">EXTI15_10_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[13]">EXTI1_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[14]">EXTI2_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[15]">EXTI3_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[16]">EXTI4_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[23]">EXTI9_5_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[10]">FLASH_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[3c]">FMC_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[59]">FPU_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[7c]">FY1000_Pack_RxServer_S</a> from fy1000pro.o(i.FY1000_Pack_RxServer_S) referenced from com_server.o(i.UART_TO_FY1000_CCB_Init_S)
 <LI><a href="#[7e]">FY188_Pack_RxServer_S</a> from fy188pro.o(i.FY188_Pack_RxServer_S) referenced from com_server.o(i.UART_TO_FY188_CCB_Init_S)
 <LI><a href="#[7f]">FY2000_Pack_RxServer_S</a> from fy2000pro.o(i.FY2000_Pack_RxServer_S) referenced from com_server.o(i.UART_TO_FY2000_CCB_Init_S)
 <LI><a href="#[6d]">GetKeyVal_K1</a> from keyboardapp.o(i.GetKeyVal_K1) referenced from keyboardapp.o(i.KeyboardApp_Init)
 <LI><a href="#[6f]">GetKeyVal_K2</a> from keyboardapp.o(i.GetKeyVal_K2) referenced from keyboardapp.o(i.KeyboardApp_Init)
 <LI><a href="#[71]">GetKeyVal_K3</a> from keyboardapp.o(i.GetKeyVal_K3) referenced from keyboardapp.o(i.KeyboardApp_Init)
 <LI><a href="#[73]">GetKeyVal_K4</a> from keyboardapp.o(i.GetKeyVal_K4) referenced from keyboardapp.o(i.KeyboardApp_Init)
 <LI><a href="#[75]">GetKeyVal_K5</a> from keyboardapp.o(i.GetKeyVal_K5) referenced from keyboardapp.o(i.KeyboardApp_Init)
 <LI><a href="#[77]">GetKeyVal_K6</a> from keyboardapp.o(i.GetKeyVal_K6) referenced from keyboardapp.o(i.KeyboardApp_Init)
 <LI><a href="#[58]">HASH_RNG_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[80]">HT2X188_Pack_RxServer_S</a> from ht2x188pro.o(i.HT2X188_Pack_RxServer_S) referenced from com_server.o(i.UART_TO_HT2X188_CCB_Init_S)
 <LI><a href="#[81]">HZCRL_Pack_RxServer_S</a> from hzcrl_xpro.o(i.HZCRL_Pack_RxServer_S) referenced from com_server.o(i.UART_TO_HZCRL_CCB_Init_S)
 <LI><a href="#[4]">HardFault_Handler</a> from stm32f4xx_it.o(i.HardFault_Handler) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[2c]">I2C1_ER_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[2b]">I2C1_EV_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[2e]">I2C2_ER_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[2d]">I2C2_EV_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[53]">I2C3_ER_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[52]">I2C3_EV_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[87]">IWDG_Guard</a> from watchdog.o(i.IWDG_Guard) referenced from watchdog.o(i.dogInit)
 <LI><a href="#[6c]">KeyOUT_K1</a> from keyboardapp.o(i.KeyOUT_K1) referenced from keyboardapp.o(i.KeyboardApp_Init)
 <LI><a href="#[6e]">KeyOUT_K2</a> from keyboardapp.o(i.KeyOUT_K2) referenced from keyboardapp.o(i.KeyboardApp_Init)
 <LI><a href="#[70]">KeyOUT_K3</a> from keyboardapp.o(i.KeyOUT_K3) referenced from keyboardapp.o(i.KeyboardApp_Init)
 <LI><a href="#[72]">KeyOUT_K4</a> from keyboardapp.o(i.KeyOUT_K4) referenced from keyboardapp.o(i.KeyboardApp_Init)
 <LI><a href="#[74]">KeyOUT_K5</a> from keyboardapp.o(i.KeyOUT_K5) referenced from keyboardapp.o(i.KeyboardApp_Init)
 <LI><a href="#[76]">KeyOUT_K6</a> from keyboardapp.o(i.KeyOUT_K6) referenced from keyboardapp.o(i.KeyboardApp_Init)
 <LI><a href="#[1]">Keyboard_GPIO_Init</a> from keyboard.o(i.Keyboard_GPIO_Init) referenced 2 times from indepkey.o(.data)
 <LI><a href="#[8a]">LEDBR_RebackFun</a> from led.o(i.LEDBR_RebackFun) referenced from main.o(i.main)
 <LI><a href="#[5]">MemManage_Handler</a> from stm32f4xx_it.o(i.MemManage_Handler) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[3]">NMI_Handler</a> from stm32f4xx_it.o(i.NMI_Handler) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[82]">NWK_Pack_RxServer_S</a> from nwkmodbus.o(i.NWK_Pack_RxServer_S) referenced from com_server.o(i.UART_TO_NWK_CCB_Init_S)
 <LI><a href="#[4d]">OTG_FS_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[36]">OTG_FS_WKUP_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[55]">OTG_HS_EP1_IN_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[54]">OTG_HS_EP1_OUT_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[57]">OTG_HS_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[56]">OTG_HS_WKUP_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[d]">PVD_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[a]">PendSV_Handler</a> from port.o(.emb_text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[11]">RCC_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[35]">RTC_Alarm_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[f]">RTC_WKUP_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[2]">Reset_Handler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[3d]">SDIO_IRQHandler</a> from m4_sdio.o(i.SDIO_IRQHandler) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[64]">SD_DMAError</a> from stm32f4xx_hal_sd.o(i.SD_DMAError) referenced from stm32f4xx_hal_sd.o(i.HAL_SD_ReadBlocks_DMA)
 <LI><a href="#[64]">SD_DMAError</a> from stm32f4xx_hal_sd.o(i.SD_DMAError) referenced from stm32f4xx_hal_sd.o(i.HAL_SD_WriteBlocks_DMA)
 <LI><a href="#[63]">SD_DMAReceiveCplt</a> from stm32f4xx_hal_sd.o(i.SD_DMAReceiveCplt) referenced from stm32f4xx_hal_sd.o(i.HAL_SD_ReadBlocks_DMA)
 <LI><a href="#[62]">SD_DMARxAbort</a> from stm32f4xx_hal_sd.o(i.SD_DMARxAbort) referenced from stm32f4xx_hal_sd.o(i.HAL_SD_IRQHandler)
 <LI><a href="#[65]">SD_DMATransmitCplt</a> from stm32f4xx_hal_sd.o(i.SD_DMATransmitCplt) referenced from stm32f4xx_hal_sd.o(i.HAL_SD_WriteBlocks_DMA)
 <LI><a href="#[61]">SD_DMATxAbort</a> from stm32f4xx_hal_sd.o(i.SD_DMATxAbort) referenced from stm32f4xx_hal_sd.o(i.HAL_SD_IRQHandler)
 <LI><a href="#[9b]">SD_initialize</a> from sd_diskio.o(i.SD_initialize) referenced from sd_diskio.o(.constdata)
 <LI><a href="#[9f]">SD_ioctl</a> from sd_diskio.o(i.SD_ioctl) referenced from sd_diskio.o(.constdata)
 <LI><a href="#[9d]">SD_read</a> from sd_diskio.o(i.SD_read) referenced from sd_diskio.o(.constdata)
 <LI><a href="#[9c]">SD_status</a> from sd_diskio.o(i.SD_status) referenced from sd_diskio.o(.constdata)
 <LI><a href="#[9e]">SD_write</a> from sd_diskio.o(i.SD_write) referenced from sd_diskio.o(.constdata)
 <LI><a href="#[2f]">SPI1_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[30]">SPI2_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[3f]">SPI3_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[8]">SVC_Handler</a> from port.o(.emb_text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[b]">SysTick_Handler</a> from stm32f4xx_it.o(i.SysTick_Handler) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[5b]">SystemInit</a> from system_stm32f4xx.o(i.SystemInit) referenced from startup_stm32f405xx.o(.text)
 <LI><a href="#[e]">TAMP_STAMP_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[24]">TIM1_BRK_TIM9_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[27]">TIM1_CC_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[26]">TIM1_TRG_COM_TIM11_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[25]">TIM1_UP_TIM10_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[28]">TIM2_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[29]">TIM3_IRQHandler</a> from stm32f4xx_it.o(i.TIM3_IRQHandler) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[2a]">TIM4_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[3e]">TIM5_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[42]">TIM6_DAC_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[43]">TIM7_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[37]">TIM8_BRK_TIM12_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[3a]">TIM8_CC_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[39]">TIM8_TRG_COM_TIM14_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[38]">TIM8_UP_TIM13_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[8b]">Task01_F</a> from main.o(i.Task01_F) referenced from main.o(i.main)
 <LI><a href="#[8c]">Task02_F</a> from main.o(i.Task02_F) referenced from main.o(i.main)
 <LI><a href="#[8d]">Task03_F</a> from main.o(i.Task03_F) referenced from main.o(i.main)
 <LI><a href="#[8e]">Task04_F</a> from main.o(i.Task04_F) referenced from main.o(i.main)
 <LI><a href="#[8f]">Task05_F</a> from main.o(i.Task05_F) referenced from main.o(i.main)
 <LI><a href="#[90]">Task06_F</a> from main.o(i.Task06_F) referenced from main.o(i.main)
 <LI><a href="#[91]">Task07_F</a> from main.o(i.Task07_F) referenced from main.o(i.main)
 <LI><a href="#[92]">Task08_F</a> from main.o(i.Task08_F) referenced from main.o(i.main)
 <LI><a href="#[93]">Task09_F</a> from main.o(i.Task09_F) referenced from main.o(i.main)
 <LI><a href="#[94]">Task10_F</a> from main.o(i.Task10_F) referenced from main.o(i.main)
 <LI><a href="#[96]">Task12_F</a> from main.o(i.Task12_F) referenced from main.o(i.main)
 <LI><a href="#[97]">Task13_F</a> from main.o(i.Task13_F) referenced from main.o(i.main)
 <LI><a href="#[95]">TaskCli</a> from main.o(i.TaskCli) referenced from main.o(i.main)
 <LI><a href="#[a0]">Timer01Callback</a> from main.o(i.Timer01Callback) referenced from main.o(.constdata)
 <LI><a href="#[40]">UART4_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[41]">UART5_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[66]">UART_DMAAbortOnError</a> from stm32f4xx_hal_uart.o(i.UART_DMAAbortOnError) referenced from stm32f4xx_hal_uart.o(i.HAL_UART_IRQHandler)
 <LI><a href="#[69]">UART_DMAError</a> from stm32f4xx_hal_uart.o(i.UART_DMAError) referenced from stm32f4xx_hal_uart.o(i.HAL_UART_Receive_DMA)
 <LI><a href="#[69]">UART_DMAError</a> from stm32f4xx_hal_uart.o(i.UART_DMAError) referenced from stm32f4xx_hal_uart.o(i.HAL_UART_Transmit_DMA)
 <LI><a href="#[67]">UART_DMAReceiveCplt</a> from stm32f4xx_hal_uart.o(i.UART_DMAReceiveCplt) referenced from stm32f4xx_hal_uart.o(i.HAL_UART_Receive_DMA)
 <LI><a href="#[68]">UART_DMARxHalfCplt</a> from stm32f4xx_hal_uart.o(i.UART_DMARxHalfCplt) referenced from stm32f4xx_hal_uart.o(i.HAL_UART_Receive_DMA)
 <LI><a href="#[6a]">UART_DMATransmitCplt</a> from stm32f4xx_hal_uart.o(i.UART_DMATransmitCplt) referenced from stm32f4xx_hal_uart.o(i.HAL_UART_Transmit_DMA)
 <LI><a href="#[6b]">UART_DMATxHalfCplt</a> from stm32f4xx_hal_uart.o(i.UART_DMATxHalfCplt) referenced from stm32f4xx_hal_uart.o(i.HAL_UART_Transmit_DMA)
 <LI><a href="#[31]">USART1_IRQHandler</a> from m4_uart1.o(i.USART1_IRQHandler) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[32]">USART2_IRQHandler</a> from m4_uart2.o(i.USART2_IRQHandler) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[33]">USART3_IRQHandler</a> from m4_uart3.o(i.USART3_IRQHandler) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[51]">USART6_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[7]">UsageFault_Handler</a> from stm32f4xx_it.o(i.UsageFault_Handler) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[c]">WWDG_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[83]">XY188_Pack_RxServer_S</a> from xy188pro.o(i.XY188_Pack_RxServer_S) referenced from com_server.o(i.UART_TO_XY188_CCB_Init_S)
 <LI><a href="#[5c]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f405xx.o(.text)
 <LI><a href="#[5e]">_sbackspace</a> from _sgetc.o(.text) referenced from __0sscanf.o(.text)
 <LI><a href="#[5f]">_scanf_char_input</a> from scanf_char.o(.text) referenced from scanf_char.o(.text)
 <LI><a href="#[5d]">_sgetc</a> from _sgetc.o(.text) referenced from __0sscanf.o(.text)
 <LI><a href="#[85]">_snputc</a> from printfa.o(i._snputc) referenced from printfa.o(i.__0snprintf)
 <LI><a href="#[86]">_sputc</a> from printfa.o(i._sputc) referenced from printfa.o(i.__0sprintf)
 <LI><a href="#[be]">alarm</a> from debug.o(i.alarm) referenced from rtx_cli.o(.constdata)
 <LI><a href="#[bf]">changedevnum</a> from debug.o(i.changedevnum) referenced from rtx_cli.o(.constdata)
 <LI><a href="#[a6]">clear_screen</a> from rtx_cli.o(i.clear_screen) referenced from rtx_cli.o(.constdata)
 <LI><a href="#[a3]">cli_exit_handler</a> from rtx_cli.o(i.cli_exit_handler) referenced from rtx_cli.o(.constdata)
 <LI><a href="#[c5]">ddf2ctrl</a> from sys_state.o(i.ddf2ctrl) referenced from rtx_cli.o(.constdata)
 <LI><a href="#[bd]">devchange</a> from sys_state.o(i.devchange) referenced from rtx_cli.o(.constdata)
 <LI><a href="#[af]">devicedata</a> from sys_state.o(i.devicedata) referenced from rtx_cli.o(.constdata)
 <LI><a href="#[b5]">devicedatareset</a> from sys_state.o(i.devicedatareset) referenced from rtx_cli.o(.constdata)
 <LI><a href="#[ad]">devicepara</a> from sys_state.o(i.devicepara) referenced from rtx_cli.o(.constdata)
 <LI><a href="#[b3]">deviceparareset</a> from sys_state.o(i.deviceparareset) referenced from rtx_cli.o(.constdata)
 <LI><a href="#[b0]">devicestatus</a> from sys_state.o(i.devicestatus) referenced from rtx_cli.o(.constdata)
 <LI><a href="#[84]">fputc</a> from m4_uart1.o(i.fputc) referenced from printfa.o(i.__0printf)
 <LI><a href="#[a2]">get_version</a> from debug.o(i.get_version) referenced from rtx_cli.o(.constdata)
 <LI><a href="#[a1]">help_command</a> from rtx_cli.o(i.help_command) referenced from rtx_cli.o(.constdata)
 <LI><a href="#[60]">isspace</a> from isspace_o.o(.text) referenced from scanf_char.o(.text)
 <LI><a href="#[5a]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[ba]">mem</a> from debug.o(i.mem) referenced from rtx_cli.o(.constdata)
 <LI><a href="#[c4]">powrelayctrl</a> from sys_state.o(i.powrelayctrl) referenced from rtx_cli.o(.constdata)
 <LI><a href="#[aa]">printServer</a> from debug.o(i.printServer) referenced from rtx_cli.o(.constdata)
 <LI><a href="#[a7]">printenv</a> from sys_state.o(i.printenv) referenced from rtx_cli.o(.constdata)
 <LI><a href="#[99]">prvIdleTask</a> from tasks.o(i.prvIdleTask) referenced from tasks.o(i.vTaskStartScheduler)
 <LI><a href="#[98]">prvTaskExitError</a> from port.o(i.prvTaskExitError) referenced from port.o(i.pxPortInitialiseStack)
 <LI><a href="#[9a]">prvTimerTask</a> from timers.o(i.prvTimerTask) referenced from timers.o(i.xTimerCreateTimerTask)
 <LI><a href="#[ab]">ps</a> from debug.o(i.ps) referenced from rtx_cli.o(.constdata)
 <LI><a href="#[a4]">reboot</a> from debug.o(i.reboot) referenced from rtx_cli.o(.constdata)
 <LI><a href="#[bc]">saveData</a> from debug.o(i.saveData) referenced from rtx_cli.o(.constdata)
 <LI><a href="#[a8]">setEnvParameter</a> from debug.o(i.setEnvParameter) referenced from rtx_cli.o(.constdata)
 <LI><a href="#[a9]">setServer</a> from debug.o(i.setServer) referenced from rtx_cli.o(.constdata)
 <LI><a href="#[c1]">setread</a> from sys_state.o(i.setread) referenced from rtx_cli.o(.constdata)
 <LI><a href="#[c2]">setsend</a> from sys_state.o(i.setsend) referenced from rtx_cli.o(.constdata)
 <LI><a href="#[c3]">setshare</a> from sys_state.o(i.setshare) referenced from rtx_cli.o(.constdata)
 <LI><a href="#[c0]">setsn</a> from sys_state.o(i.setsn) referenced from rtx_cli.o(.constdata)
 <LI><a href="#[bb]">setsystype</a> from sys_state.o(i.setsystype) referenced from rtx_cli.o(.constdata)
 <LI><a href="#[b7]">settime</a> from sys_state.o(i.settime) referenced from rtx_cli.o(.constdata)
 <LI><a href="#[b9]">settime_f</a> from sys_state.o(i.settime_f) referenced from rtx_cli.o(.constdata)
 <LI><a href="#[b8]">settime_s</a> from sys_state.o(i.settime_s) referenced from rtx_cli.o(.constdata)
 <LI><a href="#[b6]">sysdataresetall</a> from sys_state.o(i.sysdataresetall) referenced from rtx_cli.o(.constdata)
 <LI><a href="#[c7]">sysdebug_Command</a> from rtx_cli.o(i.sysdebug_Command) referenced from rtx_cli.o(.constdata)
 <LI><a href="#[b1]">systemparareset</a> from sys_state.o(i.systemparareset) referenced from rtx_cli.o(.constdata)
 <LI><a href="#[a5]">uptime_Command</a> from debug.o(i.uptime_Command) referenced from rtx_cli.o(.constdata)
 <LI><a href="#[ae]">userdata</a> from sys_state.o(i.userdata) referenced from rtx_cli.o(.constdata)
 <LI><a href="#[b4]">userdatareset</a> from sys_state.o(i.userdatareset) referenced from rtx_cli.o(.constdata)
 <LI><a href="#[ac]">userpara</a> from sys_state.o(i.userpara) referenced from rtx_cli.o(.constdata)
 <LI><a href="#[b2]">userparareset</a> from sys_state.o(i.userparareset) referenced from rtx_cli.o(.constdata)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[5c]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(.text)
</UL>
<P><STRONG><a name="[3e8]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[c8]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[e9]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[3e9]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[3ea]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[3eb]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[3ec]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[3ed]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[8]"></a>SVC_Handler</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[3e2]"></a>__asm___6_port_c_39a90d8d__prvStartFirstTask</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[3e1]"></a>__asm___6_port_c_39a90d8d__prvEnableVFP</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[a]"></a>PendSV_Handler</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[3d3]"></a>vPortGetIPSR</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
</UL>

<P><STRONG><a name="[2]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>CAN2_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>CAN2_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>CAN2_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>CAN2_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMA1_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>DMA1_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>DMA2_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>DMA2_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>DMA2_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>DMA2_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>FMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>HASH_RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>OTG_FS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>OTG_HS_EP1_IN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>OTG_HS_EP1_OUT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>OTG_HS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>OTG_HS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIM1_BRK_TIM9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIM1_TRG_COM_TIM11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIM1_UP_TIM10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>TIM8_BRK_TIM12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>TIM8_TRG_COM_TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>TIM8_UP_TIM13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>USART6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[cb]"></a>__rt_ctype_table</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ctype_o.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_bad_command
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isspace
</UL>

<P><STRONG><a name="[60]"></a>isspace</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, isspace_o.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = isspace
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scanf_char.o(.text)
</UL>
<P><STRONG><a name="[cc]"></a>mktime</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, mktime.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mktime &rArr; _localtime
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_localtime
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTimeTick
</UL>

<P><STRONG><a name="[3ee]"></a>___aeabi_memcpy8$move</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[11b]"></a>__aeabi_memcpy</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDeviceNum
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserData_Save
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserData_InitALL
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysDevData_InitALL
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY1000_Pack_TxServer_S
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task13_F
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task08_F
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_write
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_read
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_Transmit
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kfifo_put
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kfifo_get
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TO_FY1000_CCB_QueueSend
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY1000_Pack_Rx_S
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysDevData_Save
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysDevData_ResetALL
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysDevData_Read
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserData_ResetALL
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserData_Read
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClientCH1_QueueSend
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;contextInit
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ymodem_Receive
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tab_complete
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_input
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadData_SPIFlash_UnSafe
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadData_FRAM_UnSafe
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3_Transmit
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5_process
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crl_u_MD5_Update
</UL>

<P><STRONG><a name="[107]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XY188_Pack_TxServer_S
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TO_XY188_CCB_QueueSend
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TO_NWK_CCB_QueueSend
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TO_HZCRL_CCB_QueueSend
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TO_HT2X188_CCB_QueueSend
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TO_FY2000_CCB_QueueSend
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TO_FY188_CCB_QueueSend
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TO_DDF2_CCB_QueueSend
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TO_BRC188_CCB_QueueSend
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NWK_Pack_TxServer_S
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IndepKEYFunction_Init
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HZCRL_Pack_TxServer_S
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT2X188_Pack_TxServer_S
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY2000_Pack_TxServer_S
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY188_Pack_TxServer_S
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDF2_Pack_TxServer_S
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BRC188_Pack_TxServer_S
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysDevData_ResetALL
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Open
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_1_1_5A
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_1_1_3
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_1_1_2_1
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IndepKEY_Create
</UL>

<P><STRONG><a name="[3ef]"></a>__aeabi_memmove</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[3f0]"></a>__aeabi_memmove4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[3f1]"></a>__aeabi_memmove8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[cf]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_write
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_read
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiFlashCopy
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calMd5_hash_SPI
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[3f2]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[3f3]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[ce]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveDeviceInfo
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ps_none
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ps_A
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;contextInit
</UL>

<P><STRONG><a name="[32a]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dogInit
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_init
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verifyProcessFile
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ps_p
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ps_a
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_input
</UL>

<P><STRONG><a name="[3f4]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[d0]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[13a]"></a>strcat</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, strcat.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Open
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_1_1_5A
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_1_1_3
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_1_1_2_1
</UL>

<P><STRONG><a name="[374]"></a>strchr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, strchr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_input
</UL>

<P><STRONG><a name="[2b9]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskList
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskGetRunTimeStats
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvWriteNameToBuffer
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settime_s
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settime_f
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settime
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setsystype
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setsn
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setshare
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setsend
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setread
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powrelayctrl
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;devchange
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ddf2ctrl
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveDeviceInfo
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;contextInit
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uptime_Command
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setServer
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setEnvParameter
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saveData
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ps
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printServer
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_version
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;changedevnum
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tab_complete
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysdebug_Command
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;help_command
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_input
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_screen
</UL>

<P><STRONG><a name="[32d]"></a>strcmp</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, strcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_main
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ps
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lookup_command
</UL>

<P><STRONG><a name="[3dc]"></a>memcmp</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verifyProcessFile
</UL>

<P><STRONG><a name="[3c0]"></a>strcpy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, strcpy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvWriteNameToBuffer
</UL>

<P><STRONG><a name="[37a]"></a>strncmp</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, strncmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tab_complete
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lookup_command
</UL>

<P><STRONG><a name="[f0]"></a>strrchr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, strrchr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dogInit
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveLog
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HbMainTask
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HbInit
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY_1000Send_Code_QInput
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY1000_Pack_TxServer_S
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AlarmClk_ParaSet
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task13_F
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task12_F
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task09_F
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task08_F
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task07_F
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task01_F
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Alarm_UserShare_CallBack
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Alarm_DataSave_CallBack
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verifyProcessFile
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_file_type
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY1000_Pack_Rx_S
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDF2_Pack_Rx_S
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BRC188_Pack_Rx_S
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT2X188_Pack_Rx_S
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XY188_Pack_Rx_S
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HZCRL_Pack_Rx_S
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY2000_Pack_Rx_S
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY188_Pack_Rx_S
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NWK_Pack_Rx_S
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ddf2ctrl
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Guard
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveDeviceInfo
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateFileName
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkCard
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MountFS
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisSDCard
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;down_env_data
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiFlashCopy
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calMd5_hash_SPI
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadData_SPIFlash_UnSafe
</UL>

<P><STRONG><a name="[d1]"></a>strcasecmp</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, strcasecmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = strcasecmp
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tolower
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysdebug_Command
</UL>

<P><STRONG><a name="[d3]"></a>__0sscanf</STRONG> (Thumb, 48 bytes, Stack size 72 bytes, __0sscanf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>
<BR>[Called By]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isValidStr
</UL>

<P><STRONG><a name="[d5]"></a>_scanf_int</STRONG> (Thumb, 332 bytes, Stack size 56 bytes, _scanf_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[ea]"></a>_scanf_string</STRONG> (Thumb, 224 bytes, Stack size 56 bytes, _scanf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _scanf_string
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[d7]"></a>atoi</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, atoi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userpara
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userdata
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updatetimes
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updatetimef
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updatetime
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setsystype
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setsn
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setshare
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setsend
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setread
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;devicepara
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;devicedata
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;devchange
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ddf2ctrl
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClirateSet
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateServerIP
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ps
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;changedevnum
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysdebug_Command
</UL>

<P><STRONG><a name="[342]"></a>__aeabi_f2d</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userdata
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printenv
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;devicedata
</UL>

<P><STRONG><a name="[3f5]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[320]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[da]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[db]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[3f6]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[d2]"></a>tolower</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tolower.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcasecmp
</UL>

<P><STRONG><a name="[dd]"></a>localtime</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, localtime_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = localtime &rArr; _localtime
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_localtime
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getRealTime
</UL>

<P><STRONG><a name="[cd]"></a>_localtime</STRONG> (Thumb, 134 bytes, Stack size 8 bytes, localtime_i.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _localtime
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localtime
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mktime
</UL>

<P><STRONG><a name="[d6]"></a>_chval</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_int
</UL>

<P><STRONG><a name="[d4]"></a>__vfscanf_char</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, scanf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>

<P><STRONG><a name="[5d]"></a>_sgetc</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> __0sscanf.o(.text)
</UL>
<P><STRONG><a name="[5e]"></a>_sbackspace</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> __0sscanf.o(.text)
</UL>
<P><STRONG><a name="[d9]"></a>strtol</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, strtol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[3f7]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[e0]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
</UL>

<P><STRONG><a name="[e4]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[e5]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[e6]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[e7]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[e8]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[31d]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[c9]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[3f8]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[dc]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[3f9]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[e1]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[3fa]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[de]"></a>__vfscanf</STRONG> (Thumb, 808 bytes, Stack size 88 bytes, _scanf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_string
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_int
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>

<P><STRONG><a name="[df]"></a>_strtoul</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, _strtoul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[e3]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[e2]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[3fb]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[3fc]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[7d]"></a>APP_TO_UART2_TXServer</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, com_server.o(i.APP_TO_UART2_TXServer))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = APP_TO_UART2_TXServer &rArr; UART2_Transmit &rArr; HAL_UART_Transmit_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_Transmit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> com_server.o(i.UART_TO_FY1000_CCB_Init_S)
</UL>
<P><STRONG><a name="[7a]"></a>APP_TO_UART3_TXServer</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, com_server.o(i.APP_TO_UART3_TXServer))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = APP_TO_UART3_TXServer &rArr; UART3_Transmit &rArr; HAL_UART_Transmit_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3_Transmit
</UL>
<BR>[Address Reference Count : 8]<UL><LI> com_server.o(i.UART_TO_BRC188_CCB_Init_S)
<LI> com_server.o(i.UART_TO_DDF2_CCB_Init_S)
<LI> com_server.o(i.UART_TO_FY188_CCB_Init_S)
<LI> com_server.o(i.UART_TO_FY2000_CCB_Init_S)
<LI> com_server.o(i.UART_TO_HT2X188_CCB_Init_S)
<LI> com_server.o(i.UART_TO_HZCRL_CCB_Init_S)
<LI> com_server.o(i.UART_TO_NWK_CCB_Init_S)
<LI> com_server.o(i.UART_TO_XY188_CCB_Init_S)
</UL>
<P><STRONG><a name="[2e4]"></a>AlarmClk_CreatOne</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, alarmclk.o(i.AlarmClk_CreatOne))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = AlarmClk_CreatOne
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task12_F
</UL>

<P><STRONG><a name="[2e5]"></a>AlarmClk_EnableCtrl</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, alarmclk.o(i.AlarmClk_EnableCtrl))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task12_F
</UL>

<P><STRONG><a name="[2d3]"></a>AlarmClk_ExecutServer</STRONG> (Thumb, 216 bytes, Stack size 16 bytes, alarmclk.o(i.AlarmClk_ExecutServer))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = AlarmClk_ExecutServer
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task01_F
</UL>

<P><STRONG><a name="[37b]"></a>AlarmClk_Init</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, alarmclk.o(i.AlarmClk_Init))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ed]"></a>AlarmClk_ParaSet</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, alarmclk.o(i.AlarmClk_ParaSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = AlarmClk_ParaSet &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexWait
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelSysTick
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTimeTick
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strrchr
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task12_F
</UL>

<P><STRONG><a name="[88]"></a>Alarm_DataSave_CallBack</STRONG> (Thumb, 148 bytes, Stack size 48 bytes, main.o(i.Alarm_DataSave_CallBack))
<BR><BR>[Stack]<UL><LI>Max Depth = 1704<LI>Call Chain = Alarm_DataSave_CallBack &rArr; SaveLog &rArr; SaveDeviceInfo &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getRealTime
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveLog
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexWait
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelSysTick
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strrchr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[78]"></a>Alarm_UserShare_CallBack</STRONG> (Thumb, 432 bytes, Stack size 24 bytes, main.o(i.Alarm_UserShare_CallBack))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = Alarm_UserShare_CallBack &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemEnergyValue_Cal
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexWait
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelSysTick
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strrchr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.Task12_F)
</UL>
<P><STRONG><a name="[f8]"></a>BRC188_Pack_0X01_S</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, brc188pro.o(i.BRC188_Pack_0X01_S))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = BRC188_Pack_0X01_S &rArr; SUMCheck_Input
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUMCheck_Input
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BRC188_Pack_TxServer_S
</UL>

<P><STRONG><a name="[fd]"></a>BRC188_Pack_0X129_S</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, brc188pro.o(i.BRC188_Pack_0X129_S))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BRC188_Pack_0X129_S
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BRC188_Pack_Rx_S
</UL>

<P><STRONG><a name="[fa]"></a>BRC188_Pack_RxAnalyze_S</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, brc188pro.o(i.BRC188_Pack_RxAnalyze_S))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = BRC188_Pack_RxAnalyze_S &rArr; BRC188_Pack_Rx_S &rArr; SysDevData_Save &rArr; SysDevData_Update &rArr; WriteData_FRAM &rArr; WriteData_FRAM_UnSafe &rArr; ReadData_FRAM_UnSafe &rArr; FRAM_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUMCheck_Check
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BRC188_Pack_Rx_S
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BRC188_Pack_RxServer_S
</UL>

<P><STRONG><a name="[79]"></a>BRC188_Pack_RxServer_S</STRONG> (Thumb, 484 bytes, Stack size 24 bytes, brc188pro.o(i.BRC188_Pack_RxServer_S))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = BRC188_Pack_RxServer_S &rArr; BRC188_Pack_RxAnalyze_S &rArr; BRC188_Pack_Rx_S &rArr; SysDevData_Save &rArr; SysDevData_Update &rArr; WriteData_FRAM &rArr; WriteData_FRAM_UnSafe &rArr; ReadData_FRAM_UnSafe &rArr; FRAM_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BRC188_Pack_RxAnalyze_S
</UL>
<BR>[Address Reference Count : 1]<UL><LI> com_server.o(i.UART_TO_BRC188_CCB_Init_S)
</UL>
<P><STRONG><a name="[fc]"></a>BRC188_Pack_Rx_S</STRONG> (Thumb, 1782 bytes, Stack size 160 bytes, brc188pro.o(i.BRC188_Pack_Rx_S))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = BRC188_Pack_Rx_S &rArr; SysDevData_Save &rArr; SysDevData_Update &rArr; WriteData_FRAM &rArr; WriteData_FRAM_UnSafe &rArr; ReadData_FRAM_UnSafe &rArr; FRAM_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserData_Save
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY_1000Send_Code_QInput
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexWait
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelSysTick
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysDevData_Save
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetUser_Num
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BRC188_Pack_0X129_S
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BcdToHex4
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BcdToHex2
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BcdToHex
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strrchr
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BRC188_Pack_RxAnalyze_S
</UL>

<P><STRONG><a name="[105]"></a>BRC188_Pack_TxServer_S</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, brc188pro.o(i.BRC188_Pack_TxServer_S))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = BRC188_Pack_TxServer_S &rArr; xQueueGenericReceive &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BRC188_Pack_0X01_S
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task07_F
</UL>

<P><STRONG><a name="[108]"></a>BRC_188Send_Code_QInput</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, clientapp.o(i.BRC_188Send_Code_QInput))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = BRC_188Send_Code_QInput &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexWait
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClientCH1_QueueSend
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task08_F
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY1000_Pack_Rx_S
</UL>

<P><STRONG><a name="[10a]"></a>BSP_SD_GetCardInfo</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, bsp_driver_sd.o(i.BSP_SD_GetCardInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_SD_GetCardInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_GetCardInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ioctl
</UL>

<P><STRONG><a name="[10c]"></a>BSP_SD_GetCardState</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, bsp_driver_sd.o(i.BSP_SD_GetCardState))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = BSP_SD_GetCardState &rArr; HAL_SD_GetCardState &rArr; SD_SendStatus &rArr; SDMMC_CmdSendStatus &rArr; SDMMC_GetCmdResp1 &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_GetCardState
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_write
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_status
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_read
</UL>

<P><STRONG><a name="[10e]"></a>BSP_SD_Init</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, bsp_driver_sd.o(i.BSP_SD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = BSP_SD_Init &rArr; HAL_SD_ConfigWideBusOperation &rArr; SD_WideBus_Enable &rArr; SD_FindSCR &rArr; SDMMC_CmdBlockLength &rArr; SDMMC_GetCmdResp1 &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_Init
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ConfigWideBusOperation
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_IsDetected
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_initialize
</UL>

<P><STRONG><a name="[10f]"></a>BSP_SD_IsDetected</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, bsp_driver_sd.o(i.BSP_SD_IsDetected))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_SD_IsDetected
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_Init
</UL>

<P><STRONG><a name="[112]"></a>BSP_SD_ReadBlocks_DMA</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, bsp_driver_sd.o(i.BSP_SD_ReadBlocks_DMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = BSP_SD_ReadBlocks_DMA &rArr; HAL_SD_ReadBlocks_DMA &rArr; SDMMC_CmdReadSingleBlock &rArr; SDMMC_GetCmdResp1 &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ReadBlocks_DMA
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_read
</UL>

<P><STRONG><a name="[114]"></a>BSP_SD_WriteBlocks_DMA</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, bsp_driver_sd.o(i.BSP_SD_WriteBlocks_DMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = BSP_SD_WriteBlocks_DMA &rArr; HAL_SD_WriteBlocks_DMA &rArr; SDMMC_CmdWriteSingleBlock &rArr; SDMMC_GetCmdResp1 &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_WriteBlocks_DMA
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_write
</UL>

<P><STRONG><a name="[100]"></a>BcdToHex</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, typedef.o(i.BcdToHex))
<BR><BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BRC188_Pack_Rx_S
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT2X188_Pack_Rx_S
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XY188_Pack_Rx_S
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HZCRL_Pack_Rx_S
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY188_Pack_Rx_S
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCF8563_Read_DEV
</UL>

<P><STRONG><a name="[ff]"></a>BcdToHex2</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, typedef.o(i.BcdToHex2))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BcdToHex2
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BRC188_Pack_Rx_S
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT2X188_Pack_Rx_S
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XY188_Pack_Rx_S
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HZCRL_Pack_Rx_S
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY188_Pack_Rx_S
</UL>

<P><STRONG><a name="[fe]"></a>BcdToHex4</STRONG> (Thumb, 146 bytes, Stack size 8 bytes, typedef.o(i.BcdToHex4))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BcdToHex4
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BRC188_Pack_Rx_S
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT2X188_Pack_Rx_S
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XY188_Pack_Rx_S
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HZCRL_Pack_Rx_S
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY188_Pack_Rx_S
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveDeviceInfo
</UL>

<P><STRONG><a name="[89]"></a>BeepWork_RebackFun</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, beep.o(i.BeepWork_RebackFun))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BeepWork_RebackFun
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[6]"></a>BusFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.BusFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[19b]"></a>CRC16Cal</STRONG> (Thumb, 56 bytes, Stack size 20 bytes, crc16.o(i.CRC16Cal))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = CRC16Cal
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY1000_Pack_Rx_S
</UL>

<P><STRONG><a name="[290]"></a>CRC16Check</STRONG> (Thumb, 68 bytes, Stack size 20 bytes, crc16.o(i.CRC16Check))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = CRC16Check
</UL>
<BR>[Called By]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadData_SPIFlash_UnSafe
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadData_FRAM_UnSafe
</UL>

<P><STRONG><a name="[310]"></a>CRC16Put</STRONG> (Thumb, 62 bytes, Stack size 20 bytes, crc16.o(i.CRC16Put))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = CRC16Put
</UL>
<BR>[Called By]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteData_SPIFlash_UnSafe
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteData_FRAM_UnSafe
</UL>

<P><STRONG><a name="[233]"></a>CalSum</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, hzcrl_xpro.o(i.CalSum))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CalSum
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HZCRL_Pack_RxServer_S
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HZCRL_Pack_0X01_S
</UL>

<P><STRONG><a name="[117]"></a>CalculateProvideTimeServer</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, calculate.o(i.CalculateProvideTimeServer))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = CalculateProvideTimeServer &rArr; Con_Second &rArr; getTimeTick &rArr; mktime &rArr; _localtime
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Con_Second
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task01_F
</UL>

<P><STRONG><a name="[264]"></a>Clear_PSG</STRONG> (Thumb, 462 bytes, Stack size 0 bytes, app_ui.o(i.Clear_PSG))
<BR><BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_1_4
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_1_3_PassWord
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_1_3_7
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_1_3_6
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_1_3_5
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_1_3_4
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_1_3_1
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_1_2
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_1_1_5
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_1_1_4
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_1_1_3
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_1_1_2
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_1_1_1
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_1_1
</UL>

<P><STRONG><a name="[154]"></a>Clear_VisionBUF</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, uc1698.o(i.Clear_VisionBUF))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Clear_VisionBUF
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayManager
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task04_F
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Open
</UL>

<P><STRONG><a name="[119]"></a>ClientCH1SendMetexInit</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, clientapp.o(i.ClientCH1SendMetexInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = ClientCH1SendMetexInit &rArr; osMutexCreate &rArr; xQueueCreateMutex &rArr; prvInitialiseMutex &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[109]"></a>ClientCH1_QueueSend</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, clientapp.o(i.ClientCH1_QueueSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = ClientCH1_QueueSend &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XY_188Send_Code_QInput
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NWK_Send_Code_QInput
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HZCRL_188Send_Code_QInput
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT2X_188Send_Code_QInput
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY_2000Send_Code_QInput
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY_188Send_Code_QInput
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDF2_Send_Code_QInput
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BRC_188Send_Code_QInput
</UL>

<P><STRONG><a name="[c6]"></a>ClirateSet</STRONG> (Thumb, 250 bytes, Stack size 24 bytes, sys_state.o(i.ClirateSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = ClirateSet &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_DeInit
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexWait
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_cli.o(.constdata)
</UL>
<P><STRONG><a name="[118]"></a>Con_Second</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, calculate.o(i.Con_Second))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = Con_Second &rArr; getTimeTick &rArr; mktime &rArr; _localtime
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTimeTick
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateProvideTimeServer
</UL>

<P><STRONG><a name="[11f]"></a>ConfigureTimeForRunTimeStats</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32f4xx_hal_timebase_tim.o(i.ConfigureTimeForRunTimeStats))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ConfigureTimeForRunTimeStats &rArr; TIM3_Init &rArr; HAL_TIM_Base_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[121]"></a>CreateFileName</STRONG> (Thumb, 224 bytes, Stack size 56 bytes, serialization.o(i.CreateFileName))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = CreateFileName &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexWait
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelSysTick
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strrchr
</UL>
<BR>[Called By]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveDeviceInfo
</UL>

<P><STRONG><a name="[124]"></a>DDF2_Pack_0X01_S</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, ddf2pro.o(i.DDF2_Pack_0X01_S))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DDF2_Pack_0X01_S &rArr; SUMCheck_Input
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUMCheck_Input
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDF2_Pack_TxServer_S
</UL>

<P><STRONG><a name="[128]"></a>DDF2_Pack_0X02_S</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, ddf2pro.o(i.DDF2_Pack_0X02_S))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DDF2_Pack_0X02_S
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDF2_Pack_Rx_S
</UL>

<P><STRONG><a name="[125]"></a>DDF2_Pack_0X03_S</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, ddf2pro.o(i.DDF2_Pack_0X03_S))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DDF2_Pack_0X03_S &rArr; SUMCheck_Input
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUMCheck_Input
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDF2_Pack_TxServer_S
</UL>

<P><STRONG><a name="[129]"></a>DDF2_Pack_0X04_S</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, ddf2pro.o(i.DDF2_Pack_0X04_S))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DDF2_Pack_0X04_S
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDF2_Pack_Rx_S
</UL>

<P><STRONG><a name="[126]"></a>DDF2_Pack_RxAnalyze_S</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, ddf2pro.o(i.DDF2_Pack_RxAnalyze_S))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = DDF2_Pack_RxAnalyze_S &rArr; DDF2_Pack_Rx_S &rArr; SysDevData_Save &rArr; SysDevData_Update &rArr; WriteData_FRAM &rArr; WriteData_FRAM_UnSafe &rArr; ReadData_FRAM_UnSafe &rArr; FRAM_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUMCheck_Check
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDF2_Pack_Rx_S
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDF2_Pack_RxServer_S
</UL>

<P><STRONG><a name="[7b]"></a>DDF2_Pack_RxServer_S</STRONG> (Thumb, 484 bytes, Stack size 24 bytes, ddf2pro.o(i.DDF2_Pack_RxServer_S))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = DDF2_Pack_RxServer_S &rArr; DDF2_Pack_RxAnalyze_S &rArr; DDF2_Pack_Rx_S &rArr; SysDevData_Save &rArr; SysDevData_Update &rArr; WriteData_FRAM &rArr; WriteData_FRAM_UnSafe &rArr; ReadData_FRAM_UnSafe &rArr; FRAM_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDF2_Pack_RxAnalyze_S
</UL>
<BR>[Address Reference Count : 1]<UL><LI> com_server.o(i.UART_TO_DDF2_CCB_Init_S)
</UL>
<P><STRONG><a name="[127]"></a>DDF2_Pack_Rx_S</STRONG> (Thumb, 914 bytes, Stack size 136 bytes, ddf2pro.o(i.DDF2_Pack_Rx_S))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = DDF2_Pack_Rx_S &rArr; SysDevData_Save &rArr; SysDevData_Update &rArr; WriteData_FRAM &rArr; WriteData_FRAM_UnSafe &rArr; ReadData_FRAM_UnSafe &rArr; FRAM_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY_1000Send_Code_QInput
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexWait
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelSysTick
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysDevData_Save
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDF2_Pack_0X04_S
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDF2_Pack_0X02_S
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strrchr
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDF2_Pack_RxAnalyze_S
</UL>

<P><STRONG><a name="[12a]"></a>DDF2_Pack_TxServer_S</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, ddf2pro.o(i.DDF2_Pack_TxServer_S))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = DDF2_Pack_TxServer_S &rArr; xQueueGenericReceive &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDF2_Pack_0X03_S
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDF2_Pack_0X01_S
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task07_F
</UL>

<P><STRONG><a name="[12b]"></a>DDF2_Send_Code_QInput</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, clientapp.o(i.DDF2_Send_Code_QInput))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = DDF2_Send_Code_QInput &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexWait
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClientCH1_QueueSend
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task08_F
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY1000_Pack_Rx_S
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ddf2ctrl
</UL>

<P><STRONG><a name="[18]"></a>DMA1_Stream1_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, m4_uart3.o(i.DMA1_Stream1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMA1_Stream1_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Stream3_IRQHandler</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, m4_uart3.o(i.DMA1_Stream3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMA1_Stream3_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>DMA1_Stream5_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, m4_uart2.o(i.DMA1_Stream5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMA1_Stream5_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>DMA1_Stream6_IRQHandler</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, m4_uart2.o(i.DMA1_Stream6_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMA1_Stream6_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>DMA2_Stream3_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, m4_sdio.o(i.DMA2_Stream3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMA2_Stream3_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>DMA2_Stream5_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, m4_uart1.o(i.DMA2_Stream5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMA2_Stream5_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>DMA2_Stream6_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, m4_sdio.o(i.DMA2_Stream6_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMA2_Stream6_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>DMA2_Stream7_IRQHandler</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, m4_uart1.o(i.DMA2_Stream7_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMA2_Stream7_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[130]"></a>DispArray</STRONG> (Thumb, 638 bytes, Stack size 40 bytes, uc1698.o(i.DispArray))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DispArray
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStringM
</UL>

<P><STRONG><a name="[12f]"></a>DispStringM</STRONG> (Thumb, 424 bytes, Stack size 60 bytes, uc1698.o(i.DispStringM))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = DispStringM &rArr; DispArray
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindZMStation
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispArray
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Open
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_1_X_UserFilter
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_1_4_1
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_1_4
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_1_3_PasswordError
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_1_3_DataSaveFlag
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_1_3_7
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_1_3_6
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_1_3_5
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_1_3_4
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_1_3_1
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_1_3PassWord
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_1_3
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_1_2_3
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_1_2_2
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_1_2_1
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_1_2
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_1_1_5A
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_1_1_4B
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_1_1_4A
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_1_1_3
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_1_1_2_1
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_1_1_2C
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_1_1_2B
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_1_1_2A
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_1_1_1B
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_1_1_1A
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_1_1
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_1
</UL>

<P><STRONG><a name="[132]"></a>Disp_1</STRONG> (Thumb, 172 bytes, Stack size 32 bytes, app_ui.o(i.Disp_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = Disp_1 &rArr; DispStringM &rArr; DispArray
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStringM
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayManager
</UL>

<P><STRONG><a name="[133]"></a>Disp_1_1</STRONG> (Thumb, 208 bytes, Stack size 40 bytes, app_ui.o(i.Disp_1_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = Disp_1_1 &rArr; DispStringM &rArr; DispArray
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStringM
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayManager
</UL>

<P><STRONG><a name="[134]"></a>Disp_1_1_1A</STRONG> (Thumb, 528 bytes, Stack size 48 bytes, app_ui.o(i.Disp_1_1_1A))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = Disp_1_1_1A &rArr; DispStringM &rArr; DispArray
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStringM
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayManager
</UL>

<P><STRONG><a name="[135]"></a>Disp_1_1_1B</STRONG> (Thumb, 852 bytes, Stack size 112 bytes, app_ui.o(i.Disp_1_1_1B))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = Disp_1_1_1B &rArr; DispStringM &rArr; DispArray
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStringM
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayManager
</UL>

<P><STRONG><a name="[136]"></a>Disp_1_1_2A</STRONG> (Thumb, 6256 bytes, Stack size 432 bytes, app_ui.o(i.Disp_1_1_2A))
<BR><BR>[Stack]<UL><LI>Max Depth = 532<LI>Call Chain = Disp_1_1_2A &rArr; DispStringM &rArr; DispArray
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStringM
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayManager
</UL>

<P><STRONG><a name="[137]"></a>Disp_1_1_2B</STRONG> (Thumb, 6264 bytes, Stack size 432 bytes, app_ui.o(i.Disp_1_1_2B))
<BR><BR>[Stack]<UL><LI>Max Depth = 532<LI>Call Chain = Disp_1_1_2B &rArr; DispStringM &rArr; DispArray
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStringM
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayManager
</UL>

<P><STRONG><a name="[138]"></a>Disp_1_1_2C</STRONG> (Thumb, 6280 bytes, Stack size 432 bytes, app_ui.o(i.Disp_1_1_2C))
<BR><BR>[Stack]<UL><LI>Max Depth = 532<LI>Call Chain = Disp_1_1_2C &rArr; DispStringM &rArr; DispArray
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStringM
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayManager
</UL>

<P><STRONG><a name="[139]"></a>Disp_1_1_2_1</STRONG> (Thumb, 1736 bytes, Stack size 240 bytes, app_ui.o(i.Disp_1_1_2_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = Disp_1_1_2_1 &rArr; Disp_1_X_UserFilter &rArr; GUI_Rectangle_Dev &rArr; GUI_Line &rArr; GUI_Point
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetUser_Num
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_1_X_UserFilter
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Integer
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStringM
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayManager
</UL>

<P><STRONG><a name="[13d]"></a>Disp_1_1_3</STRONG> (Thumb, 702 bytes, Stack size 168 bytes, app_ui.o(i.Disp_1_1_3))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = Disp_1_1_3 &rArr; DispStringM &rArr; DispArray
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Integer
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStringM
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayManager
</UL>

<P><STRONG><a name="[13e]"></a>Disp_1_1_4A</STRONG> (Thumb, 498 bytes, Stack size 56 bytes, app_ui.o(i.Disp_1_1_4A))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = Disp_1_1_4A &rArr; DispStringM &rArr; DispArray
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStringM
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayManager
</UL>

<P><STRONG><a name="[13f]"></a>Disp_1_1_4B</STRONG> (Thumb, 1456 bytes, Stack size 136 bytes, app_ui.o(i.Disp_1_1_4B))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = Disp_1_1_4B &rArr; DispStringM &rArr; DispArray
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStringM
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayManager
</UL>

<P><STRONG><a name="[140]"></a>Disp_1_1_5A</STRONG> (Thumb, 248 bytes, Stack size 152 bytes, app_ui.o(i.Disp_1_1_5A))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = Disp_1_1_5A &rArr; DispStringM &rArr; DispArray
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Integer
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStringM
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayManager
</UL>

<P><STRONG><a name="[141]"></a>Disp_1_2</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, app_ui.o(i.Disp_1_2))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = Disp_1_2 &rArr; DispStringM &rArr; DispArray
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStringM
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayManager
</UL>

<P><STRONG><a name="[142]"></a>Disp_1_2_1</STRONG> (Thumb, 1938 bytes, Stack size 192 bytes, app_ui.o(i.Disp_1_2_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = Disp_1_2_1 &rArr; Disp_1_X_UserFilter &rArr; GUI_Rectangle_Dev &rArr; GUI_Line &rArr; GUI_Point
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDeviceNum
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_1_X_UserFilter
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStringM
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayManager
</UL>

<P><STRONG><a name="[144]"></a>Disp_1_2_2</STRONG> (Thumb, 3098 bytes, Stack size 240 bytes, app_ui.o(i.Disp_1_2_2))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = Disp_1_2_2 &rArr; Disp_1_X_UserFilter &rArr; GUI_Rectangle_Dev &rArr; GUI_Line &rArr; GUI_Point
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDeviceNum
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_1_X_UserFilter
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStringM
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayManager
</UL>

<P><STRONG><a name="[145]"></a>Disp_1_2_3</STRONG> (Thumb, 3464 bytes, Stack size 272 bytes, app_ui.o(i.Disp_1_2_3))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = Disp_1_2_3 &rArr; Disp_1_X_UserFilter &rArr; GUI_Rectangle_Dev &rArr; GUI_Line &rArr; GUI_Point
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDeviceNum
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_1_X_UserFilter
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStringM
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayManager
</UL>

<P><STRONG><a name="[146]"></a>Disp_1_3</STRONG> (Thumb, 208 bytes, Stack size 40 bytes, app_ui.o(i.Disp_1_3))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = Disp_1_3 &rArr; DispStringM &rArr; DispArray
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStringM
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayManager
</UL>

<P><STRONG><a name="[147]"></a>Disp_1_3PassWord</STRONG> (Thumb, 354 bytes, Stack size 56 bytes, app_ui.o(i.Disp_1_3PassWord))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = Disp_1_3PassWord &rArr; Disp_1_3_PasswordError &rArr; GUI_Rectangle_Dev &rArr; GUI_Line &rArr; GUI_Point
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_1_3_PasswordError
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStringM
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayManager
</UL>

<P><STRONG><a name="[149]"></a>Disp_1_3_1</STRONG> (Thumb, 1190 bytes, Stack size 176 bytes, app_ui.o(i.Disp_1_3_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = Disp_1_3_1 &rArr; Disp_1_3_DataSaveFlag &rArr; GUI_Rectangle_Dev &rArr; GUI_Line &rArr; GUI_Point
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_1_3_DataSaveFlag
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStringM
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayManager
</UL>

<P><STRONG><a name="[14b]"></a>Disp_1_3_4</STRONG> (Thumb, 2374 bytes, Stack size 272 bytes, app_ui.o(i.Disp_1_3_4))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = Disp_1_3_4 &rArr; Disp_1_3_DataSaveFlag &rArr; GUI_Rectangle_Dev &rArr; GUI_Line &rArr; GUI_Point
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_1_3_DataSaveFlag
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStringM
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayManager
</UL>

<P><STRONG><a name="[14c]"></a>Disp_1_3_5</STRONG> (Thumb, 608 bytes, Stack size 88 bytes, app_ui.o(i.Disp_1_3_5))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = Disp_1_3_5 &rArr; Disp_1_3_PasswordError &rArr; GUI_Rectangle_Dev &rArr; GUI_Line &rArr; GUI_Point
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_1_3_PasswordError
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStringM
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayManager
</UL>

<P><STRONG><a name="[14d]"></a>Disp_1_3_6</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, app_ui.o(i.Disp_1_3_6))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = Disp_1_3_6 &rArr; Disp_1_3_DataSaveFlag &rArr; GUI_Rectangle_Dev &rArr; GUI_Line &rArr; GUI_Point
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_1_3_DataSaveFlag
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStringM
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayManager
</UL>

<P><STRONG><a name="[14e]"></a>Disp_1_3_7</STRONG> (Thumb, 560 bytes, Stack size 96 bytes, app_ui.o(i.Disp_1_3_7))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = Disp_1_3_7 &rArr; DispStringM &rArr; DispArray
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStringM
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayManager
</UL>

<P><STRONG><a name="[14a]"></a>Disp_1_3_DataSaveFlag</STRONG> (Thumb, 356 bytes, Stack size 16 bytes, app_ui.o(i.Disp_1_3_DataSaveFlag))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = Disp_1_3_DataSaveFlag &rArr; GUI_Rectangle_Dev &rArr; GUI_Line &rArr; GUI_Point
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Rectangle_Dev
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fill_VisionBUF
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStringM
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_1_3_6
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_1_3_4
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_1_3_1
</UL>

<P><STRONG><a name="[148]"></a>Disp_1_3_PasswordError</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, app_ui.o(i.Disp_1_3_PasswordError))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = Disp_1_3_PasswordError &rArr; GUI_Rectangle_Dev &rArr; GUI_Line &rArr; GUI_Point
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Rectangle_Dev
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fill_VisionBUF
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStringM
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_1_3_5
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_1_3PassWord
</UL>

<P><STRONG><a name="[151]"></a>Disp_1_4</STRONG> (Thumb, 380 bytes, Stack size 48 bytes, app_ui.o(i.Disp_1_4))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = Disp_1_4 &rArr; DispStringM &rArr; DispArray
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStringM
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayManager
</UL>

<P><STRONG><a name="[152]"></a>Disp_1_4_1</STRONG> (Thumb, 2388 bytes, Stack size 168 bytes, app_ui.o(i.Disp_1_4_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = Disp_1_4_1 &rArr; DispStringM &rArr; DispArray
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStringM
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayManager
</UL>

<P><STRONG><a name="[13c]"></a>Disp_1_X_UserFilter</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, app_ui.o(i.Disp_1_X_UserFilter))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = Disp_1_X_UserFilter &rArr; GUI_Rectangle_Dev &rArr; GUI_Line &rArr; GUI_Point
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Rectangle_Dev
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fill_VisionBUF
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStringM
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_1_2_3
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_1_2_2
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_1_2_1
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_1_1_2_1
</UL>

<P><STRONG><a name="[13b]"></a>Disp_Integer</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, uc1698.o(i.Disp_Integer))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Disp_Integer &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Open
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_1_1_5A
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_1_1_3
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_1_1_2_1
</UL>

<P><STRONG><a name="[153]"></a>Disp_Open</STRONG> (Thumb, 362 bytes, Stack size 64 bytes, app_ui.o(i.Disp_Open))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = Disp_Open &rArr; DispStringM &rArr; DispArray
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Refresh_Screen
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_VisionBUF
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Integer
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStringM
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayManager
</UL>

<P><STRONG><a name="[156]"></a>DisplayManager</STRONG> (Thumb, 460 bytes, Stack size 8 bytes, app_ui.o(i.DisplayManager))
<BR><BR>[Stack]<UL><LI>Max Depth = 540<LI>Call Chain = DisplayManager &rArr; Disp_1_1_2C &rArr; DispStringM &rArr; DispArray
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_VisionBUF
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Open
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_1_4_1
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_1_4
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_1_3_7
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_1_3_6
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_1_3_5
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_1_3_4
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_1_3_1
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_1_3PassWord
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_1_3
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_1_2_3
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_1_2_2
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_1_2_1
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_1_2
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_1_1_5A
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_1_1_4B
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_1_1_4A
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_1_1_3
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_1_1_2_1
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_1_1_2C
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_1_1_2B
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_1_1_2A
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_1_1_1B
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_1_1_1A
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_1_1
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_1
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task04_F
</UL>

<P><STRONG><a name="[157]"></a>FATFS_LinkDriver</STRONG> (Thumb, 18 bytes, Stack size 12 bytes, ff_gen_drv.o(i.FATFS_LinkDriver))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = FATFS_LinkDriver &rArr; FATFS_LinkDriverEx
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FATFS_LinkDriverEx
</UL>
<BR>[Called By]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_FATFS_Init
</UL>

<P><STRONG><a name="[158]"></a>FATFS_LinkDriverEx</STRONG> (Thumb, 78 bytes, Stack size 20 bytes, ff_gen_drv.o(i.FATFS_LinkDriverEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = FATFS_LinkDriverEx
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FATFS_LinkDriver
</UL>

<P><STRONG><a name="[159]"></a>FRAM_Init</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, fram.o(i.FRAM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = FRAM_Init &rArr; fram_SysInit &rArr; osMutexCreate &rArr; xQueueCreateMutex &rArr; prvInitialiseMutex &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fram_SysInit
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[15c]"></a>FRAM_Read</STRONG> (Thumb, 38 bytes, Stack size 32 bytes, fram.o(i.FRAM_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = FRAM_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadData_FRAM_UnSafe
</UL>

<P><STRONG><a name="[15e]"></a>FRAM_Write</STRONG> (Thumb, 58 bytes, Stack size 32 bytes, fram.o(i.FRAM_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = FRAM_Write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteData_FRAM_UnSafe
</UL>

<P><STRONG><a name="[17f]"></a>FY1000_Pack_0X01</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, fy1000pro.o(i.FY1000_Pack_0X01))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FY1000_Pack_0X01
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY1000_Pack_Rx_S
</UL>

<P><STRONG><a name="[160]"></a>FY1000_Pack_0X02_A1</STRONG> (Thumb, 224 bytes, Stack size 16 bytes, fy1000pro.o(i.FY1000_Pack_0X02_A1))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = FY1000_Pack_0X02_A1 &rArr; SUMCheck_Input
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUMCheck_Input
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY1000_Pack_TxServer_S
</UL>

<P><STRONG><a name="[161]"></a>FY1000_Pack_0X02_A2</STRONG> (Thumb, 224 bytes, Stack size 16 bytes, fy1000pro.o(i.FY1000_Pack_0X02_A2))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = FY1000_Pack_0X02_A2 &rArr; SUMCheck_Input
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUMCheck_Input
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY1000_Pack_TxServer_S
</UL>

<P><STRONG><a name="[162]"></a>FY1000_Pack_0X02_A3</STRONG> (Thumb, 180 bytes, Stack size 16 bytes, fy1000pro.o(i.FY1000_Pack_0X02_A3))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = FY1000_Pack_0X02_A3 &rArr; SUMCheck_Input
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUMCheck_Input
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY1000_Pack_TxServer_S
</UL>

<P><STRONG><a name="[163]"></a>FY1000_Pack_0X02_A4</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, fy1000pro.o(i.FY1000_Pack_0X02_A4))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = FY1000_Pack_0X02_A4 &rArr; SUMCheck_Input
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUMCheck_Input
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY1000_Pack_TxServer_S
</UL>

<P><STRONG><a name="[164]"></a>FY1000_Pack_0X02_A5</STRONG> (Thumb, 224 bytes, Stack size 16 bytes, fy1000pro.o(i.FY1000_Pack_0X02_A5))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = FY1000_Pack_0X02_A5 &rArr; SUMCheck_Input
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUMCheck_Input
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY1000_Pack_TxServer_S
</UL>

<P><STRONG><a name="[165]"></a>FY1000_Pack_0X02_F</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, fy1000pro.o(i.FY1000_Pack_0X02_F))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = FY1000_Pack_0X02_F &rArr; SUMCheck_Input
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUMCheck_Input
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY1000_Pack_TxServer_S
</UL>

<P><STRONG><a name="[166]"></a>FY1000_Pack_0X02_N</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, fy1000pro.o(i.FY1000_Pack_0X02_N))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = FY1000_Pack_0X02_N &rArr; SUMCheck_Input
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUMCheck_Input
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY1000_Pack_TxServer_S
</UL>

<P><STRONG><a name="[187]"></a>FY1000_Pack_0X03</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, fy1000pro.o(i.FY1000_Pack_0X03))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FY1000_Pack_0X03
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY1000_Pack_Rx_S
</UL>

<P><STRONG><a name="[167]"></a>FY1000_Pack_0X04</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, fy1000pro.o(i.FY1000_Pack_0X04))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = FY1000_Pack_0X04 &rArr; SUMCheck_Input
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUMCheck_Input
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY1000_Pack_TxServer_S
</UL>

<P><STRONG><a name="[189]"></a>FY1000_Pack_0X05</STRONG> (Thumb, 134 bytes, Stack size 8 bytes, fy1000pro.o(i.FY1000_Pack_0X05))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FY1000_Pack_0X05
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY1000_Pack_Rx_S
</UL>

<P><STRONG><a name="[168]"></a>FY1000_Pack_0X06</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, fy1000pro.o(i.FY1000_Pack_0X06))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = FY1000_Pack_0X06 &rArr; SUMCheck_Input
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUMCheck_Input
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY1000_Pack_TxServer_S
</UL>

<P><STRONG><a name="[18a]"></a>FY1000_Pack_0X07</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, fy1000pro.o(i.FY1000_Pack_0X07))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FY1000_Pack_0X07
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY1000_Pack_Rx_S
</UL>

<P><STRONG><a name="[169]"></a>FY1000_Pack_0X08</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, fy1000pro.o(i.FY1000_Pack_0X08))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = FY1000_Pack_0X08 &rArr; SUMCheck_Input
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUMCheck_Input
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY1000_Pack_TxServer_S
</UL>

<P><STRONG><a name="[18c]"></a>FY1000_Pack_0X09</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, fy1000pro.o(i.FY1000_Pack_0X09))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FY1000_Pack_0X09
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY1000_Pack_Rx_S
</UL>

<P><STRONG><a name="[16a]"></a>FY1000_Pack_0X0A</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, fy1000pro.o(i.FY1000_Pack_0X0A))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = FY1000_Pack_0X0A &rArr; SUMCheck_Input
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUMCheck_Input
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY1000_Pack_TxServer_S
</UL>

<P><STRONG><a name="[18d]"></a>FY1000_Pack_0X0B</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, fy1000pro.o(i.FY1000_Pack_0X0B))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FY1000_Pack_0X0B
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY1000_Pack_Rx_S
</UL>

<P><STRONG><a name="[16b]"></a>FY1000_Pack_0X0C</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, fy1000pro.o(i.FY1000_Pack_0X0C))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = FY1000_Pack_0X0C &rArr; SUMCheck_Input
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUMCheck_Input
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY1000_Pack_TxServer_S
</UL>

<P><STRONG><a name="[18e]"></a>FY1000_Pack_0X0D</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, fy1000pro.o(i.FY1000_Pack_0X0D))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FY1000_Pack_0X0D
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY1000_Pack_Rx_S
</UL>

<P><STRONG><a name="[16c]"></a>FY1000_Pack_0X0E</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, fy1000pro.o(i.FY1000_Pack_0X0E))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = FY1000_Pack_0X0E &rArr; SUMCheck_Input
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUMCheck_Input
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY1000_Pack_TxServer_S
</UL>

<P><STRONG><a name="[16d]"></a>FY1000_Pack_0X11</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, fy1000pro.o(i.FY1000_Pack_0X11))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = FY1000_Pack_0X11 &rArr; SUMCheck_Input
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUMCheck_Input
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY1000_Pack_TxServer_S
</UL>

<P><STRONG><a name="[18f]"></a>FY1000_Pack_0X12</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, fy1000pro.o(i.FY1000_Pack_0X12))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FY1000_Pack_0X12
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY1000_Pack_Rx_S
</UL>

<P><STRONG><a name="[191]"></a>FY1000_Pack_0X13</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, fy1000pro.o(i.FY1000_Pack_0X13))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FY1000_Pack_0X13
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY1000_Pack_Rx_S
</UL>

<P><STRONG><a name="[16e]"></a>FY1000_Pack_0X14</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, fy1000pro.o(i.FY1000_Pack_0X14))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = FY1000_Pack_0X14 &rArr; SUMCheck_Input
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUMCheck_Input
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY1000_Pack_TxServer_S
</UL>

<P><STRONG><a name="[193]"></a>FY1000_Pack_0X15</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, fy1000pro.o(i.FY1000_Pack_0X15))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FY1000_Pack_0X15
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY1000_Pack_Rx_S
</UL>

<P><STRONG><a name="[16f]"></a>FY1000_Pack_0X16</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, fy1000pro.o(i.FY1000_Pack_0X16))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = FY1000_Pack_0X16 &rArr; SUMCheck_Input
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUMCheck_Input
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY1000_Pack_TxServer_S
</UL>

<P><STRONG><a name="[196]"></a>FY1000_Pack_0X17</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, fy1000pro.o(i.FY1000_Pack_0X17))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FY1000_Pack_0X17
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY1000_Pack_Rx_S
</UL>

<P><STRONG><a name="[170]"></a>FY1000_Pack_0X18</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, fy1000pro.o(i.FY1000_Pack_0X18))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = FY1000_Pack_0X18 &rArr; SUMCheck_Input
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUMCheck_Input
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY1000_Pack_TxServer_S
</UL>

<P><STRONG><a name="[197]"></a>FY1000_Pack_0X19</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, fy1000pro.o(i.FY1000_Pack_0X19))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FY1000_Pack_0X19
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY1000_Pack_Rx_S
</UL>

<P><STRONG><a name="[171]"></a>FY1000_Pack_0X1A</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, fy1000pro.o(i.FY1000_Pack_0X1A))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = FY1000_Pack_0X1A &rArr; SUMCheck_Input
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUMCheck_Input
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY1000_Pack_TxServer_S
</UL>

<P><STRONG><a name="[172]"></a>FY1000_Pack_0X40</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, fy1000pro.o(i.FY1000_Pack_0X40))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = FY1000_Pack_0X40 &rArr; SUMCheck_Input
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUMCheck_Input
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY1000_Pack_TxServer_S
</UL>

<P><STRONG><a name="[198]"></a>FY1000_Pack_0X41</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fy1000pro.o(i.FY1000_Pack_0X41))
<BR><BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY1000_Pack_Rx_S
</UL>

<P><STRONG><a name="[199]"></a>FY1000_Pack_0X43</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fy1000pro.o(i.FY1000_Pack_0X43))
<BR><BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY1000_Pack_Rx_S
</UL>

<P><STRONG><a name="[173]"></a>FY1000_Pack_0XB0_A1</STRONG> (Thumb, 224 bytes, Stack size 16 bytes, fy1000pro.o(i.FY1000_Pack_0XB0_A1))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = FY1000_Pack_0XB0_A1 &rArr; SUMCheck_Input
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUMCheck_Input
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY1000_Pack_TxServer_S
</UL>

<P><STRONG><a name="[174]"></a>FY1000_Pack_0XB0_A2</STRONG> (Thumb, 224 bytes, Stack size 16 bytes, fy1000pro.o(i.FY1000_Pack_0XB0_A2))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = FY1000_Pack_0XB0_A2 &rArr; SUMCheck_Input
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUMCheck_Input
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY1000_Pack_TxServer_S
</UL>

<P><STRONG><a name="[175]"></a>FY1000_Pack_0XB0_A3</STRONG> (Thumb, 180 bytes, Stack size 16 bytes, fy1000pro.o(i.FY1000_Pack_0XB0_A3))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = FY1000_Pack_0XB0_A3 &rArr; SUMCheck_Input
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUMCheck_Input
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY1000_Pack_TxServer_S
</UL>

<P><STRONG><a name="[176]"></a>FY1000_Pack_0XB0_A4</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, fy1000pro.o(i.FY1000_Pack_0XB0_A4))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = FY1000_Pack_0XB0_A4 &rArr; SUMCheck_Input
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUMCheck_Input
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY1000_Pack_TxServer_S
</UL>

<P><STRONG><a name="[177]"></a>FY1000_Pack_0XB0_A5</STRONG> (Thumb, 224 bytes, Stack size 16 bytes, fy1000pro.o(i.FY1000_Pack_0XB0_A5))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = FY1000_Pack_0XB0_A5 &rArr; SUMCheck_Input
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUMCheck_Input
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY1000_Pack_TxServer_S
</UL>

<P><STRONG><a name="[178]"></a>FY1000_Pack_0XB0_F</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, fy1000pro.o(i.FY1000_Pack_0XB0_F))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = FY1000_Pack_0XB0_F &rArr; SUMCheck_Input
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUMCheck_Input
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY1000_Pack_TxServer_S
</UL>

<P><STRONG><a name="[19a]"></a>FY1000_Pack_0XBA</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, fy1000pro.o(i.FY1000_Pack_0XBA))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FY1000_Pack_0XBA
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY1000_Pack_Rx_S
</UL>

<P><STRONG><a name="[1a1]"></a>FY1000_Pack_0XBB</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, fy1000pro.o(i.FY1000_Pack_0XBB))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FY1000_Pack_0XBB
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY1000_Pack_Rx_S
</UL>

<P><STRONG><a name="[179]"></a>FY1000_Pack_0XBC</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, fy1000pro.o(i.FY1000_Pack_0XBC))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = FY1000_Pack_0XBC &rArr; SUMCheck_Input
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUMCheck_Input
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY1000_Pack_TxServer_S
</UL>

<P><STRONG><a name="[1a2]"></a>FY1000_Pack_0XBD</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, fy1000pro.o(i.FY1000_Pack_0XBD))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FY1000_Pack_0XBD
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY1000_Pack_Rx_S
</UL>

<P><STRONG><a name="[17a]"></a>FY1000_Pack_0XBE</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, fy1000pro.o(i.FY1000_Pack_0XBE))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = FY1000_Pack_0XBE &rArr; SUMCheck_Input
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUMCheck_Input
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY1000_Pack_TxServer_S
</UL>

<P><STRONG><a name="[17b]"></a>FY1000_Pack_0XBF</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, fy1000pro.o(i.FY1000_Pack_0XBF))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = FY1000_Pack_0XBF &rArr; SUMCheck_Input
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUMCheck_Input
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY1000_Pack_TxServer_S
</UL>

<P><STRONG><a name="[17c]"></a>FY1000_Pack_0XFE</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, fy1000pro.o(i.FY1000_Pack_0XFE))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = FY1000_Pack_0XFE &rArr; SUMCheck_Input
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUMCheck_Input
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY1000_Pack_TxServer_S
</UL>

<P><STRONG><a name="[1a6]"></a>FY1000_Pack_0XFF</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, fy1000pro.o(i.FY1000_Pack_0XFF))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FY1000_Pack_0XFF
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY1000_Pack_Rx_S
</UL>

<P><STRONG><a name="[17d]"></a>FY1000_Pack_RxAnalyze_S</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, fy1000pro.o(i.FY1000_Pack_RxAnalyze_S))
<BR><BR>[Stack]<UL><LI>Max Depth = 896<LI>Call Chain = FY1000_Pack_RxAnalyze_S &rArr; FY1000_Pack_Rx_S &rArr; verifyProcessFile &rArr; calMd5_hash_SPI &rArr; MD5_Finish &rArr; crl_u_MD5_Finish &rArr; crl_u_MD5_Update &rArr; md5_process &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUMCheck_Check
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY1000_Pack_Rx_S
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY1000_Pack_RxServer_S
</UL>

<P><STRONG><a name="[7c]"></a>FY1000_Pack_RxServer_S</STRONG> (Thumb, 492 bytes, Stack size 24 bytes, fy1000pro.o(i.FY1000_Pack_RxServer_S))
<BR><BR>[Stack]<UL><LI>Max Depth = 920<LI>Call Chain = FY1000_Pack_RxServer_S &rArr; FY1000_Pack_RxAnalyze_S &rArr; FY1000_Pack_Rx_S &rArr; verifyProcessFile &rArr; calMd5_hash_SPI &rArr; MD5_Finish &rArr; crl_u_MD5_Finish &rArr; crl_u_MD5_Update &rArr; md5_process &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY1000_Pack_RxAnalyze_S
</UL>
<BR>[Address Reference Count : 1]<UL><LI> com_server.o(i.UART_TO_FY1000_CCB_Init_S)
</UL>
<P><STRONG><a name="[17e]"></a>FY1000_Pack_Rx_S</STRONG> (Thumb, 21028 bytes, Stack size 240 bytes, fy1000pro.o(i.FY1000_Pack_Rx_S))
<BR><BR>[Stack]<UL><LI>Max Depth = 872<LI>Call Chain = FY1000_Pack_Rx_S &rArr; verifyProcessFile &rArr; calMd5_hash_SPI &rArr; MD5_Finish &rArr; crl_u_MD5_Finish &rArr; crl_u_MD5_Update &rArr; md5_process &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getRealTime
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XY_188Send_Code_QInput
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserData_Save
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysPara_Update
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PulseLeaguer_SET
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerRelay_SET
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NWK_Send_Code_QInput
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HZCRL_188Send_Code_QInput
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT2X_188Send_Code_QInput
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY_2000Send_Code_QInput
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY_188Send_Code_QInput
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY_1000Send_Code_QInput
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDF2_Send_Code_QInput
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BRC_188Send_Code_QInput
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexWait
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelSysTick
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verifyProcessFile
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpRevEvent
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiFlashWrite
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiFlashRead
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiFlashErase
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTimeTick
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_file_type
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCF8563_Set
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC16Cal
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY1000_Pack_0XFF
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY1000_Pack_0XBD
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY1000_Pack_0XBB
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY1000_Pack_0XBA
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY1000_Pack_0X43
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY1000_Pack_0X41
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY1000_Pack_0X19
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY1000_Pack_0X17
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY1000_Pack_0X15
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY1000_Pack_0X13
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY1000_Pack_0X12
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY1000_Pack_0X0D
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY1000_Pack_0X0B
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY1000_Pack_0X09
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY1000_Pack_0X07
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY1000_Pack_0X05
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY1000_Pack_0X03
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY1000_Pack_0X01
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysDevData_Save
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMeters_Num_Build
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMeters_Num
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strrchr
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY1000_Pack_RxAnalyze_S
</UL>

<P><STRONG><a name="[1a7]"></a>FY1000_Pack_TxServer_S</STRONG> (Thumb, 3030 bytes, Stack size 24 bytes, fy1000pro.o(i.FY1000_Pack_TxServer_S))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = FY1000_Pack_TxServer_S &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexWait
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelSysTick
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY1000_Pack_0XFE
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY1000_Pack_0XBF
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY1000_Pack_0XBE
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY1000_Pack_0XBC
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY1000_Pack_0XB0_F
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY1000_Pack_0XB0_A5
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY1000_Pack_0XB0_A4
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY1000_Pack_0XB0_A3
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY1000_Pack_0XB0_A2
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY1000_Pack_0XB0_A1
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY1000_Pack_0X40
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY1000_Pack_0X1A
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY1000_Pack_0X18
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY1000_Pack_0X16
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY1000_Pack_0X14
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY1000_Pack_0X11
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY1000_Pack_0X0E
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY1000_Pack_0X0C
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY1000_Pack_0X0A
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY1000_Pack_0X08
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY1000_Pack_0X06
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY1000_Pack_0X04
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY1000_Pack_0X02_N
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY1000_Pack_0X02_F
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY1000_Pack_0X02_A5
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY1000_Pack_0X02_A4
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY1000_Pack_0X02_A3
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY1000_Pack_0X02_A2
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY1000_Pack_0X02_A1
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strrchr
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task07_F
</UL>

<P><STRONG><a name="[1a8]"></a>FY188_Pack_0X01_S</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, fy188pro.o(i.FY188_Pack_0X01_S))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = FY188_Pack_0X01_S &rArr; SUMCheck_Input
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUMCheck_Input
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY188_Pack_TxServer_S
</UL>

<P><STRONG><a name="[1a9]"></a>FY188_Pack_0X04_S</STRONG> (Thumb, 186 bytes, Stack size 24 bytes, fy188pro.o(i.FY188_Pack_0X04_S))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = FY188_Pack_0X04_S &rArr; PCF8563_Read &rArr; PCF8563_Read_DEV &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCF8563_Read
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUMCheck_Input
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HexToBcd2
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HexToBcd
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY188_Pack_TxServer_S
</UL>

<P><STRONG><a name="[1af]"></a>FY188_Pack_0X129_S</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, fy188pro.o(i.FY188_Pack_0X129_S))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FY188_Pack_0X129_S
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY188_Pack_Rx_S
</UL>

<P><STRONG><a name="[1ad]"></a>FY188_Pack_RxAnalyze_S</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, fy188pro.o(i.FY188_Pack_RxAnalyze_S))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = FY188_Pack_RxAnalyze_S &rArr; FY188_Pack_Rx_S &rArr; SysDevData_Save &rArr; SysDevData_Update &rArr; WriteData_FRAM &rArr; WriteData_FRAM_UnSafe &rArr; ReadData_FRAM_UnSafe &rArr; FRAM_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUMCheck_Check
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY188_Pack_Rx_S
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY188_Pack_RxServer_S
</UL>

<P><STRONG><a name="[7e]"></a>FY188_Pack_RxServer_S</STRONG> (Thumb, 484 bytes, Stack size 24 bytes, fy188pro.o(i.FY188_Pack_RxServer_S))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = FY188_Pack_RxServer_S &rArr; FY188_Pack_RxAnalyze_S &rArr; FY188_Pack_Rx_S &rArr; SysDevData_Save &rArr; SysDevData_Update &rArr; WriteData_FRAM &rArr; WriteData_FRAM_UnSafe &rArr; ReadData_FRAM_UnSafe &rArr; FRAM_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY188_Pack_RxAnalyze_S
</UL>
<BR>[Address Reference Count : 1]<UL><LI> com_server.o(i.UART_TO_FY188_CCB_Init_S)
</UL>
<P><STRONG><a name="[1ae]"></a>FY188_Pack_Rx_S</STRONG> (Thumb, 3190 bytes, Stack size 168 bytes, fy188pro.o(i.FY188_Pack_Rx_S))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = FY188_Pack_Rx_S &rArr; SysDevData_Save &rArr; SysDevData_Update &rArr; WriteData_FRAM &rArr; WriteData_FRAM_UnSafe &rArr; ReadData_FRAM_UnSafe &rArr; FRAM_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserData_Save
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY_1000Send_Code_QInput
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexWait
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelSysTick
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysDevData_Save
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetUser_Num
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BcdToHex4
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BcdToHex2
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BcdToHex
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY188_Pack_0X129_S
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strrchr
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY188_Pack_RxAnalyze_S
</UL>

<P><STRONG><a name="[1b0]"></a>FY188_Pack_TxServer_S</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, fy188pro.o(i.FY188_Pack_TxServer_S))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = FY188_Pack_TxServer_S &rArr; FY188_Pack_0X04_S &rArr; PCF8563_Read &rArr; PCF8563_Read_DEV &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY188_Pack_0X04_S
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY188_Pack_0X01_S
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task07_F
</UL>

<P><STRONG><a name="[1bc]"></a>FY2000_Pack_128</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fy2000pro.o(i.FY2000_Pack_128))
<BR><BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY2000_Pack_Rx_S
</UL>

<P><STRONG><a name="[1bd]"></a>FY2000_Pack_129</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, fy2000pro.o(i.FY2000_Pack_129))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FY2000_Pack_129
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY2000_Pack_Rx_S
</UL>

<P><STRONG><a name="[1be]"></a>FY2000_Pack_131</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, fy2000pro.o(i.FY2000_Pack_131))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FY2000_Pack_131
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY2000_Pack_Rx_S
</UL>

<P><STRONG><a name="[1bf]"></a>FY2000_Pack_132</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, fy2000pro.o(i.FY2000_Pack_132))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FY2000_Pack_132
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY2000_Pack_Rx_S
</UL>

<P><STRONG><a name="[1c0]"></a>FY2000_Pack_133</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, fy2000pro.o(i.FY2000_Pack_133))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FY2000_Pack_133
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY2000_Pack_Rx_S
</UL>

<P><STRONG><a name="[1b1]"></a>FY2000_Pack_50</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, fy2000pro.o(i.FY2000_Pack_50))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = FY2000_Pack_50 &rArr; PCF8563_Read &rArr; PCF8563_Read_DEV &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCF8563_Read
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUMCheck_Input
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY2000_Pack_TxServer_S
</UL>

<P><STRONG><a name="[1b2]"></a>FY2000_Pack_51</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, fy2000pro.o(i.FY2000_Pack_51))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = FY2000_Pack_51 &rArr; SUMCheck_Input
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUMCheck_Input
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY2000_Pack_TxServer_S
</UL>

<P><STRONG><a name="[1b3]"></a>FY2000_Pack_52</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, fy2000pro.o(i.FY2000_Pack_52))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = FY2000_Pack_52 &rArr; SUMCheck_Input
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUMCheck_Input
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY2000_Pack_TxServer_S
</UL>

<P><STRONG><a name="[1b4]"></a>FY2000_Pack_53</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, fy2000pro.o(i.FY2000_Pack_53))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = FY2000_Pack_53 &rArr; SUMCheck_Input
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUMCheck_Input
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY2000_Pack_TxServer_S
</UL>

<P><STRONG><a name="[1b5]"></a>FY2000_Pack_54</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, fy2000pro.o(i.FY2000_Pack_54))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = FY2000_Pack_54 &rArr; SUMCheck_Input
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUMCheck_Input
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY2000_Pack_TxServer_S
</UL>

<P><STRONG><a name="[1b6]"></a>FY2000_Pack_55</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, fy2000pro.o(i.FY2000_Pack_55))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = FY2000_Pack_55 &rArr; PCF8563_Read &rArr; PCF8563_Read_DEV &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCF8563_Read
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUMCheck_Input
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY2000_Pack_TxServer_S
</UL>

<P><STRONG><a name="[1b7]"></a>FY2000_Pack_59</STRONG> (Thumb, 352 bytes, Stack size 16 bytes, fy2000pro.o(i.FY2000_Pack_59))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = FY2000_Pack_59 &rArr; SUMCheck_Input
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUMCheck_Input
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY2000_Pack_TxServer_S
</UL>

<P><STRONG><a name="[1b8]"></a>FY2000_Pack_60</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, fy2000pro.o(i.FY2000_Pack_60))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = FY2000_Pack_60 &rArr; PCF8563_Read &rArr; PCF8563_Read_DEV &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCF8563_Read
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUMCheck_Input
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY2000_Pack_TxServer_S
</UL>

<P><STRONG><a name="[1b9]"></a>FY2000_Pack_61</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, fy2000pro.o(i.FY2000_Pack_61))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = FY2000_Pack_61 &rArr; SUMCheck_Input
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUMCheck_Input
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY2000_Pack_TxServer_S
</UL>

<P><STRONG><a name="[1ba]"></a>FY2000_Pack_RxAnalyze_S</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, fy2000pro.o(i.FY2000_Pack_RxAnalyze_S))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = FY2000_Pack_RxAnalyze_S &rArr; FY2000_Pack_Rx_S &rArr; SysDevData_Save &rArr; SysDevData_Update &rArr; WriteData_FRAM &rArr; WriteData_FRAM_UnSafe &rArr; ReadData_FRAM_UnSafe &rArr; FRAM_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUMCheck_Check
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY2000_Pack_Rx_S
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY2000_Pack_RxServer_S
</UL>

<P><STRONG><a name="[7f]"></a>FY2000_Pack_RxServer_S</STRONG> (Thumb, 512 bytes, Stack size 24 bytes, fy2000pro.o(i.FY2000_Pack_RxServer_S))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = FY2000_Pack_RxServer_S &rArr; FY2000_Pack_RxAnalyze_S &rArr; FY2000_Pack_Rx_S &rArr; SysDevData_Save &rArr; SysDevData_Update &rArr; WriteData_FRAM &rArr; WriteData_FRAM_UnSafe &rArr; ReadData_FRAM_UnSafe &rArr; FRAM_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY2000_Pack_RxAnalyze_S
</UL>
<BR>[Address Reference Count : 1]<UL><LI> com_server.o(i.UART_TO_FY2000_CCB_Init_S)
</UL>
<P><STRONG><a name="[1bb]"></a>FY2000_Pack_Rx_S</STRONG> (Thumb, 2528 bytes, Stack size 144 bytes, fy2000pro.o(i.FY2000_Pack_Rx_S))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = FY2000_Pack_Rx_S &rArr; SysDevData_Save &rArr; SysDevData_Update &rArr; WriteData_FRAM &rArr; WriteData_FRAM_UnSafe &rArr; ReadData_FRAM_UnSafe &rArr; FRAM_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserData_Save
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY_1000Send_Code_QInput
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexWait
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelSysTick
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysDevData_Save
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetUser_Num
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY2000_Pack_133
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY2000_Pack_132
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY2000_Pack_131
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY2000_Pack_129
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY2000_Pack_128
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strrchr
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY2000_Pack_RxAnalyze_S
</UL>

<P><STRONG><a name="[1c1]"></a>FY2000_Pack_TxServer_S</STRONG> (Thumb, 184 bytes, Stack size 16 bytes, fy2000pro.o(i.FY2000_Pack_TxServer_S))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = FY2000_Pack_TxServer_S &rArr; FY2000_Pack_60 &rArr; PCF8563_Read &rArr; PCF8563_Read_DEV &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY2000_Pack_61
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY2000_Pack_60
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY2000_Pack_59
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY2000_Pack_55
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY2000_Pack_54
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY2000_Pack_53
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY2000_Pack_52
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY2000_Pack_51
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY2000_Pack_50
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task07_F
</UL>

<P><STRONG><a name="[104]"></a>FY_1000Send_Code_QInput</STRONG> (Thumb, 236 bytes, Stack size 32 bytes, fy1000pro.o(i.FY_1000Send_Code_QInput))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = FY_1000Send_Code_QInput &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexWait
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelSysTick
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TO_FY1000_CCB_QueueSend
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strrchr
</UL>
<BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HbMainTask
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task13_F
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task09_F
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task07_F
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY1000_Pack_Rx_S
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDF2_Pack_Rx_S
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BRC188_Pack_Rx_S
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT2X188_Pack_Rx_S
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XY188_Pack_Rx_S
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HZCRL_Pack_Rx_S
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY2000_Pack_Rx_S
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY188_Pack_Rx_S
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setServerIP
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_1_3_1
</UL>

<P><STRONG><a name="[181]"></a>FY_188Send_Code_QInput</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, clientapp.o(i.FY_188Send_Code_QInput))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = FY_188Send_Code_QInput &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexWait
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClientCH1_QueueSend
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task08_F
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY1000_Pack_Rx_S
</UL>

<P><STRONG><a name="[182]"></a>FY_2000Send_Code_QInput</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, clientapp.o(i.FY_2000Send_Code_QInput))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = FY_2000Send_Code_QInput &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexWait
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClientCH1_QueueSend
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task10_F
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task08_F
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY1000_Pack_Rx_S
</UL>

<P><STRONG><a name="[14f]"></a>Fill_VisionBUF</STRONG> (Thumb, 78 bytes, Stack size 36 bytes, uc1698.o(i.Fill_VisionBUF))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Fill_VisionBUF &rArr; GUI_Point
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Point
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_1_X_UserFilter
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_1_3_PasswordError
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_1_3_DataSaveFlag
</UL>

<P><STRONG><a name="[131]"></a>FindZMStation</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, uc1698.o(i.FindZMStation))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FindZMStation
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStringM
</UL>

<P><STRONG><a name="[2d0]"></a>FreeRTOSRunTimeTicksUp</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_hal_timebase_tim.o(i.FreeRTOSRunTimeTicksUp))
<BR><BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
</UL>

<P><STRONG><a name="[28d]"></a>GPIO_ReadOutputData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, uc1698.o(i.GPIO_ReadOutputData))
<BR><BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutData8
</UL>

<P><STRONG><a name="[28e]"></a>GPIO_Write</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, uc1698.o(i.GPIO_Write))
<BR><BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutData8
</UL>

<P><STRONG><a name="[1c4]"></a>GUI_Line</STRONG> (Thumb, 480 bytes, Stack size 40 bytes, uc1698.o(i.GUI_Line))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = GUI_Line &rArr; GUI_Point
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Point
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Rectangle_Dev
</UL>

<P><STRONG><a name="[1c3]"></a>GUI_Point</STRONG> (Thumb, 170 bytes, Stack size 28 bytes, uc1698.o(i.GUI_Point))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = GUI_Point
</UL>
<BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Line
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fill_VisionBUF
</UL>

<P><STRONG><a name="[150]"></a>GUI_Rectangle_Dev</STRONG> (Thumb, 316 bytes, Stack size 36 bytes, uc1698.o(i.GUI_Rectangle_Dev))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = GUI_Rectangle_Dev &rArr; GUI_Line &rArr; GUI_Point
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Line
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_1_X_UserFilter
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_1_3_PasswordError
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_1_3_DataSaveFlag
</UL>

<P><STRONG><a name="[2d4]"></a>GetDev_ComStatus</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, devpara.o(i.GetDev_ComStatus))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task01_F
</UL>

<P><STRONG><a name="[143]"></a>GetDeviceNum</STRONG> (Thumb, 100 bytes, Stack size 40 bytes, syspara.o(i.GetDeviceNum))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = GetDeviceNum &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_1_2_3
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_1_2_2
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_1_2_1
</UL>

<P><STRONG><a name="[6d]"></a>GetKeyVal_K1</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, keyboardapp.o(i.GetKeyVal_K1))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GetKeyVal_K1
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keyboardapp.o(i.KeyboardApp_Init)
</UL>
<P><STRONG><a name="[6f]"></a>GetKeyVal_K2</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, keyboardapp.o(i.GetKeyVal_K2))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GetKeyVal_K2
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keyboardapp.o(i.KeyboardApp_Init)
</UL>
<P><STRONG><a name="[71]"></a>GetKeyVal_K3</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, keyboardapp.o(i.GetKeyVal_K3))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GetKeyVal_K3
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keyboardapp.o(i.KeyboardApp_Init)
</UL>
<P><STRONG><a name="[73]"></a>GetKeyVal_K4</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, keyboardapp.o(i.GetKeyVal_K4))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GetKeyVal_K4
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keyboardapp.o(i.KeyboardApp_Init)
</UL>
<P><STRONG><a name="[75]"></a>GetKeyVal_K5</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, keyboardapp.o(i.GetKeyVal_K5))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GetKeyVal_K5
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keyboardapp.o(i.KeyboardApp_Init)
</UL>
<P><STRONG><a name="[77]"></a>GetKeyVal_K6</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, keyboardapp.o(i.GetKeyVal_K6))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GetKeyVal_K6
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keyboardapp.o(i.KeyboardApp_Init)
</UL>
<P><STRONG><a name="[180]"></a>GetMeters_Num</STRONG> (Thumb, 62 bytes, Stack size 12 bytes, devpara.o(i.GetMeters_Num))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GetMeters_Num
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY1000_Pack_Rx_S
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ddf2ctrl
</UL>

<P><STRONG><a name="[18b]"></a>GetMeters_Num_Build</STRONG> (Thumb, 60 bytes, Stack size 12 bytes, devpara.o(i.GetMeters_Num_Build))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GetMeters_Num_Build
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY1000_Pack_Rx_S
</UL>

<P><STRONG><a name="[269]"></a>GetMeters_Num_FromUserID</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, devpara.o(i.GetMeters_Num_FromUserID))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GetMeters_Num_FromUserID
</UL>
<BR>[Called By]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_1_1_2_1
</UL>

<P><STRONG><a name="[37f]"></a>GetSystemDevMessage</STRONG> (Thumb, 106 bytes, Stack size 0 bytes, devpara.o(i.GetSystemDevMessage))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[37e]"></a>GetSystemUserNum</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, devpara.o(i.GetSystemUserNum))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[102]"></a>GetUser_Num</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, userpara.o(i.GetUser_Num))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GetUser_Num
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BRC188_Pack_Rx_S
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT2X188_Pack_Rx_S
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XY188_Pack_Rx_S
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY2000_Pack_Rx_S
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY188_Pack_Rx_S
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_1_1_2_1
</UL>

<P><STRONG><a name="[382]"></a>Get_ChipID</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_hal_msp.o(i.Get_ChipID))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2d7]"></a>GetbuildMeterMessage</STRONG> (Thumb, 220 bytes, Stack size 20 bytes, devpara.o(i.GetbuildMeterMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GetbuildMeterMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task04_F
</UL>

<P><STRONG><a name="[341]"></a>Getdevice_Num</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, devpara.o(i.Getdevice_Num))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Getdevice_Num
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;devchange
</UL>

<P><STRONG><a name="[1c6]"></a>HAL_CRC_Init</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, stm32f4xx_hal_crc.o(i.HAL_CRC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_CRC_Init &rArr; HAL_CRC_MspInit
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CRC_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_CRC_Init
</UL>

<P><STRONG><a name="[1c7]"></a>HAL_CRC_MspInit</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, stm32f4xx_hal_msp.o(i.HAL_CRC_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_CRC_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CRC_Init
</UL>

<P><STRONG><a name="[1c8]"></a>HAL_DMA_Abort</STRONG> (Thumb, 170 bytes, Stack size 16 bytes, stm32f4xx_hal_dma.o(i.HAL_DMA_Abort))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_DMA_Abort
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_DMAStop
</UL>

<P><STRONG><a name="[1f5]"></a>HAL_DMA_Abort_IT</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, stm32f4xx_hal_dma.o(i.HAL_DMA_Abort_IT))
<BR><BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_IRQHandler
</UL>

<P><STRONG><a name="[1c9]"></a>HAL_DMA_DeInit</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, stm32f4xx_hal_dma.o(i.HAL_DMA_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_CalcBaseAndBitshift
</UL>
<BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART3_MspDeInit
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART2_MspDeInit
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART1_MspDeInit
</UL>

<P><STRONG><a name="[12c]"></a>HAL_DMA_IRQHandler</STRONG> (Thumb, 574 bytes, Stack size 24 bytes, stm32f4xx_hal_dma.o(i.HAL_DMA_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_DMA_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream6_IRQHandler
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream5_IRQHandler
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream7_IRQHandler
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream5_IRQHandler
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream6_IRQHandler
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream3_IRQHandler
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream3_IRQHandler
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream1_IRQHandler
</UL>

<P><STRONG><a name="[1cb]"></a>HAL_DMA_Init</STRONG> (Thumb, 232 bytes, Stack size 24 bytes, stm32f4xx_hal_dma.o(i.HAL_DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_CheckFifoParam
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_CalcBaseAndBitshift
</UL>
<BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART3_MspInit
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART2_MspInit
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART1_MspInit
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_MspInit
</UL>

<P><STRONG><a name="[1cd]"></a>HAL_DMA_Start_IT</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, stm32f4xx_hal_dma.o(i.HAL_DMA_Start_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit_DMA
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_DMA
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_WriteBlocks_DMA
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ReadBlocks_DMA
</UL>

<P><STRONG><a name="[11c]"></a>HAL_Delay</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, stm32f4xx_hal.o(i.HAL_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_InitCard
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClirateSet
</UL>

<P><STRONG><a name="[216]"></a>HAL_GPIO_DeInit</STRONG> (Thumb, 316 bytes, Stack size 20 bytes, stm32f4xx_hal_gpio.o(i.HAL_GPIO_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_GPIO_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART3_MspDeInit
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART2_MspDeInit
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART1_MspDeInit
</UL>

<P><STRONG><a name="[15a]"></a>HAL_GPIO_Init</STRONG> (Thumb, 466 bytes, Stack size 24 bytes, stm32f4xx_hal_gpio.o(i.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysLed_Cfg
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysBeep_Cfg
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SP706_Cfg
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_IOInit
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAM_Init
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART3_MspInit
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART2_MspInit
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART1_MspInit
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI1_MspInit
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IIC2_MspInit
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IIC1_MspInit
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_MspInit
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_GPIO_Init
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART3_UART_Init
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard_GPIO_Init
</UL>

<P><STRONG><a name="[1c5]"></a>HAL_GPIO_ReadPin</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_hal_gpio.o(i.HAL_GPIO_ReadPin))
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetKeyVal_K6
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetKeyVal_K5
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetKeyVal_K4
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetKeyVal_K3
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetKeyVal_K2
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetKeyVal_K1
</UL>

<P><STRONG><a name="[244]"></a>HAL_GPIO_TogglePin</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_hal_gpio.o(i.HAL_GPIO_TogglePin))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task01_F
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Guard
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Wait_Busy
</UL>

<P><STRONG><a name="[116]"></a>HAL_GPIO_WritePin</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_hal_gpio.o(i.HAL_GPIO_WritePin))
<BR><BR>[Called By]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_ReadID
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Init
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysLed_Cfg
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysBeep_Cfg
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SP706_Cfg
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDBR_RebackFun
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_REST
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_IOInit
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAM_Init
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BeepWork_RebackFun
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer01Callback
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task02_F
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task01_F
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream6_IRQHandler
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream7_IRQHandler
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkCard
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Write_Enable
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_ReadSR
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_ReadBuffer
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_PageWrite
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_GPIO_Init
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Erase_Sector
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAM_Write
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART3_UART_Init
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream3_IRQHandler
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteOneByte
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteCmd
</UL>

<P><STRONG><a name="[381]"></a>HAL_GetDEVID</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_hal.o(i.HAL_GetDEVID))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[380]"></a>HAL_GetREVID</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_hal.o(i.HAL_GetREVID))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[122]"></a>HAL_GetTick</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_hal.o(i.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitFlagStateUntilTimeout
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXEFlagUntilTimeout
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnRXNEFlagUntilTimeout
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnMasterAddressFlagUntilTimeout
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnBTFFlagUntilTimeout
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_FindSCR
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateFileName
</UL>

<P><STRONG><a name="[1cf]"></a>HAL_I2C_Init</STRONG> (Thumb, 286 bytes, Stack size 16 bytes, stm32f4xx_hal_i2c.o(i.HAL_I2C_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_IIC2_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C2_Init
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C1_Init
</UL>

<P><STRONG><a name="[15d]"></a>HAL_I2C_Mem_Read</STRONG> (Thumb, 796 bytes, Stack size 48 bytes, stm32f4xx_hal_i2c.o(i.HAL_I2C_Mem_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnRXNEFlagUntilTimeout
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryRead
</UL>
<BR>[Called By]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCF8563_Read_DEV
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAM_Read
</UL>

<P><STRONG><a name="[15f]"></a>HAL_I2C_Mem_Write</STRONG> (Thumb, 384 bytes, Stack size 48 bytes, stm32f4xx_hal_i2c.o(i.HAL_I2C_Mem_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXEFlagUntilTimeout
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnBTFFlagUntilTimeout
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCF8563_Set_DEV
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAM_Write
</UL>

<P><STRONG><a name="[1d0]"></a>HAL_I2C_MspInit</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, stm32f4xx_hal_msp.o(i.HAL_I2C_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_I2C_MspInit &rArr; HAL_IIC2_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IIC2_MspInit
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IIC1_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
</UL>

<P><STRONG><a name="[1d8]"></a>HAL_IIC1_MspInit</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, m4_iic1.o(i.HAL_IIC1_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_IIC1_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspInit
</UL>

<P><STRONG><a name="[1d9]"></a>HAL_IIC2_MspInit</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, m4_iic2.o(i.HAL_IIC2_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_IIC2_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspInit
</UL>

<P><STRONG><a name="[214]"></a>HAL_IncTick</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_hal.o(i.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
</UL>

<P><STRONG><a name="[1da]"></a>HAL_Init</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, stm32f4xx_hal.o(i.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = HAL_Init &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1dc]"></a>HAL_InitTick</STRONG> (Thumb, 122 bytes, Stack size 48 bytes, stm32f4xx_hal_timebase_tim.o(i.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetClockConfig
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Start_IT
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[1dd]"></a>HAL_MspInit</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, stm32f4xx_hal_msp.o(i.HAL_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[217]"></a>HAL_NVIC_DisableIRQ</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(i.HAL_NVIC_DisableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART3_MspDeInit
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART2_MspDeInit
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART1_MspDeInit
</UL>

<P><STRONG><a name="[1df]"></a>HAL_NVIC_EnableIRQ</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(i.HAL_NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART2_DMA_Init
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_DMA_Init
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART3_MspInit
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART2_MspInit
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART1_MspInit
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_DMA_Init
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_MspInit
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART3_DMA_Init
</UL>

<P><STRONG><a name="[1de]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 124 bytes, Stack size 40 bytes, stm32f4xx_hal_cortex.o(i.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_GetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART2_DMA_Init
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_DMA_Init
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART3_MspInit
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART2_MspInit
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART1_MspInit
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_DMA_Init
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_MspInit
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART3_DMA_Init
</UL>

<P><STRONG><a name="[1db]"></a>HAL_NVIC_SetPriorityGrouping</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(i.HAL_NVIC_SetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
</UL>

<P><STRONG><a name="[1e5]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 446 bytes, Stack size 16 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>
<BR>[Called By]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[1e0]"></a>HAL_RCC_GetClockConfig</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_GetClockConfig))
<BR><BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[1e7]"></a>HAL_RCC_GetHCLKFreq</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_GetHCLKFreq))
<BR><BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[1d1]"></a>HAL_RCC_GetPCLK1Freq</STRONG> (Thumb, 36 bytes, Stack size 4 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_GetPCLK1Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_RCC_GetPCLK1Freq
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[1e8]"></a>HAL_RCC_GetPCLK2Freq</STRONG> (Thumb, 36 bytes, Stack size 4 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_GetPCLK2Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_RCC_GetPCLK2Freq
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[1e6]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_GetSysClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[1e9]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 1090 bytes, Stack size 16 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_RCC_OscConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[1f6]"></a>HAL_SD_AbortCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_sd.o(i.HAL_SD_AbortCallback))
<BR><BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_IRQHandler
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DMATxAbort
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DMARxAbort
</UL>

<P><STRONG><a name="[111]"></a>HAL_SD_ConfigWideBusOperation</STRONG> (Thumb, 168 bytes, Stack size 56 bytes, stm32f4xx_hal_sd.o(i.HAL_SD_ConfigWideBusOperation))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = HAL_SD_ConfigWideBusOperation &rArr; SD_WideBus_Enable &rArr; SD_FindSCR &rArr; SDMMC_CmdBlockLength &rArr; SDMMC_GetCmdResp1 &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_Init
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WideBus_Enable
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WideBus_Disable
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_Init
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SDIO_SD_Init
</UL>

<P><STRONG><a name="[1f0]"></a>HAL_SD_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_sd.o(i.HAL_SD_ErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_IRQHandler
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DMATxAbort
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DMARxAbort
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DMAReceiveCplt
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DMAError
</UL>

<P><STRONG><a name="[2b3]"></a>HAL_SD_GetCardCSD</STRONG> (Thumb, 496 bytes, Stack size 12 bytes, stm32f4xx_hal_sd.o(i.HAL_SD_GetCardCSD))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_SD_GetCardCSD
</UL>
<BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitCard
</UL>

<P><STRONG><a name="[10b]"></a>HAL_SD_GetCardInfo</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, stm32f4xx_hal_sd.o(i.HAL_SD_GetCardInfo))
<BR><BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_GetCardInfo
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_GetCardInfo
</UL>

<P><STRONG><a name="[10d]"></a>HAL_SD_GetCardState</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, stm32f4xx_hal_sd.o(i.HAL_SD_GetCardState))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = HAL_SD_GetCardState &rArr; SD_SendStatus &rArr; SDMMC_CmdSendStatus &rArr; SDMMC_GetCmdResp1 &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DMATxAbort
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DMARxAbort
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DMAError
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_GetCardState
</UL>

<P><STRONG><a name="[1ee]"></a>HAL_SD_IRQHandler</STRONG> (Thumb, 504 bytes, Stack size 16 bytes, stm32f4xx_hal_sd.o(i.HAL_SD_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = HAL_SD_IRQHandler &rArr; SD_DMATxAbort &rArr; HAL_SD_GetCardState &rArr; SD_SendStatus &rArr; SDMMC_CmdSendStatus &rArr; SDMMC_GetCmdResp1 &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort_IT
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_TxCpltCallback
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_RxCpltCallback
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ErrorCallback
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_AbortCallback
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdStopTransfer
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Write_IT
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Read_IT
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DMATxAbort
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DMARxAbort
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_IRQHandler
</UL>

<P><STRONG><a name="[110]"></a>HAL_SD_Init</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, stm32f4xx_hal_sd.o(i.HAL_SD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = HAL_SD_Init &rArr; HAL_SD_InitCard &rArr; SD_InitCard &rArr; SDMMC_CmdSetRelAdd &rArr; SDMMC_GetCmdResp6 &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_InitCard
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_Init
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SDIO_SD_Init
</UL>

<P><STRONG><a name="[1f8]"></a>HAL_SD_InitCard</STRONG> (Thumb, 128 bytes, Stack size 48 bytes, stm32f4xx_hal_sd.o(i.HAL_SD_InitCard))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = HAL_SD_InitCard &rArr; SD_InitCard &rArr; SDMMC_CmdSetRelAdd &rArr; SDMMC_GetCmdResp6 &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_PowerState_ON
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_Init
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitCard
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_Init
</UL>

<P><STRONG><a name="[1f7]"></a>HAL_SD_MspInit</STRONG> (Thumb, 300 bytes, Stack size 32 bytes, m4_sdio.o(i.HAL_SD_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_SD_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Error_Handler
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_Init
</UL>

<P><STRONG><a name="[113]"></a>HAL_SD_ReadBlocks_DMA</STRONG> (Thumb, 282 bytes, Stack size 48 bytes, stm32f4xx_hal_sd.o(i.HAL_SD_ReadBlocks_DMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = HAL_SD_ReadBlocks_DMA &rArr; SDMMC_CmdReadSingleBlock &rArr; SDMMC_GetCmdResp1 &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdReadSingleBlock
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdReadMultiBlock
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdBlockLength
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ConfigData
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_ReadBlocks_DMA
</UL>

<P><STRONG><a name="[1f1]"></a>HAL_SD_RxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_sd.o(i.HAL_SD_RxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_IRQHandler
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DMAReceiveCplt
</UL>

<P><STRONG><a name="[1f2]"></a>HAL_SD_TxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_sd.o(i.HAL_SD_TxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_IRQHandler
</UL>

<P><STRONG><a name="[115]"></a>HAL_SD_WriteBlocks_DMA</STRONG> (Thumb, 280 bytes, Stack size 48 bytes, stm32f4xx_hal_sd.o(i.HAL_SD_WriteBlocks_DMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = HAL_SD_WriteBlocks_DMA &rArr; SDMMC_CmdWriteSingleBlock &rArr; SDMMC_GetCmdResp1 &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdWriteSingleBlock
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdWriteMultiBlock
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdBlockLength
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ConfigData
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_WriteBlocks_DMA
</UL>

<P><STRONG><a name="[203]"></a>HAL_SPI1_MspInit</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, m4_spi1.o(i.HAL_SPI1_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_SPI1_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
</UL>

<P><STRONG><a name="[204]"></a>HAL_SPI_Init</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, stm32f4xx_hal_spi.o(i.HAL_SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_SPI1_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI1_Init
</UL>

<P><STRONG><a name="[205]"></a>HAL_SPI_MspInit</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32f4xx_hal_msp.o(i.HAL_SPI_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_SPI_MspInit &rArr; HAL_SPI1_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI1_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
</UL>

<P><STRONG><a name="[206]"></a>HAL_SPI_TransmitReceive</STRONG> (Thumb, 542 bytes, Stack size 48 bytes, stm32f4xx_hal_spi.o(i.HAL_SPI_TransmitReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitFlagStateUntilTimeout
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CheckFlag_BSY
</UL>
<BR>[Called By]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_ReadWriteByte
</UL>

<P><STRONG><a name="[2cf]"></a>HAL_SYSTICK_CLKSourceConfig</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(i.HAL_SYSTICK_CLKSourceConfig))
<BR><BR>[Called By]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[209]"></a>HAL_SYSTICK_Config</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, stm32f4xx_hal_cortex.o(i.HAL_SYSTICK_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_SYSTICK_Config &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[211]"></a>HAL_TIMEx_BreakCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim_ex.o(i.HAL_TIMEx_BreakCallback))
<BR><BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[213]"></a>HAL_TIMEx_CommutationCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim_ex.o(i.HAL_TIMEx_CommutationCallback))
<BR><BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[1e1]"></a>HAL_TIM_Base_Init</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_Base_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_TIM_Base_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_Init
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[20a]"></a>HAL_TIM_Base_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_Base_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[1e2]"></a>HAL_TIM_Base_Start_IT</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_Base_Start_IT))
<BR><BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_Init
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[20d]"></a>HAL_TIM_IC_CaptureCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_IC_CaptureCallback))
<BR><BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[20c]"></a>HAL_TIM_IRQHandler</STRONG> (Thumb, 406 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_TIM_IRQHandler &rArr; HAL_TIM_PeriodElapsedCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_CommutationCallback
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_BreakCallback
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_TriggerCallback
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_PulseFinishedCallback
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_DelayElapsedCallback
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_CaptureCallback
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
</UL>

<P><STRONG><a name="[20e]"></a>HAL_TIM_OC_DelayElapsedCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_OC_DelayElapsedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[20f]"></a>HAL_TIM_PWM_PulseFinishedCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_PWM_PulseFinishedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[210]"></a>HAL_TIM_PeriodElapsedCallback</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, stm32f4xx_hal_msp.o(i.HAL_TIM_PeriodElapsedCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_TIM_PeriodElapsedCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
</UL>
<BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[212]"></a>HAL_TIM_TriggerCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_TriggerCallback))
<BR><BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[215]"></a>HAL_UART1_MspDeInit</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, m4_uart1.o(i.HAL_UART1_MspDeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_UART1_MspDeInit &rArr; HAL_GPIO_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_DeInit
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_DisableIRQ
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspDeInit
</UL>

<P><STRONG><a name="[218]"></a>HAL_UART1_MspInit</STRONG> (Thumb, 234 bytes, Stack size 32 bytes, m4_uart1.o(i.HAL_UART1_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_UART1_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Error_Handler
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
</UL>

<P><STRONG><a name="[219]"></a>HAL_UART2_MspDeInit</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, m4_uart2.o(i.HAL_UART2_MspDeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_UART2_MspDeInit &rArr; HAL_GPIO_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_DeInit
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_DisableIRQ
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspDeInit
</UL>

<P><STRONG><a name="[21a]"></a>HAL_UART2_MspInit</STRONG> (Thumb, 232 bytes, Stack size 32 bytes, m4_uart2.o(i.HAL_UART2_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_UART2_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Error_Handler
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
</UL>

<P><STRONG><a name="[21b]"></a>HAL_UART3_MspDeInit</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, m4_uart3.o(i.HAL_UART3_MspDeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_UART3_MspDeInit &rArr; HAL_GPIO_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_DeInit
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_DisableIRQ
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspDeInit
</UL>

<P><STRONG><a name="[21c]"></a>HAL_UART3_MspInit</STRONG> (Thumb, 214 bytes, Stack size 32 bytes, m4_uart3.o(i.HAL_UART3_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_UART3_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
</UL>

<P><STRONG><a name="[21d]"></a>HAL_UART_DMAStop</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_DMAStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_UART_DMAStop &rArr; HAL_DMA_Abort
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndTxTransfer
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndRxTransfer
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
</UL>

<P><STRONG><a name="[11d]"></a>HAL_UART_DeInit</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = HAL_UART_DeInit &rArr; HAL_UART_MspDeInit &rArr; HAL_UART3_MspDeInit &rArr; HAL_GPIO_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspDeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClirateSet
</UL>

<P><STRONG><a name="[223]"></a>HAL_UART_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_ErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAError
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAAbortOnError
</UL>

<P><STRONG><a name="[221]"></a>HAL_UART_IRQHandler</STRONG> (Thumb, 326 bytes, Stack size 32 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_UART_IRQHandler &rArr; UART_Receive_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Transmit_IT
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Receive_IT
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndTransmit_IT
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndRxTransfer
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
</UL>

<P><STRONG><a name="[11e]"></a>HAL_UART_Init</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_UART3_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART2_UART_Init
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClirateSet
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART3_UART_Init
</UL>

<P><STRONG><a name="[220]"></a>HAL_UART_MspDeInit</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, stm32f4xx_hal_msp.o(i.HAL_UART_MspDeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HAL_UART_MspDeInit &rArr; HAL_UART3_MspDeInit &rArr; HAL_GPIO_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART3_MspDeInit
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART2_MspDeInit
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART1_MspDeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_DeInit
</UL>

<P><STRONG><a name="[226]"></a>HAL_UART_MspInit</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, stm32f4xx_hal_msp.o(i.HAL_UART_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_UART_MspInit &rArr; HAL_UART3_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART3_MspInit
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART2_MspInit
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART1_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[228]"></a>HAL_UART_Receive_DMA</STRONG> (Thumb, 182 bytes, Stack size 32 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_Receive_DMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = HAL_UART_Receive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3_Cfg
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_Cfg
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_Cfg
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
</UL>

<P><STRONG><a name="[2ec]"></a>HAL_UART_RxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_RxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Receive_IT
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAReceiveCplt
</UL>

<P><STRONG><a name="[2ed]"></a>HAL_UART_RxHalfCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_RxHalfCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMARxHalfCplt
</UL>

<P><STRONG><a name="[229]"></a>HAL_UART_Transmit</STRONG> (Thumb, 214 bytes, Stack size 32 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[22b]"></a>HAL_UART_Transmit_DMA</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_Transmit_DMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = HAL_UART_Transmit_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_Transmit
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3_Transmit
</UL>

<P><STRONG><a name="[2ee]"></a>HAL_UART_TxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_TxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndTransmit_IT
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMATransmitCplt
</UL>

<P><STRONG><a name="[2ef]"></a>HAL_UART_TxHalfCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_TxHalfCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMATxHalfCplt
</UL>

<P><STRONG><a name="[22c]"></a>HT2X188_Pack_0X01_S</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, ht2x188pro.o(i.HT2X188_Pack_0X01_S))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HT2X188_Pack_0X01_S &rArr; SUMCheck_Input
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUMCheck_Input
</UL>
<BR>[Called By]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT2X188_Pack_TxServer_S
</UL>

<P><STRONG><a name="[22f]"></a>HT2X188_Pack_0X129_S</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, ht2x188pro.o(i.HT2X188_Pack_0X129_S))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HT2X188_Pack_0X129_S
</UL>
<BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT2X188_Pack_Rx_S
</UL>

<P><STRONG><a name="[22d]"></a>HT2X188_Pack_RxAnalyze_S</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, ht2x188pro.o(i.HT2X188_Pack_RxAnalyze_S))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = HT2X188_Pack_RxAnalyze_S &rArr; HT2X188_Pack_Rx_S &rArr; SysDevData_Save &rArr; SysDevData_Update &rArr; WriteData_FRAM &rArr; WriteData_FRAM_UnSafe &rArr; ReadData_FRAM_UnSafe &rArr; FRAM_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUMCheck_Check
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT2X188_Pack_Rx_S
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT2X188_Pack_RxServer_S
</UL>

<P><STRONG><a name="[80]"></a>HT2X188_Pack_RxServer_S</STRONG> (Thumb, 484 bytes, Stack size 24 bytes, ht2x188pro.o(i.HT2X188_Pack_RxServer_S))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = HT2X188_Pack_RxServer_S &rArr; HT2X188_Pack_RxAnalyze_S &rArr; HT2X188_Pack_Rx_S &rArr; SysDevData_Save &rArr; SysDevData_Update &rArr; WriteData_FRAM &rArr; WriteData_FRAM_UnSafe &rArr; ReadData_FRAM_UnSafe &rArr; FRAM_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT2X188_Pack_RxAnalyze_S
</UL>
<BR>[Address Reference Count : 1]<UL><LI> com_server.o(i.UART_TO_HT2X188_CCB_Init_S)
</UL>
<P><STRONG><a name="[22e]"></a>HT2X188_Pack_Rx_S</STRONG> (Thumb, 1804 bytes, Stack size 168 bytes, ht2x188pro.o(i.HT2X188_Pack_Rx_S))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = HT2X188_Pack_Rx_S &rArr; SysDevData_Save &rArr; SysDevData_Update &rArr; WriteData_FRAM &rArr; WriteData_FRAM_UnSafe &rArr; ReadData_FRAM_UnSafe &rArr; FRAM_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserData_Save
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY_1000Send_Code_QInput
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexWait
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelSysTick
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysDevData_Save
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetUser_Num
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT2X188_Pack_0X129_S
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BcdToHex4
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BcdToHex2
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BcdToHex
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strrchr
</UL>
<BR>[Called By]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT2X188_Pack_RxAnalyze_S
</UL>

<P><STRONG><a name="[230]"></a>HT2X188_Pack_TxServer_S</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, ht2x188pro.o(i.HT2X188_Pack_TxServer_S))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = HT2X188_Pack_TxServer_S &rArr; xQueueGenericReceive &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT2X188_Pack_0X01_S
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task07_F
</UL>

<P><STRONG><a name="[185]"></a>HT2X_188Send_Code_QInput</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, clientapp.o(i.HT2X_188Send_Code_QInput))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = HT2X_188Send_Code_QInput &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexWait
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClientCH1_QueueSend
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task08_F
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY1000_Pack_Rx_S
</UL>

<P><STRONG><a name="[183]"></a>HZCRL_188Send_Code_QInput</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, clientapp.o(i.HZCRL_188Send_Code_QInput))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = HZCRL_188Send_Code_QInput &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexWait
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClientCH1_QueueSend
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task08_F
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY1000_Pack_Rx_S
</UL>

<P><STRONG><a name="[231]"></a>HZCRL_Pack_0X01_S</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, hzcrl_xpro.o(i.HZCRL_Pack_0X01_S))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HZCRL_Pack_0X01_S &rArr; CalSum
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalSum
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_htonl
</UL>
<BR>[Called By]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HZCRL_Pack_TxServer_S
</UL>

<P><STRONG><a name="[81]"></a>HZCRL_Pack_RxServer_S</STRONG> (Thumb, 562 bytes, Stack size 16 bytes, hzcrl_xpro.o(i.HZCRL_Pack_RxServer_S))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = HZCRL_Pack_RxServer_S &rArr; HZCRL_Pack_Rx_S &rArr; SysDevData_Save &rArr; SysDevData_Update &rArr; WriteData_FRAM &rArr; WriteData_FRAM_UnSafe &rArr; ReadData_FRAM_UnSafe &rArr; FRAM_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_get
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HZCRL_Pack_Rx_S
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalSum
</UL>
<BR>[Address Reference Count : 1]<UL><LI> com_server.o(i.UART_TO_HZCRL_CCB_Init_S)
</UL>
<P><STRONG><a name="[235]"></a>HZCRL_Pack_Rx_S</STRONG> (Thumb, 1568 bytes, Stack size 160 bytes, hzcrl_xpro.o(i.HZCRL_Pack_Rx_S))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = HZCRL_Pack_Rx_S &rArr; SysDevData_Save &rArr; SysDevData_Update &rArr; WriteData_FRAM &rArr; WriteData_FRAM_UnSafe &rArr; ReadData_FRAM_UnSafe &rArr; FRAM_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY_1000Send_Code_QInput
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexWait
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelSysTick
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysDevData_Save
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_Hton
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BcdToHex4
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BcdToHex2
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BcdToHex
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strrchr
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HZCRL_Pack_RxServer_S
</UL>

<P><STRONG><a name="[237]"></a>HZCRL_Pack_TxServer_S</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, hzcrl_xpro.o(i.HZCRL_Pack_TxServer_S))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = HZCRL_Pack_TxServer_S &rArr; xQueueGenericReceive &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HZCRL_Pack_0X01_S
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task07_F
</UL>

<P><STRONG><a name="[4]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.HardFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[238]"></a>HbInit</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, heartbeat.o(i.HbInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = HbInit &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupCreate
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexWait
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelSysTick
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strrchr
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task10_F
</UL>

<P><STRONG><a name="[23b]"></a>HbMainTask</STRONG> (Thumb, 508 bytes, Stack size 104 bytes, heartbeat.o(i.HbMainTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = HbMainTask &rArr; setServerIP &rArr; SysPara_Update &rArr; WriteData_SPIFlash &rArr; WriteData_SPIFlash_UnSafe &rArr; W25QXX_WriteBuffer &rArr; W25QXX_SectorWrite &rArr; W25QXX_PageWrite &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR &rArr; SPI1_ReadWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY_1000Send_Code_QInput
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexWait
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelSysTick
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setServerIP
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strrchr
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task10_F
</UL>

<P><STRONG><a name="[1ab]"></a>HexToBcd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, typedef.o(i.HexToBcd))
<BR><BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY188_Pack_0X04_S
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCF8563_Set_DEV
</UL>

<P><STRONG><a name="[1ac]"></a>HexToBcd2</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, typedef.o(i.HexToBcd2))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HexToBcd2
</UL>
<BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY188_Pack_0X04_S
</UL>

<P><STRONG><a name="[340]"></a>HexToBcd4</STRONG> (Thumb, 226 bytes, Stack size 8 bytes, typedef.o(i.HexToBcd4))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HexToBcd4
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setsn
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;devchange
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ddf2ctrl
</UL>

<P><STRONG><a name="[240]"></a>IIC1_Cfg</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, m4_iic1.o(i.IIC1_Cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = IIC1_Cfg &rArr; MX_I2C1_Init &rArr; HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_IIC2_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C1_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[242]"></a>IIC2_Cfg</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, m4_iic2.o(i.IIC2_Cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = IIC2_Cfg &rArr; MX_I2C2_Init &rArr; HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_IIC2_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C2_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[87]"></a>IWDG_Guard</STRONG> (Thumb, 430 bytes, Stack size 8 bytes, watchdog.o(i.IWDG_Guard))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = IWDG_Guard &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_TogglePin
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexWait
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelSysTick
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strrchr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> watchdog.o(i.dogInit)
</UL>
<P><STRONG><a name="[245]"></a>IndepKEYFunction_Init</STRONG> (Thumb, 204 bytes, Stack size 32 bytes, indepkey.o(i.IndepKEYFunction_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = IndepKEYFunction_Init &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task03_F
</UL>

<P><STRONG><a name="[246]"></a>IndepKEY_Create</STRONG> (Thumb, 186 bytes, Stack size 32 bytes, indepkey.o(i.IndepKEY_Create))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = IndepKEY_Create &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyboardApp_Init
</UL>

<P><STRONG><a name="[24b]"></a>IndepKEY_Enable</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, indepkey.o(i.IndepKEY_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyboardApp_Init
</UL>

<P><STRONG><a name="[2e8]"></a>IndepKEY_ScanServer</STRONG> (Thumb, 694 bytes, Stack size 16 bytes, indepkey.o(i.IndepKEY_ScanServer))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IndepKEY_ScanServer
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer01Callback
</UL>

<P><STRONG><a name="[383]"></a>Init_PaulseFunction</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, pulse.o(i.Init_PaulseFunction))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2c1]"></a>Int2Str</STRONG> (Thumb, 84 bytes, Stack size 20 bytes, common.o(i.Int2Str))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Int2Str
</UL>
<BR>[Called By]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialDownload
</UL>

<P><STRONG><a name="[6c]"></a>KeyOUT_K1</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, keyboardapp.o(i.KeyOUT_K1))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = KeyOUT_K1 &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keyboardapp.o(i.KeyboardApp_Init)
</UL>
<P><STRONG><a name="[6e]"></a>KeyOUT_K2</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, keyboardapp.o(i.KeyOUT_K2))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = KeyOUT_K2 &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keyboardapp.o(i.KeyboardApp_Init)
</UL>
<P><STRONG><a name="[70]"></a>KeyOUT_K3</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, keyboardapp.o(i.KeyOUT_K3))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = KeyOUT_K3 &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keyboardapp.o(i.KeyboardApp_Init)
</UL>
<P><STRONG><a name="[72]"></a>KeyOUT_K4</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, keyboardapp.o(i.KeyOUT_K4))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = KeyOUT_K4 &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keyboardapp.o(i.KeyboardApp_Init)
</UL>
<P><STRONG><a name="[74]"></a>KeyOUT_K5</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, keyboardapp.o(i.KeyOUT_K5))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = KeyOUT_K5 &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keyboardapp.o(i.KeyboardApp_Init)
</UL>
<P><STRONG><a name="[76]"></a>KeyOUT_K6</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, keyboardapp.o(i.KeyOUT_K6))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = KeyOUT_K6 &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keyboardapp.o(i.KeyboardApp_Init)
</UL>
<P><STRONG><a name="[24a]"></a>KeyboardApp_Init</STRONG> (Thumb, 268 bytes, Stack size 40 bytes, keyboardapp.o(i.KeyboardApp_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = KeyboardApp_Init &rArr; IndepKEY_Create &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IndepKEY_Enable
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IndepKEY_Create
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task03_F
</UL>

<P><STRONG><a name="[1]"></a>Keyboard_GPIO_Init</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, keyboard.o(i.Keyboard_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Keyboard_GPIO_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> indepkey.o(.data)
</UL>
<P><STRONG><a name="[24c]"></a>LCD_IOInit</STRONG> (Thumb, 324 bytes, Stack size 32 bytes, uc1698.o(i.LCD_IOInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = LCD_IOInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task04_F
</UL>

<P><STRONG><a name="[24d]"></a>LCD_REST</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, uc1698.o(i.LCD_REST))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = LCD_REST &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task04_F
</UL>

<P><STRONG><a name="[24e]"></a>LCD_WriteCmd</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, uc1698.o(i.LCD_WriteCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LCD_WriteCmd &rArr; PutData8
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutData8
</UL>
<BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Init
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update_LcdRAM_ALL
</UL>

<P><STRONG><a name="[250]"></a>LCD_WriteOneByte</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, uc1698.o(i.LCD_WriteOneByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LCD_WriteOneByte &rArr; PutData8
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutData8
</UL>
<BR>[Called By]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update_LcdRAM_ALL
</UL>

<P><STRONG><a name="[8a]"></a>LEDBR_RebackFun</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, led.o(i.LEDBR_RebackFun))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LEDBR_RebackFun
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[251]"></a>Lcd_Init</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, uc1698.o(i.Lcd_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Lcd_Init &rArr; LCD_WriteCmd &rArr; PutData8
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task04_F
</UL>

<P><STRONG><a name="[252]"></a>M4_CRC_PHY_Init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, m4_crc.o(i.M4_CRC_PHY_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = M4_CRC_PHY_Init &rArr; MX_CRC_Init &rArr; HAL_CRC_Init &rArr; HAL_CRC_MspInit
</UL>
<BR>[Calls]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_CRC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[254]"></a>MD5_Append</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, crypto.o(i.MD5_Append))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = MD5_Append &rArr; crl_u_MD5_Update &rArr; md5_process &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crl_u_MD5_Update
</UL>
<BR>[Called By]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calMd5_hash_SPI
</UL>

<P><STRONG><a name="[256]"></a>MD5_Finish</STRONG> (Thumb, 78 bytes, Stack size 40 bytes, crypto.o(i.MD5_Finish))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = MD5_Finish &rArr; crl_u_MD5_Finish &rArr; crl_u_MD5_Update &rArr; md5_process &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crl_u_MD5_Finish
</UL>
<BR>[Called By]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calMd5_hash_SPI
</UL>

<P><STRONG><a name="[258]"></a>MD5_Init</STRONG> (Thumb, 26 bytes, Stack size 4 bytes, crypto.o(i.MD5_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = MD5_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crl_u_MD5_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calMd5_hash_SPI
</UL>

<P><STRONG><a name="[25a]"></a>MX_FATFS_Init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, fatfs.o(i.MX_FATFS_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = MX_FATFS_Init &rArr; FATFS_LinkDriver &rArr; FATFS_LinkDriverEx
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FATFS_LinkDriver
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[241]"></a>MX_I2C1_Init</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, m4_iic1.o(i.MX_I2C1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = MX_I2C1_Init &rArr; HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_IIC2_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC1_Cfg
</UL>

<P><STRONG><a name="[243]"></a>MX_I2C2_Init</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, m4_iic2.o(i.MX_I2C2_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = MX_I2C2_Init &rArr; HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_IIC2_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Error_Handler
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC2_Cfg
</UL>

<P><STRONG><a name="[25b]"></a>MX_SDIO_SD_Init</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, m4_sdio.o(i.MX_SDIO_SD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = MX_SDIO_SD_Init &rArr; HAL_SD_ConfigWideBusOperation &rArr; SD_WideBus_Enable &rArr; SD_FindSCR &rArr; SDMMC_CmdBlockLength &rArr; SDMMC_GetCmdResp1 &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Error_Handler
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_Init
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ConfigWideBusOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_Cfg
</UL>

<P><STRONG><a name="[25c]"></a>MX_SPI1_Init</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, m4_spi1.o(i.MX_SPI1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = MX_SPI1_Init &rArr; HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_SPI1_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Init
</UL>

<P><STRONG><a name="[25d]"></a>MX_USART1_DMA_Init</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, m4_uart1.o(i.MX_USART1_DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = MX_USART1_DMA_Init &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_Cfg
</UL>

<P><STRONG><a name="[25e]"></a>MX_USART1_UART_Init</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, m4_uart1.o(i.MX_USART1_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = MX_USART1_UART_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_UART3_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Error_Handler
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_Cfg
</UL>

<P><STRONG><a name="[25f]"></a>MX_USART2_DMA_Init</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, m4_uart2.o(i.MX_USART2_DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = MX_USART2_DMA_Init &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_Cfg
</UL>

<P><STRONG><a name="[260]"></a>MX_USART2_UART_Init</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, m4_uart2.o(i.MX_USART2_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = MX_USART2_UART_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_UART3_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Error_Handler
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_Cfg
</UL>

<P><STRONG><a name="[261]"></a>MX_USART3_DMA_Init</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, m4_uart3.o(i.MX_USART3_DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = MX_USART3_DMA_Init &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3_Cfg
</UL>

<P><STRONG><a name="[262]"></a>MX_USART3_UART_Init</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, m4_uart3.o(i.MX_USART3_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = MX_USART3_UART_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_UART3_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3_Cfg
</UL>

<P><STRONG><a name="[5]"></a>MemManage_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.MemManage_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[27e]"></a>Menu_1</STRONG> (Thumb, 252 bytes, Stack size 0 bytes, app_ui.o(i.Menu_1))
<BR><BR>[Called By]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_KeyManager
</UL>

<P><STRONG><a name="[263]"></a>Menu_1_1</STRONG> (Thumb, 278 bytes, Stack size 4 bytes, app_ui.o(i.Menu_1_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Menu_1_1
</UL>
<BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_PSG
</UL>
<BR>[Called By]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_KeyManager
</UL>

<P><STRONG><a name="[265]"></a>Menu_1_1_1</STRONG> (Thumb, 274 bytes, Stack size 4 bytes, app_ui.o(i.Menu_1_1_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Menu_1_1_1
</UL>
<BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_PSG
</UL>
<BR>[Called By]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_KeyManager
</UL>

<P><STRONG><a name="[266]"></a>Menu_1_1_2</STRONG> (Thumb, 456 bytes, Stack size 4 bytes, app_ui.o(i.Menu_1_1_2))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Menu_1_1_2
</UL>
<BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_PSG
</UL>
<BR>[Called By]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_KeyManager
</UL>

<P><STRONG><a name="[267]"></a>Menu_1_1_2_1</STRONG> (Thumb, 2534 bytes, Stack size 16 bytes, app_ui.o(i.Menu_1_1_2_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = Menu_1_1_2_1 &rArr; User_Filter
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMeters_Num_FromUserID
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Filter
</UL>
<BR>[Called By]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_KeyManager
</UL>

<P><STRONG><a name="[26a]"></a>Menu_1_1_3</STRONG> (Thumb, 386 bytes, Stack size 4 bytes, app_ui.o(i.Menu_1_1_3))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Menu_1_1_3
</UL>
<BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_PSG
</UL>
<BR>[Called By]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_KeyManager
</UL>

<P><STRONG><a name="[26b]"></a>Menu_1_1_4</STRONG> (Thumb, 274 bytes, Stack size 4 bytes, app_ui.o(i.Menu_1_1_4))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Menu_1_1_4
</UL>
<BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_PSG
</UL>
<BR>[Called By]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_KeyManager
</UL>

<P><STRONG><a name="[26c]"></a>Menu_1_1_5</STRONG> (Thumb, 274 bytes, Stack size 4 bytes, app_ui.o(i.Menu_1_1_5))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Menu_1_1_5
</UL>
<BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_PSG
</UL>
<BR>[Called By]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_KeyManager
</UL>

<P><STRONG><a name="[26d]"></a>Menu_1_2</STRONG> (Thumb, 278 bytes, Stack size 4 bytes, app_ui.o(i.Menu_1_2))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Menu_1_2
</UL>
<BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_PSG
</UL>
<BR>[Called By]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_KeyManager
</UL>

<P><STRONG><a name="[26e]"></a>Menu_1_2_1</STRONG> (Thumb, 2324 bytes, Stack size 16 bytes, app_ui.o(i.Menu_1_2_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = Menu_1_2_1 &rArr; User_Filter
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Filter
</UL>
<BR>[Called By]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_KeyManager
</UL>

<P><STRONG><a name="[26f]"></a>Menu_1_2_2</STRONG> (Thumb, 2324 bytes, Stack size 16 bytes, app_ui.o(i.Menu_1_2_2))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = Menu_1_2_2 &rArr; User_Filter
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Filter
</UL>
<BR>[Called By]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_KeyManager
</UL>

<P><STRONG><a name="[270]"></a>Menu_1_2_3</STRONG> (Thumb, 2324 bytes, Stack size 16 bytes, app_ui.o(i.Menu_1_2_3))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = Menu_1_2_3 &rArr; User_Filter
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Filter
</UL>
<BR>[Called By]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_KeyManager
</UL>

<P><STRONG><a name="[27f]"></a>Menu_1_3</STRONG> (Thumb, 272 bytes, Stack size 0 bytes, app_ui.o(i.Menu_1_3))
<BR><BR>[Called By]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_KeyManager
</UL>

<P><STRONG><a name="[271]"></a>Menu_1_3_1</STRONG> (Thumb, 3508 bytes, Stack size 88 bytes, app_ui.o(i.Menu_1_3_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = Menu_1_3_1 &rArr; SysPara_Update &rArr; WriteData_SPIFlash &rArr; WriteData_SPIFlash_UnSafe &rArr; W25QXX_WriteBuffer &rArr; W25QXX_SectorWrite &rArr; W25QXX_PageWrite &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR &rArr; SPI1_ReadWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysPara_Update
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY_1000Send_Code_QInput
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_PSG
</UL>
<BR>[Called By]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_KeyManager
</UL>

<P><STRONG><a name="[272]"></a>Menu_1_3_4</STRONG> (Thumb, 5582 bytes, Stack size 8 bytes, app_ui.o(i.Menu_1_3_4))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = Menu_1_3_4 &rArr; SysPara_Update &rArr; WriteData_SPIFlash &rArr; WriteData_SPIFlash_UnSafe &rArr; W25QXX_WriteBuffer &rArr; W25QXX_SectorWrite &rArr; W25QXX_PageWrite &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR &rArr; SPI1_ReadWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysPara_Update
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCF8563_Set
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_PSG
</UL>
<BR>[Called By]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_KeyManager
</UL>

<P><STRONG><a name="[273]"></a>Menu_1_3_5</STRONG> (Thumb, 1588 bytes, Stack size 8 bytes, app_ui.o(i.Menu_1_3_5))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = Menu_1_3_5 &rArr; SysPara_Update &rArr; WriteData_SPIFlash &rArr; WriteData_SPIFlash_UnSafe &rArr; W25QXX_WriteBuffer &rArr; W25QXX_SectorWrite &rArr; W25QXX_PageWrite &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR &rArr; SPI1_ReadWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysPara_Update
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_PSG
</UL>
<BR>[Called By]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_KeyManager
</UL>

<P><STRONG><a name="[274]"></a>Menu_1_3_6</STRONG> (Thumb, 420 bytes, Stack size 8 bytes, app_ui.o(i.Menu_1_3_6))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = Menu_1_3_6 &rArr; SysDevData_ResetALL &rArr; SysDevData_Update &rArr; WriteData_FRAM &rArr; WriteData_FRAM_UnSafe &rArr; ReadData_FRAM_UnSafe &rArr; FRAM_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysPara_Reset
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysDeviceList_Reset
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysDevData_ResetALL
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserData_ResetALL
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysUserList_Reset
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_PSG
</UL>
<BR>[Called By]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_KeyManager
</UL>

<P><STRONG><a name="[27a]"></a>Menu_1_3_7</STRONG> (Thumb, 1602 bytes, Stack size 8 bytes, app_ui.o(i.Menu_1_3_7))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = Menu_1_3_7 &rArr; SysPara_Update &rArr; WriteData_SPIFlash &rArr; WriteData_SPIFlash_UnSafe &rArr; W25QXX_WriteBuffer &rArr; W25QXX_SectorWrite &rArr; W25QXX_PageWrite &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR &rArr; SPI1_ReadWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysPara_Update
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_PSG
</UL>
<BR>[Called By]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_KeyManager
</UL>

<P><STRONG><a name="[27b]"></a>Menu_1_3_PassWord</STRONG> (Thumb, 1044 bytes, Stack size 4 bytes, app_ui.o(i.Menu_1_3_PassWord))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Menu_1_3_PassWord
</UL>
<BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_PSG
</UL>
<BR>[Called By]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_KeyManager
</UL>

<P><STRONG><a name="[27c]"></a>Menu_1_4</STRONG> (Thumb, 420 bytes, Stack size 4 bytes, app_ui.o(i.Menu_1_4))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Menu_1_4
</UL>
<BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_PSG
</UL>
<BR>[Called By]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_KeyManager
</UL>

<P><STRONG><a name="[280]"></a>Menu_1_4_1</STRONG> (Thumb, 420 bytes, Stack size 0 bytes, app_ui.o(i.Menu_1_4_1))
<BR><BR>[Called By]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_KeyManager
</UL>

<P><STRONG><a name="[27d]"></a>Menu_KeyManager</STRONG> (Thumb, 384 bytes, Stack size 8 bytes, app_ui.o(i.Menu_KeyManager))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = Menu_KeyManager &rArr; Menu_1_3_6 &rArr; SysDevData_ResetALL &rArr; SysDevData_Update &rArr; WriteData_FRAM &rArr; WriteData_FRAM_UnSafe &rArr; ReadData_FRAM_UnSafe &rArr; FRAM_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_1_4_1
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_1_4
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_1_3_PassWord
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_1_3_7
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_1_3_6
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_1_3_5
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_1_3_4
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_1_3_1
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_1_3
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_1_2_3
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_1_2_2
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_1_2_1
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_1_2
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_1_1_5
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_1_1_4
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_1_1_3
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_1_1_2_1
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_1_1_2
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_1_1_1
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_1_1
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_1
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task03_F
</UL>

<P><STRONG><a name="[3]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[282]"></a>NWK_Pack_RxAnalyze_S</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, nwkmodbus.o(i.NWK_Pack_RxAnalyze_S))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = NWK_Pack_RxAnalyze_S &rArr; NWK_Pack_Rx_S &rArr; SysDevData_Save &rArr; SysDevData_Update &rArr; WriteData_FRAM &rArr; WriteData_FRAM_UnSafe &rArr; ReadData_FRAM_UnSafe &rArr; FRAM_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc_16_modbus
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NWK_Pack_Rx_S
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NWK_Pack_RxServer_S
</UL>

<P><STRONG><a name="[82]"></a>NWK_Pack_RxServer_S</STRONG> (Thumb, 282 bytes, Stack size 24 bytes, nwkmodbus.o(i.NWK_Pack_RxServer_S))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = NWK_Pack_RxServer_S &rArr; NWK_Pack_RxAnalyze_S &rArr; NWK_Pack_Rx_S &rArr; SysDevData_Save &rArr; SysDevData_Update &rArr; WriteData_FRAM &rArr; WriteData_FRAM_UnSafe &rArr; ReadData_FRAM_UnSafe &rArr; FRAM_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NWK_Pack_RxAnalyze_S
</UL>
<BR>[Address Reference Count : 1]<UL><LI> com_server.o(i.UART_TO_NWK_CCB_Init_S)
</UL>
<P><STRONG><a name="[284]"></a>NWK_Pack_Rx_S</STRONG> (Thumb, 496 bytes, Stack size 48 bytes, nwkmodbus.o(i.NWK_Pack_Rx_S))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = NWK_Pack_Rx_S &rArr; SysDevData_Save &rArr; SysDevData_Update &rArr; WriteData_FRAM &rArr; WriteData_FRAM_UnSafe &rArr; ReadData_FRAM_UnSafe &rArr; FRAM_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexWait
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelSysTick
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysDevData_Save
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strrchr
</UL>
<BR>[Called By]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NWK_Pack_RxAnalyze_S
</UL>

<P><STRONG><a name="[286]"></a>NWK_Pack_S</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, nwkmodbus.o(i.NWK_Pack_S))
<BR><BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NWK_Pack_TxServer_S
</UL>

<P><STRONG><a name="[285]"></a>NWK_Pack_TxServer_S</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, nwkmodbus.o(i.NWK_Pack_TxServer_S))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = NWK_Pack_TxServer_S &rArr; xQueueGenericReceive &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NWK_Pack_S
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task07_F
</UL>

<P><STRONG><a name="[186]"></a>NWK_Send_Code_QInput</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, clientapp.o(i.NWK_Send_Code_QInput))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = NWK_Send_Code_QInput &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexWait
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClientCH1_QueueSend
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task08_F
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY1000_Pack_Rx_S
</UL>

<P><STRONG><a name="[1aa]"></a>PCF8563_Read</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, pcf8563.o(i.PCF8563_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = PCF8563_Read &rArr; PCF8563_Read_DEV &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTimeTick
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCF8563_Read_DEV
</UL>
<BR>[Called By]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerStateRecord_Update
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task01_F
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY2000_Pack_60
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY2000_Pack_55
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY2000_Pack_50
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY188_Pack_0X04_S
</UL>

<P><STRONG><a name="[287]"></a>PCF8563_Read_DEV</STRONG> (Thumb, 296 bytes, Stack size 40 bytes, pcf8563.o(i.PCF8563_Read_DEV))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = PCF8563_Read_DEV &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BcdToHex
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCF8563_Read
</UL>

<P><STRONG><a name="[192]"></a>PCF8563_Set</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, pcf8563.o(i.PCF8563_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = PCF8563_Set &rArr; PCF8563_Set_DEV &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTimeTick
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCF8563_Set_DEV
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY1000_Pack_Rx_S
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updatetime
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_1_3_4
</UL>

<P><STRONG><a name="[288]"></a>PCF8563_Set_DEV</STRONG> (Thumb, 264 bytes, Stack size 40 bytes, pcf8563.o(i.PCF8563_Set_DEV))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = PCF8563_Set_DEV &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HexToBcd
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCF8563_Set
</UL>

<P><STRONG><a name="[37d]"></a>PowerRelay_Init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, powerrelay.o(i.PowerRelay_Init))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[194]"></a>PowerRelay_SET</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, powerrelay.o(i.PowerRelay_SET))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task01_F
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY1000_Pack_Rx_S
</UL>

<P><STRONG><a name="[289]"></a>PowerStateRecord_Init</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, syspara.o(i.PowerStateRecord_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = PowerStateRecord_Init &rArr; ReadData_FRAM &rArr; ReadData_FRAM_UnSafe &rArr; FRAM_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadData_FRAM
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[28b]"></a>PowerStateRecord_Update</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, syspara.o(i.PowerStateRecord_Update))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = PowerStateRecord_Update &rArr; WriteData_FRAM &rArr; WriteData_FRAM_UnSafe &rArr; ReadData_FRAM_UnSafe &rArr; FRAM_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteData_FRAM
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCF8563_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3d1]"></a>PulseCtrl_Executing</STRONG> (Thumb, 278 bytes, Stack size 8 bytes, pulse.o(i.PulseCtrl_Executing))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PulseCtrl_Executing
</UL>
<BR>[Called By]<UL><LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationIdleHook
</UL>

<P><STRONG><a name="[385]"></a>PulseLeaguer_Enalbe</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, pulse.o(i.PulseLeaguer_Enalbe))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[188]"></a>PulseLeaguer_SET</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, pulse.o(i.PulseLeaguer_SET))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PulseLeaguer_SET
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task03_F
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task02_F
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY1000_Pack_Rx_S
</UL>

<P><STRONG><a name="[384]"></a>Pulse_Create</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, pulse.o(i.Pulse_Create))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[24f]"></a>PutData8</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, uc1698.o(i.PutData8))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PutData8
</UL>
<BR>[Calls]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Write
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadOutputData
</UL>
<BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteOneByte
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteCmd
</UL>

<P><STRONG><a name="[28a]"></a>ReadData_FRAM</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, fram.o(i.ReadData_FRAM))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = ReadData_FRAM &rArr; ReadData_FRAM_UnSafe &rArr; FRAM_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexWait
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadData_FRAM_UnSafe
</UL>
<BR>[Called By]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerStateRecord_Init
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysDevData_Read
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserData_Read
</UL>

<P><STRONG><a name="[291]"></a>ReadData_SPIFlash</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, w25qxx.o(i.ReadData_SPIFlash))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = ReadData_SPIFlash &rArr; ReadData_SPIFlash_UnSafe &rArr; W25QXX_ReadBuffer &rArr; SPI1_ReadWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexWait
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadData_SPIFlash_UnSafe
</UL>
<BR>[Called By]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysUserList_Init
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysPara_Init
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysDeviceList_Init
</UL>

<P><STRONG><a name="[155]"></a>Refresh_Screen</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, uc1698.o(i.Refresh_Screen))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Refresh_Screen &rArr; Update_LcdRAM_ALL &rArr; LCD_WriteOneByte &rArr; PutData8
</UL>
<BR>[Calls]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update_VisionBuf_TO_LcdRAM
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update_LcdRAM_ALL
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task04_F
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Open
</UL>

<P><STRONG><a name="[299]"></a>SDIO_Cfg</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, m4_sdio.o(i.SDIO_Cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = SDIO_Cfg &rArr; MX_SDIO_SD_Init &rArr; HAL_SD_ConfigWideBusOperation &rArr; SD_WideBus_Enable &rArr; SD_FindSCR &rArr; SDMMC_CmdBlockLength &rArr; SDMMC_GetCmdResp1 &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_DMA_Init
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SDIO_SD_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveLog
</UL>

<P><STRONG><a name="[1fd]"></a>SDIO_ConfigData</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, stm32f4xx_ll_sdmmc.o(i.SDIO_ConfigData))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SDIO_ConfigData
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_WriteBlocks_DMA
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ReadBlocks_DMA
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_FindSCR
</UL>

<P><STRONG><a name="[29a]"></a>SDIO_DMA_Init</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, m4_sdio.o(i.SDIO_DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SDIO_DMA_Init &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_Cfg
</UL>

<P><STRONG><a name="[2ad]"></a>SDIO_GetCommandResponse</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_ll_sdmmc.o(i.SDIO_GetCommandResponse))
<BR><BR>[Called By]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp6
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp1
</UL>

<P><STRONG><a name="[2b2]"></a>SDIO_GetPowerState</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_ll_sdmmc.o(i.SDIO_GetPowerState))
<BR><BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitCard
</UL>

<P><STRONG><a name="[2ae]"></a>SDIO_GetResponse</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stm32f4xx_ll_sdmmc.o(i.SDIO_GetResponse))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SDIO_GetResponse
</UL>
<BR>[Called By]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp6
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp1
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WideBus_Enable
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WideBus_Disable
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendStatus
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitCard
</UL>

<P><STRONG><a name="[3d]"></a>SDIO_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, m4_sdio.o(i.SDIO_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = SDIO_IRQHandler &rArr; HAL_SD_IRQHandler &rArr; SD_DMATxAbort &rArr; HAL_SD_GetCardState &rArr; SD_SendStatus &rArr; SDMMC_CmdSendStatus &rArr; SDMMC_GetCmdResp1 &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[1ec]"></a>SDIO_Init</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, stm32f4xx_ll_sdmmc.o(i.SDIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SDIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_InitCard
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ConfigWideBusOperation
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitCard
</UL>

<P><STRONG><a name="[1f9]"></a>SDIO_PowerState_ON</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_ll_sdmmc.o(i.SDIO_PowerState_ON))
<BR><BR>[Called By]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_InitCard
</UL>

<P><STRONG><a name="[2b0]"></a>SDIO_ReadFIFO</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_ll_sdmmc.o(i.SDIO_ReadFIFO))
<BR><BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Read_IT
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_FindSCR
</UL>

<P><STRONG><a name="[29c]"></a>SDIO_SendCommand</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, stm32f4xx_ll_sdmmc.o(i.SDIO_SendCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SDIO_SendCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdWriteSingleBlock
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdWriteMultiBlock
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdStopTransfer
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSetRelAdd
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSendStatus
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSendSCR
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSendCSD
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSendCID
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSelDesel
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdReadSingleBlock
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdReadMultiBlock
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdOperCond
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdGoIdleState
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdBusWidth
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdBlockLength
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdAppOperCommand
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdAppCommand
</UL>

<P><STRONG><a name="[2b4]"></a>SDIO_WriteFIFO</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_ll_sdmmc.o(i.SDIO_WriteFIFO))
<BR><BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Write_IT
</UL>

<P><STRONG><a name="[29b]"></a>SDMMC_CmdAppCommand</STRONG> (Thumb, 58 bytes, Stack size 40 bytes, stm32f4xx_ll_sdmmc.o(i.SDMMC_CmdAppCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SDMMC_CmdAppCommand &rArr; SDMMC_GetCmdResp1 &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp1
</UL>
<BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WideBus_Enable
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WideBus_Disable
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_FindSCR
</UL>

<P><STRONG><a name="[29e]"></a>SDMMC_CmdAppOperCommand</STRONG> (Thumb, 56 bytes, Stack size 40 bytes, stm32f4xx_ll_sdmmc.o(i.SDMMC_CmdAppOperCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SDMMC_CmdAppOperCommand &rArr; SDIO_SendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp3
</UL>
<BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
</UL>

<P><STRONG><a name="[1fe]"></a>SDMMC_CmdBlockLength</STRONG> (Thumb, 58 bytes, Stack size 40 bytes, stm32f4xx_ll_sdmmc.o(i.SDMMC_CmdBlockLength))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SDMMC_CmdBlockLength &rArr; SDMMC_GetCmdResp1 &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp1
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_WriteBlocks_DMA
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ReadBlocks_DMA
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_FindSCR
</UL>

<P><STRONG><a name="[2a0]"></a>SDMMC_CmdBusWidth</STRONG> (Thumb, 58 bytes, Stack size 40 bytes, stm32f4xx_ll_sdmmc.o(i.SDMMC_CmdBusWidth))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SDMMC_CmdBusWidth &rArr; SDMMC_GetCmdResp1 &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp1
</UL>
<BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WideBus_Enable
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WideBus_Disable
</UL>

<P><STRONG><a name="[2a1]"></a>SDMMC_CmdGoIdleState</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, stm32f4xx_ll_sdmmc.o(i.SDMMC_CmdGoIdleState))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SDMMC_CmdGoIdleState &rArr; SDIO_SendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdError
</UL>
<BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
</UL>

<P><STRONG><a name="[2a3]"></a>SDMMC_CmdOperCond</STRONG> (Thumb, 54 bytes, Stack size 32 bytes, stm32f4xx_ll_sdmmc.o(i.SDMMC_CmdOperCond))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SDMMC_CmdOperCond &rArr; SDIO_SendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp7
</UL>
<BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
</UL>

<P><STRONG><a name="[1ff]"></a>SDMMC_CmdReadMultiBlock</STRONG> (Thumb, 58 bytes, Stack size 40 bytes, stm32f4xx_ll_sdmmc.o(i.SDMMC_CmdReadMultiBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SDMMC_CmdReadMultiBlock &rArr; SDMMC_GetCmdResp1 &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp1
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ReadBlocks_DMA
</UL>

<P><STRONG><a name="[200]"></a>SDMMC_CmdReadSingleBlock</STRONG> (Thumb, 58 bytes, Stack size 40 bytes, stm32f4xx_ll_sdmmc.o(i.SDMMC_CmdReadSingleBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SDMMC_CmdReadSingleBlock &rArr; SDMMC_GetCmdResp1 &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp1
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ReadBlocks_DMA
</UL>

<P><STRONG><a name="[2a5]"></a>SDMMC_CmdSelDesel</STRONG> (Thumb, 60 bytes, Stack size 40 bytes, stm32f4xx_ll_sdmmc.o(i.SDMMC_CmdSelDesel))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SDMMC_CmdSelDesel &rArr; SDMMC_GetCmdResp1 &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp1
</UL>
<BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitCard
</UL>

<P><STRONG><a name="[2a6]"></a>SDMMC_CmdSendCID</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, stm32f4xx_ll_sdmmc.o(i.SDMMC_CmdSendCID))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SDMMC_CmdSendCID &rArr; SDIO_SendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp2
</UL>
<BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitCard
</UL>

<P><STRONG><a name="[2a8]"></a>SDMMC_CmdSendCSD</STRONG> (Thumb, 52 bytes, Stack size 40 bytes, stm32f4xx_ll_sdmmc.o(i.SDMMC_CmdSendCSD))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SDMMC_CmdSendCSD &rArr; SDIO_SendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp2
</UL>
<BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitCard
</UL>

<P><STRONG><a name="[2a9]"></a>SDMMC_CmdSendSCR</STRONG> (Thumb, 58 bytes, Stack size 32 bytes, stm32f4xx_ll_sdmmc.o(i.SDMMC_CmdSendSCR))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SDMMC_CmdSendSCR &rArr; SDMMC_GetCmdResp1 &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp1
</UL>
<BR>[Called By]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_FindSCR
</UL>

<P><STRONG><a name="[2aa]"></a>SDMMC_CmdSendStatus</STRONG> (Thumb, 58 bytes, Stack size 40 bytes, stm32f4xx_ll_sdmmc.o(i.SDMMC_CmdSendStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SDMMC_CmdSendStatus &rArr; SDMMC_GetCmdResp1 &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp1
</UL>
<BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendStatus
</UL>

<P><STRONG><a name="[2ab]"></a>SDMMC_CmdSetRelAdd</STRONG> (Thumb, 58 bytes, Stack size 40 bytes, stm32f4xx_ll_sdmmc.o(i.SDMMC_CmdSetRelAdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SDMMC_CmdSetRelAdd &rArr; SDMMC_GetCmdResp6 &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp6
</UL>
<BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitCard
</UL>

<P><STRONG><a name="[1ef]"></a>SDMMC_CmdStopTransfer</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, stm32f4xx_ll_sdmmc.o(i.SDMMC_CmdStopTransfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SDMMC_CmdStopTransfer &rArr; SDMMC_GetCmdResp1 &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp1
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_IRQHandler
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DMATxAbort
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DMARxAbort
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DMAReceiveCplt
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DMAError
</UL>

<P><STRONG><a name="[201]"></a>SDMMC_CmdWriteMultiBlock</STRONG> (Thumb, 58 bytes, Stack size 40 bytes, stm32f4xx_ll_sdmmc.o(i.SDMMC_CmdWriteMultiBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SDMMC_CmdWriteMultiBlock &rArr; SDMMC_GetCmdResp1 &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp1
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_WriteBlocks_DMA
</UL>

<P><STRONG><a name="[202]"></a>SDMMC_CmdWriteSingleBlock</STRONG> (Thumb, 58 bytes, Stack size 40 bytes, stm32f4xx_ll_sdmmc.o(i.SDMMC_CmdWriteSingleBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SDMMC_CmdWriteSingleBlock &rArr; SDMMC_GetCmdResp1 &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp1
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_WriteBlocks_DMA
</UL>

<P><STRONG><a name="[2b1]"></a>SD_GetCardInfo</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, m4_sdio.o(i.SD_GetCardInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SD_GetCardInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_GetCardInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkCard
</UL>

<P><STRONG><a name="[9b]"></a>SD_initialize</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, sd_diskio.o(i.SD_initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = SD_initialize &rArr; BSP_SD_Init &rArr; HAL_SD_ConfigWideBusOperation &rArr; SD_WideBus_Enable &rArr; SD_FindSCR &rArr; SDMMC_CmdBlockLength &rArr; SDMMC_GetCmdResp1 &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sd_diskio.o(.constdata)
</UL>
<P><STRONG><a name="[9f]"></a>SD_ioctl</STRONG> (Thumb, 100 bytes, Stack size 56 bytes, sd_diskio.o(i.SD_ioctl))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SD_ioctl &rArr; BSP_SD_GetCardInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_GetCardInfo
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sd_diskio.o(.constdata)
</UL>
<P><STRONG><a name="[9d]"></a>SD_read</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, sd_diskio.o(i.SD_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = SD_read &rArr; BSP_SD_ReadBlocks_DMA &rArr; HAL_SD_ReadBlocks_DMA &rArr; SDMMC_CmdReadSingleBlock &rArr; SDMMC_GetCmdResp1 &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_ReadBlocks_DMA
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_GetCardState
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sd_diskio.o(.constdata)
</UL>
<P><STRONG><a name="[9c]"></a>SD_status</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, sd_diskio.o(i.SD_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = SD_status &rArr; BSP_SD_GetCardState &rArr; HAL_SD_GetCardState &rArr; SD_SendStatus &rArr; SDMMC_CmdSendStatus &rArr; SDMMC_GetCmdResp1 &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_GetCardState
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sd_diskio.o(.constdata)
</UL>
<P><STRONG><a name="[9e]"></a>SD_write</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, sd_diskio.o(i.SD_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = SD_write &rArr; BSP_SD_WriteBlocks_DMA &rArr; HAL_SD_WriteBlocks_DMA &rArr; SDMMC_CmdWriteSingleBlock &rArr; SDMMC_GetCmdResp1 &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_WriteBlocks_DMA
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_GetCardState
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sd_diskio.o(.constdata)
</UL>
<P><STRONG><a name="[2b5]"></a>SP706_Cfg</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, sp706.o(i.SP706_Cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SP706_Cfg &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2b6]"></a>SPI1_ReadWriteByte</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, m4_spi1.o(i.SPI1_ReadWriteByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = SPI1_ReadWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_ReadID
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Init
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Write_Enable
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_ReadSR
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_ReadBuffer
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_PageWrite
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Erase_Sector
</UL>

<P><STRONG><a name="[308]"></a>SPI1_SetSpeed</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, m4_spi1.o(i.SPI1_SetSpeed))
<BR><BR>[Called By]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Init
</UL>

<P><STRONG><a name="[fb]"></a>SUMCheck_Check</STRONG> (Thumb, 48 bytes, Stack size 20 bytes, com_server.o(i.SUMCheck_Check))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SUMCheck_Check
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY1000_Pack_RxAnalyze_S
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDF2_Pack_RxAnalyze_S
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BRC188_Pack_RxAnalyze_S
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT2X188_Pack_RxAnalyze_S
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XY188_Pack_RxAnalyze_S
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY2000_Pack_RxAnalyze_S
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY188_Pack_RxAnalyze_S
</UL>

<P><STRONG><a name="[f9]"></a>SUMCheck_Input</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, com_server.o(i.SUMCheck_Input))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SUMCheck_Input
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY1000_Pack_0XFE
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY1000_Pack_0XBF
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY1000_Pack_0XBE
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY1000_Pack_0XBC
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY1000_Pack_0XB0_F
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY1000_Pack_0XB0_A5
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY1000_Pack_0XB0_A4
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY1000_Pack_0XB0_A3
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY1000_Pack_0XB0_A2
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY1000_Pack_0XB0_A1
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY1000_Pack_0X40
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY1000_Pack_0X1A
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY1000_Pack_0X18
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY1000_Pack_0X16
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY1000_Pack_0X14
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY1000_Pack_0X11
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY1000_Pack_0X0E
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY1000_Pack_0X0C
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY1000_Pack_0X0A
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY1000_Pack_0X08
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY1000_Pack_0X06
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY1000_Pack_0X04
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY1000_Pack_0X02_N
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY1000_Pack_0X02_F
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY1000_Pack_0X02_A5
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY1000_Pack_0X02_A4
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY1000_Pack_0X02_A3
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY1000_Pack_0X02_A2
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY1000_Pack_0X02_A1
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDF2_Pack_0X03_S
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDF2_Pack_0X01_S
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BRC188_Pack_0X01_S
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT2X188_Pack_0X01_S
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XY188_Pack_0X01_S
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY2000_Pack_61
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY2000_Pack_60
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY2000_Pack_59
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY2000_Pack_55
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY2000_Pack_54
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY2000_Pack_53
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY2000_Pack_52
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY2000_Pack_51
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY2000_Pack_50
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY188_Pack_0X04_S
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY188_Pack_0X01_S
</UL>

<P><STRONG><a name="[2b7]"></a>SaveDeviceInfo</STRONG> (Thumb, 2118 bytes, Stack size 664 bytes, serialization.o(i.SaveDeviceInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 1632<LI>Call Chain = SaveDeviceInfo &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexWait
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelSysTick
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BcdToHex4
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateFileName
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSDCard
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisSDCard
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strrchr
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveLog
</UL>

<P><STRONG><a name="[f5]"></a>SaveLog</STRONG> (Thumb, 1220 bytes, Stack size 24 bytes, serialization.o(i.SaveLog))
<BR><BR>[Stack]<UL><LI>Max Depth = 1656<LI>Call Chain = SaveLog &rArr; SaveDeviceInfo &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexWait
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelSysTick
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveDeviceInfo
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_Cfg
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strrchr
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Alarm_DataSave_CallBack
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saveData
</UL>

<P><STRONG><a name="[2be]"></a>SerialDownload</STRONG> (Thumb, 474 bytes, Stack size 24 bytes, download.o(i.SerialDownload))
<BR><BR>[Stack]<UL><LI>Max Depth = 1360<LI>Call Chain = SerialDownload &rArr; Ymodem_Receive &rArr; spiFlashWrite &rArr; W25QXX_SectorWrite &rArr; W25QXX_PageWrite &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR &rArr; SPI1_ReadWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;feedIWDG
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexWait
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiFlashErase
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Int2Str
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ymodem_Receive
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;down_env_data
</UL>

<P><STRONG><a name="[316]"></a>Str2Int</STRONG> (Thumb, 260 bytes, Stack size 16 bytes, common.o(i.Str2Int))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Str2Int
</UL>
<BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ymodem_Receive
</UL>

<P><STRONG><a name="[2c2]"></a>SysBeep_Cfg</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, beep.o(i.SysBeep_Cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SysBeep_Cfg &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2c3]"></a>SysDevData_InitALL</STRONG> (Thumb, 78 bytes, Stack size 72 bytes, devpara.o(i.SysDevData_InitALL))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = SysDevData_InitALL &rArr; SysDevData_Read &rArr; ReadData_FRAM &rArr; ReadData_FRAM_UnSafe &rArr; FRAM_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysDevData_Read
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2c4]"></a>SysDevData_Read</STRONG> (Thumb, 78 bytes, Stack size 80 bytes, devpara.o(i.SysDevData_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = SysDevData_Read &rArr; ReadData_FRAM &rArr; ReadData_FRAM_UnSafe &rArr; FRAM_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadData_FRAM
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysDevData_InitALL
</UL>

<P><STRONG><a name="[278]"></a>SysDevData_ResetALL</STRONG> (Thumb, 834 bytes, Stack size 320 bytes, devpara.o(i.SysDevData_ResetALL))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = SysDevData_ResetALL &rArr; SysDevData_Update &rArr; WriteData_FRAM &rArr; WriteData_FRAM_UnSafe &rArr; ReadData_FRAM_UnSafe &rArr; FRAM_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysDevData_Update
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysdataresetall
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;devicedatareset
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_1_3_6
</UL>

<P><STRONG><a name="[101]"></a>SysDevData_Save</STRONG> (Thumb, 54 bytes, Stack size 72 bytes, devpara.o(i.SysDevData_Save))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = SysDevData_Save &rArr; SysDevData_Update &rArr; WriteData_FRAM &rArr; WriteData_FRAM_UnSafe &rArr; ReadData_FRAM_UnSafe &rArr; FRAM_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysDevData_Update
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY1000_Pack_Rx_S
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDF2_Pack_Rx_S
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BRC188_Pack_Rx_S
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT2X188_Pack_Rx_S
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XY188_Pack_Rx_S
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HZCRL_Pack_Rx_S
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY2000_Pack_Rx_S
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY188_Pack_Rx_S
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NWK_Pack_Rx_S
</UL>

<P><STRONG><a name="[2c5]"></a>SysDevData_Update</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, devpara.o(i.SysDevData_Update))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = SysDevData_Update &rArr; WriteData_FRAM &rArr; WriteData_FRAM_UnSafe &rArr; ReadData_FRAM_UnSafe &rArr; FRAM_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteData_FRAM
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysDevData_Save
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysDevData_ResetALL
</UL>

<P><STRONG><a name="[2c6]"></a>SysDeviceList_Init</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, devpara.o(i.SysDeviceList_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = SysDeviceList_Init &rArr; ReadData_SPIFlash &rArr; ReadData_SPIFlash_UnSafe &rArr; W25QXX_ReadBuffer &rArr; SPI1_ReadWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadData_SPIFlash
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[279]"></a>SysDeviceList_Reset</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, devpara.o(i.SysDeviceList_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = SysDeviceList_Reset &rArr; SysDeviceList_Update &rArr; WriteData_SPIFlash &rArr; WriteData_SPIFlash_UnSafe &rArr; W25QXX_WriteBuffer &rArr; W25QXX_SectorWrite &rArr; W25QXX_PageWrite &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR &rArr; SPI1_ReadWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysDeviceList_Update
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysdataresetall
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deviceparareset
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_1_3_6
</UL>

<P><STRONG><a name="[2c7]"></a>SysDeviceList_Update</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, devpara.o(i.SysDeviceList_Update))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = SysDeviceList_Update &rArr; WriteData_SPIFlash &rArr; WriteData_SPIFlash_UnSafe &rArr; W25QXX_WriteBuffer &rArr; W25QXX_SectorWrite &rArr; W25QXX_PageWrite &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR &rArr; SPI1_ReadWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteData_SPIFlash
</UL>
<BR>[Called By]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysDeviceList_Reset
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;devchange
</UL>

<P><STRONG><a name="[2c9]"></a>SysLed_Cfg</STRONG> (Thumb, 386 bytes, Stack size 32 bytes, led.o(i.SysLed_Cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SysLed_Cfg &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2ca]"></a>SysPara_Init</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, syspara.o(i.SysPara_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = SysPara_Init &rArr; ReadData_SPIFlash &rArr; ReadData_SPIFlash_UnSafe &rArr; W25QXX_ReadBuffer &rArr; SPI1_ReadWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadData_SPIFlash
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[275]"></a>SysPara_Reset</STRONG> (Thumb, 238 bytes, Stack size 8 bytes, syspara.o(i.SysPara_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = SysPara_Reset &rArr; SysPara_Update &rArr; WriteData_SPIFlash &rArr; WriteData_SPIFlash_UnSafe &rArr; W25QXX_WriteBuffer &rArr; W25QXX_SectorWrite &rArr; W25QXX_PageWrite &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR &rArr; SPI1_ReadWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysPara_Update
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systemparareset
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysdataresetall
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_1_3_6
</UL>

<P><STRONG><a name="[195]"></a>SysPara_Update</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, syspara.o(i.SysPara_Update))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = SysPara_Update &rArr; WriteData_SPIFlash &rArr; WriteData_SPIFlash_UnSafe &rArr; W25QXX_WriteBuffer &rArr; W25QXX_SectorWrite &rArr; W25QXX_PageWrite &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR &rArr; SPI1_ReadWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteData_SPIFlash
</UL>
<BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysPara_Reset
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task01_F
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY1000_Pack_Rx_S
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updatetimes
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updatetimef
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setsystype
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setsn
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setshare
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setsend
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setread
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Updatedebug
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setServerIP
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_1_3_7
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_1_3_5
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_1_3_4
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_1_3_1
</UL>

<P><STRONG><a name="[b]"></a>SysTick_Handler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32f4xx_it.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SysTick_Handler &rArr; osSystickHandler &rArr; xPortSysTickHandler &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSystickHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[2cc]"></a>SysUserList_Init</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, userpara.o(i.SysUserList_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = SysUserList_Init &rArr; ReadData_SPIFlash &rArr; ReadData_SPIFlash_UnSafe &rArr; W25QXX_ReadBuffer &rArr; SPI1_ReadWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadData_SPIFlash
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[276]"></a>SysUserList_Reset</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, userpara.o(i.SysUserList_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = SysUserList_Reset &rArr; SysUserList_Update &rArr; WriteData_SPIFlash &rArr; WriteData_SPIFlash_UnSafe &rArr; W25QXX_WriteBuffer &rArr; W25QXX_SectorWrite &rArr; W25QXX_PageWrite &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR &rArr; SPI1_ReadWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysUserList_Update
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userparareset
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysdataresetall
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_1_3_6
</UL>

<P><STRONG><a name="[2cd]"></a>SysUserList_Update</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, userpara.o(i.SysUserList_Update))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = SysUserList_Update &rArr; WriteData_SPIFlash &rArr; WriteData_SPIFlash_UnSafe &rArr; W25QXX_WriteBuffer &rArr; W25QXX_SectorWrite &rArr; W25QXX_PageWrite &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR &rArr; SPI1_ReadWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteData_SPIFlash
</UL>
<BR>[Called By]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysUserList_Reset
</UL>

<P><STRONG><a name="[2ce]"></a>SystemClock_Config</STRONG> (Thumb, 196 bytes, Stack size 80 bytes, stm32f4xx_hal_msp.o(i.SystemClock_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = SystemClock_Config &rArr; HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_CLKSourceConfig
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f6]"></a>SystemEnergyValue_Cal</STRONG> (Thumb, 504 bytes, Stack size 20 bytes, calculate.o(i.SystemEnergyValue_Cal))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SystemEnergyValue_Cal
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Alarm_UserShare_CallBack
</UL>

<P><STRONG><a name="[5b]"></a>SystemInit</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, system_stm32f4xx.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(.text)
</UL>
<P><STRONG><a name="[29]"></a>TIM3_IRQHandler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, stm32f4xx_it.o(i.TIM3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TIM3_IRQHandler &rArr; HAL_TIM_IRQHandler &rArr; HAL_TIM_PeriodElapsedCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeRTOSRunTimeTicksUp
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[120]"></a>TIM3_Init</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, stm32f4xx_hal_timebase_tim.o(i.TIM3_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TIM3_Init &rArr; HAL_TIM_Base_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Start_IT
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigureTimeForRunTimeStats
</UL>

<P><STRONG><a name="[20b]"></a>TIM_Base_SetConfig</STRONG> (Thumb, 184 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.TIM_Base_SetConfig))
<BR><BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[8b]"></a>Task01_F</STRONG> (Thumb, 466 bytes, Stack size 16 bytes, main.o(i.Task01_F))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = Task01_F &rArr; SysPara_Update &rArr; WriteData_SPIFlash &rArr; WriteData_SPIFlash_UnSafe &rArr; W25QXX_WriteBuffer &rArr; W25QXX_SectorWrite &rArr; W25QXX_PageWrite &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR &rArr; SPI1_ReadWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_TogglePin
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;feedIWDG
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createIWDG
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpDateSysDevStatusErr
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysPara_Update
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerRelay_SET
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCF8563_Read
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDev_ComStatus
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateProvideTimeServer
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AlarmClk_ExecutServer
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexWait
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelSysTick
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strrchr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[8c]"></a>Task02_F</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, main.o(i.Task02_F))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = Task02_F &rArr; createIWDG &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;feedIWDG
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createIWDG
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PulseLeaguer_SET
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[8d]"></a>Task03_F</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, main.o(i.Task03_F))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = Task03_F &rArr; Menu_KeyManager &rArr; Menu_1_3_6 &rArr; SysDevData_ResetALL &rArr; SysDevData_Update &rArr; WriteData_FRAM &rArr; WriteData_FRAM_UnSafe &rArr; ReadData_FRAM_UnSafe &rArr; FRAM_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PulseLeaguer_SET
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_KeyManager
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyboardApp_Init
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IndepKEYFunction_Init
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerStart
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerCreate
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[8e]"></a>Task04_F</STRONG> (Thumb, 84 bytes, Stack size 0 bytes, main.o(i.Task04_F))
<BR><BR>[Stack]<UL><LI>Max Depth = 540<LI>Call Chain = Task04_F &rArr; DisplayManager &rArr; Disp_1_1_2C &rArr; DispStringM &rArr; DispArray
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Refresh_Screen
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Init
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_REST
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_IOInit
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetbuildMeterMessage
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayManager
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_VisionBUF
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[8f]"></a>Task05_F</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, main.o(i.Task05_F))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = Task05_F &rArr; createIWDG &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;feedIWDG
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createIWDG
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RBC_RXServer
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[90]"></a>Task06_F</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, main.o(i.Task06_F))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = Task06_F &rArr; createIWDG &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;feedIWDG
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createIWDG
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RBC_TXServer
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[91]"></a>Task07_F</STRONG> (Thumb, 298 bytes, Stack size 88 bytes, main.o(i.Task07_F))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = Task07_F &rArr; FY188_Pack_TxServer_S &rArr; FY188_Pack_0X04_S &rArr; PCF8563_Read &rArr; PCF8563_Read_DEV &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;feedIWDG
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createIWDG
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XY188_Pack_TxServer_S
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NWK_Pack_TxServer_S
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HZCRL_Pack_TxServer_S
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT2X188_Pack_TxServer_S
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY_1000Send_Code_QInput
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY2000_Pack_TxServer_S
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY188_Pack_TxServer_S
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY1000_Pack_TxServer_S
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDF2_Pack_TxServer_S
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BRC188_Pack_TxServer_S
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexWait
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelSysTick
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strrchr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[92]"></a>Task08_F</STRONG> (Thumb, 7124 bytes, Stack size 712 bytes, main.o(i.Task08_F))
<BR><BR>[Stack]<UL><LI>Max Depth = 856<LI>Call Chain = Task08_F &rArr; createIWDG &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;feedIWDG
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createIWDG
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XY_188Send_Code_QInput
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TO_XY188_CCB_QueueSend
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TO_NWK_CCB_QueueSend
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TO_HZCRL_CCB_QueueSend
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TO_HT2X188_CCB_QueueSend
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TO_FY2000_CCB_QueueSend
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TO_FY188_CCB_QueueSend
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TO_DDF2_CCB_QueueSend
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TO_BRC188_CCB_QueueSend
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NWK_Send_Code_QInput
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HZCRL_188Send_Code_QInput
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT2X_188Send_Code_QInput
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY_2000Send_Code_QInput
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY_188Send_Code_QInput
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDF2_Send_Code_QInput
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BRC_188Send_Code_QInput
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxQueueSpacesAvailable
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexWait
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelSysTick
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strrchr
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[93]"></a>Task09_F</STRONG> (Thumb, 9748 bytes, Stack size 120 bytes, main.o(i.Task09_F))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = Task09_F &rArr; FY_1000Send_Code_QInput &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;feedIWDG
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createIWDG
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY_1000Send_Code_QInput
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexWait
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelSysTick
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strrchr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[94]"></a>Task10_F</STRONG> (Thumb, 82 bytes, Stack size 88 bytes, main.o(i.Task10_F))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = Task10_F &rArr; HbMainTask &rArr; setServerIP &rArr; SysPara_Update &rArr; WriteData_SPIFlash &rArr; WriteData_SPIFlash_UnSafe &rArr; W25QXX_WriteBuffer &rArr; W25QXX_SectorWrite &rArr; W25QXX_PageWrite &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR &rArr; SPI1_ReadWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;feedIWDG
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createIWDG
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HbMainTask
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HbInit
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY_2000Send_Code_QInput
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[96]"></a>Task12_F</STRONG> (Thumb, 430 bytes, Stack size 24 bytes, main.o(i.Task12_F))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = Task12_F &rArr; UserData_Save &rArr; UserData_Update &rArr; WriteData_FRAM &rArr; WriteData_FRAM_UnSafe &rArr; ReadData_FRAM_UnSafe &rArr; FRAM_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserData_Save
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AlarmClk_ParaSet
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AlarmClk_EnableCtrl
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AlarmClk_CreatOne
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexWait
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelSysTick
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strrchr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[97]"></a>Task13_F</STRONG> (Thumb, 4340 bytes, Stack size 112 bytes, main.o(i.Task13_F))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = Task13_F &rArr; FY_1000Send_Code_QInput &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY_1000Send_Code_QInput
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexWait
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelSysTick
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strrchr
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[95]"></a>TaskCli</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, main.o(i.TaskCli))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = TaskCli &rArr; cli_main &rArr; get_input &rArr; tab_complete &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_main
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadTerminate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[a0]"></a>Timer01Callback</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, main.o(i.Timer01Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Timer01Callback &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IndepKEY_ScanServer
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata)
</UL>
<P><STRONG><a name="[2e9]"></a>UART1_Cfg</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, m4_uart1.o(i.UART1_Cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = UART1_Cfg &rArr; MX_USART1_UART_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_UART3_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_DMA
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_DMA_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2ea]"></a>UART2_Cfg</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, m4_uart2.o(i.UART2_Cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = UART2_Cfg &rArr; MX_USART2_UART_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_UART3_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_DMA
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART2_UART_Init
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART2_DMA_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[eb]"></a>UART2_Transmit</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, m4_uart2.o(i.UART2_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = UART2_Transmit &rArr; HAL_UART_Transmit_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit_DMA
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_TO_UART2_TXServer
</UL>

<P><STRONG><a name="[2eb]"></a>UART3_Cfg</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, m4_uart3.o(i.UART3_Cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = UART3_Cfg &rArr; MX_USART3_UART_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_UART3_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_DMA
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART3_UART_Init
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART3_DMA_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ec]"></a>UART3_Transmit</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, m4_uart3.o(i.UART3_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = UART3_Transmit &rArr; HAL_UART_Transmit_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit_DMA
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_TO_UART3_TXServer
</UL>

<P><STRONG><a name="[2fe]"></a>UART_RBC_BufferInput</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, uart_rbc.o(i.UART_RBC_BufferInput))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_RBC_BufferInput
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
</UL>

<P><STRONG><a name="[37c]"></a>UART_RBC_ControlerInit</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, uart_rbc.o(i.UART_RBC_ControlerInit))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2f1]"></a>UART_RBC_Creat</STRONG> (Thumb, 320 bytes, Stack size 28 bytes, uart_rbc.o(i.UART_RBC_Creat))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = UART_RBC_Creat
</UL>
<BR>[Called By]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TO_XY188_CCB_Init_S
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TO_NWK_CCB_Init_S
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TO_HZCRL_CCB_Init_S
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TO_HT2X188_CCB_Init_S
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TO_FY2000_CCB_Init_S
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TO_FY188_CCB_Init_S
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TO_FY1000_CCB_Init_S
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TO_DDF2_CCB_Init_S
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TO_BRC188_CCB_Init_S
</UL>

<P><STRONG><a name="[2f4]"></a>UART_RBC_Enable</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, uart_rbc.o(i.UART_RBC_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TO_XY188_CCB_Init_S
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TO_NWK_CCB_Init_S
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TO_HZCRL_CCB_Init_S
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TO_HT2X188_CCB_Init_S
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TO_FY2000_CCB_Init_S
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TO_FY188_CCB_Init_S
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TO_FY1000_CCB_Init_S
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TO_DDF2_CCB_Init_S
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TO_BRC188_CCB_Init_S
</UL>

<P><STRONG><a name="[2f2]"></a>UART_RBC_InputHandle_Init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, uart_rbc.o(i.UART_RBC_InputHandle_Init))
<BR><BR>[Called By]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TO_XY188_CCB_Init_S
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TO_NWK_CCB_Init_S
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TO_HZCRL_CCB_Init_S
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TO_HT2X188_CCB_Init_S
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TO_FY2000_CCB_Init_S
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TO_FY188_CCB_Init_S
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TO_FY1000_CCB_Init_S
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TO_DDF2_CCB_Init_S
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TO_BRC188_CCB_Init_S
</UL>

<P><STRONG><a name="[2f3]"></a>UART_RBC_OutputHandle_Init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, uart_rbc.o(i.UART_RBC_OutputHandle_Init))
<BR><BR>[Called By]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TO_XY188_CCB_Init_S
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TO_NWK_CCB_Init_S
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TO_HZCRL_CCB_Init_S
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TO_HT2X188_CCB_Init_S
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TO_FY2000_CCB_Init_S
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TO_FY188_CCB_Init_S
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TO_FY1000_CCB_Init_S
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TO_DDF2_CCB_Init_S
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TO_BRC188_CCB_Init_S
</UL>

<P><STRONG><a name="[2d8]"></a>UART_RBC_RXServer</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, uart_rbc.o(i.UART_RBC_RXServer))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_RBC_RXServer
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task05_F
</UL>

<P><STRONG><a name="[2d9]"></a>UART_RBC_TXServer</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, uart_rbc.o(i.UART_RBC_TXServer))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_RBC_TXServer
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task06_F
</UL>

<P><STRONG><a name="[2f0]"></a>UART_TO_BRC188_CCB_Init_S</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, com_server.o(i.UART_TO_BRC188_CCB_Init_S))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = UART_TO_BRC188_CCB_Init_S &rArr; UART_RBC_Creat
</UL>
<BR>[Calls]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RBC_OutputHandle_Init
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RBC_InputHandle_Init
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RBC_Enable
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RBC_Creat
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2e1]"></a>UART_TO_BRC188_CCB_QueueSend</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, clientapp.o(i.UART_TO_BRC188_CCB_QueueSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = UART_TO_BRC188_CCB_QueueSend &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task08_F
</UL>

<P><STRONG><a name="[2f5]"></a>UART_TO_DDF2_CCB_Init_S</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, com_server.o(i.UART_TO_DDF2_CCB_Init_S))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = UART_TO_DDF2_CCB_Init_S &rArr; UART_RBC_Creat
</UL>
<BR>[Calls]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RBC_OutputHandle_Init
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RBC_InputHandle_Init
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RBC_Enable
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RBC_Creat
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2e2]"></a>UART_TO_DDF2_CCB_QueueSend</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, clientapp.o(i.UART_TO_DDF2_CCB_QueueSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = UART_TO_DDF2_CCB_QueueSend &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task08_F
</UL>

<P><STRONG><a name="[2f6]"></a>UART_TO_FY1000_CCB_Init_S</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, com_server.o(i.UART_TO_FY1000_CCB_Init_S))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = UART_TO_FY1000_CCB_Init_S &rArr; UART_RBC_Creat
</UL>
<BR>[Calls]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RBC_OutputHandle_Init
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RBC_InputHandle_Init
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RBC_Enable
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RBC_Creat
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1c2]"></a>UART_TO_FY1000_CCB_QueueSend</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, fy1000pro.o(i.UART_TO_FY1000_CCB_QueueSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = UART_TO_FY1000_CCB_QueueSend &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY_1000Send_Code_QInput
</UL>

<P><STRONG><a name="[2f7]"></a>UART_TO_FY188_CCB_Init_S</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, com_server.o(i.UART_TO_FY188_CCB_Init_S))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = UART_TO_FY188_CCB_Init_S &rArr; UART_RBC_Creat
</UL>
<BR>[Calls]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RBC_OutputHandle_Init
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RBC_InputHandle_Init
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RBC_Enable
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RBC_Creat
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2dc]"></a>UART_TO_FY188_CCB_QueueSend</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, clientapp.o(i.UART_TO_FY188_CCB_QueueSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = UART_TO_FY188_CCB_QueueSend &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task08_F
</UL>

<P><STRONG><a name="[2f8]"></a>UART_TO_FY2000_CCB_Init_S</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, com_server.o(i.UART_TO_FY2000_CCB_Init_S))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = UART_TO_FY2000_CCB_Init_S &rArr; UART_RBC_Creat
</UL>
<BR>[Calls]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RBC_OutputHandle_Init
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RBC_InputHandle_Init
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RBC_Enable
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RBC_Creat
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2dd]"></a>UART_TO_FY2000_CCB_QueueSend</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, clientapp.o(i.UART_TO_FY2000_CCB_QueueSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = UART_TO_FY2000_CCB_QueueSend &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task08_F
</UL>

<P><STRONG><a name="[2f9]"></a>UART_TO_HT2X188_CCB_Init_S</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, com_server.o(i.UART_TO_HT2X188_CCB_Init_S))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = UART_TO_HT2X188_CCB_Init_S &rArr; UART_RBC_Creat
</UL>
<BR>[Calls]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RBC_OutputHandle_Init
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RBC_InputHandle_Init
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RBC_Enable
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RBC_Creat
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2e0]"></a>UART_TO_HT2X188_CCB_QueueSend</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, clientapp.o(i.UART_TO_HT2X188_CCB_QueueSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = UART_TO_HT2X188_CCB_QueueSend &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task08_F
</UL>

<P><STRONG><a name="[2fa]"></a>UART_TO_HZCRL_CCB_Init_S</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, com_server.o(i.UART_TO_HZCRL_CCB_Init_S))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = UART_TO_HZCRL_CCB_Init_S &rArr; UART_RBC_Creat
</UL>
<BR>[Calls]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RBC_OutputHandle_Init
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RBC_InputHandle_Init
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RBC_Enable
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RBC_Creat
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2de]"></a>UART_TO_HZCRL_CCB_QueueSend</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, clientapp.o(i.UART_TO_HZCRL_CCB_QueueSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = UART_TO_HZCRL_CCB_QueueSend &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task08_F
</UL>

<P><STRONG><a name="[2fb]"></a>UART_TO_NWK_CCB_Init_S</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, com_server.o(i.UART_TO_NWK_CCB_Init_S))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = UART_TO_NWK_CCB_Init_S &rArr; UART_RBC_Creat
</UL>
<BR>[Calls]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RBC_OutputHandle_Init
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RBC_InputHandle_Init
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RBC_Enable
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RBC_Creat
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2e3]"></a>UART_TO_NWK_CCB_QueueSend</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, clientapp.o(i.UART_TO_NWK_CCB_QueueSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = UART_TO_NWK_CCB_QueueSend &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task08_F
</UL>

<P><STRONG><a name="[2fc]"></a>UART_TO_XY188_CCB_Init_S</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, com_server.o(i.UART_TO_XY188_CCB_Init_S))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = UART_TO_XY188_CCB_Init_S &rArr; UART_RBC_Creat
</UL>
<BR>[Calls]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RBC_OutputHandle_Init
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RBC_InputHandle_Init
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RBC_Enable
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RBC_Creat
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2df]"></a>UART_TO_XY188_CCB_QueueSend</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, clientapp.o(i.UART_TO_XY188_CCB_QueueSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = UART_TO_XY188_CCB_QueueSend &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task08_F
</UL>

<P><STRONG><a name="[31]"></a>USART1_IRQHandler</STRONG> (Thumb, 136 bytes, Stack size 40 bytes, m4_uart1.o(i.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = USART1_IRQHandler &rArr; HAL_UART_Receive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_DMA
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_DMAStop
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kfifo_put
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>USART2_IRQHandler</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, m4_uart2.o(i.USART2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = USART2_IRQHandler &rArr; HAL_UART_Receive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_DMA
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_DMAStop
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RBC_BufferInput
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>USART3_IRQHandler</STRONG> (Thumb, 260 bytes, Stack size 24 bytes, m4_uart3.o(i.USART3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = USART3_IRQHandler &rArr; HAL_UART_Receive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_DMA
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_DMAStop
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RBC_BufferInput
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[2d2]"></a>UpDateSysDevStatusErr</STRONG> (Thumb, 268 bytes, Stack size 0 bytes, devpara.o(i.UpDateSysDevStatusErr))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task01_F
</UL>

<P><STRONG><a name="[298]"></a>Update_LcdRAM_ALL</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, uc1698.o(i.Update_LcdRAM_ALL))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Update_LcdRAM_ALL &rArr; LCD_WriteOneByte &rArr; PutData8
</UL>
<BR>[Calls]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteOneByte
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Refresh_Screen
</UL>

<P><STRONG><a name="[297]"></a>Update_VisionBuf_TO_LcdRAM</STRONG> (Thumb, 212 bytes, Stack size 12 bytes, uc1698.o(i.Update_VisionBuf_TO_LcdRAM))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Update_VisionBuf_TO_LcdRAM
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Refresh_Screen
</UL>

<P><STRONG><a name="[2ff]"></a>Updatedebug</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, sys_state.o(i.Updatedebug))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = Updatedebug &rArr; SysPara_Update &rArr; WriteData_SPIFlash &rArr; WriteData_SPIFlash_UnSafe &rArr; W25QXX_WriteBuffer &rArr; W25QXX_SectorWrite &rArr; W25QXX_PageWrite &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR &rArr; SPI1_ReadWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysPara_Update
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysdebug_Command
</UL>

<P><STRONG><a name="[7]"></a>UsageFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.UsageFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[300]"></a>UserData_InitALL</STRONG> (Thumb, 76 bytes, Stack size 40 bytes, userpara.o(i.UserData_InitALL))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = UserData_InitALL &rArr; UserData_Read &rArr; ReadData_FRAM &rArr; ReadData_FRAM_UnSafe &rArr; FRAM_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserData_Read
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[301]"></a>UserData_Read</STRONG> (Thumb, 76 bytes, Stack size 48 bytes, userpara.o(i.UserData_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = UserData_Read &rArr; ReadData_FRAM &rArr; ReadData_FRAM_UnSafe &rArr; FRAM_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadData_FRAM
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserData_InitALL
</UL>

<P><STRONG><a name="[277]"></a>UserData_ResetALL</STRONG> (Thumb, 72 bytes, Stack size 40 bytes, userpara.o(i.UserData_ResetALL))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = UserData_ResetALL &rArr; UserData_Update &rArr; WriteData_FRAM &rArr; WriteData_FRAM_UnSafe &rArr; ReadData_FRAM_UnSafe &rArr; FRAM_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserData_Update
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userdatareset
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysdataresetall
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_1_3_6
</UL>

<P><STRONG><a name="[103]"></a>UserData_Save</STRONG> (Thumb, 54 bytes, Stack size 32 bytes, userpara.o(i.UserData_Save))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = UserData_Save &rArr; UserData_Update &rArr; WriteData_FRAM &rArr; WriteData_FRAM_UnSafe &rArr; ReadData_FRAM_UnSafe &rArr; FRAM_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserData_Update
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task12_F
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY1000_Pack_Rx_S
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BRC188_Pack_Rx_S
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT2X188_Pack_Rx_S
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XY188_Pack_Rx_S
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY2000_Pack_Rx_S
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY188_Pack_Rx_S
</UL>

<P><STRONG><a name="[302]"></a>UserData_Update</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, userpara.o(i.UserData_Update))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = UserData_Update &rArr; WriteData_FRAM &rArr; WriteData_FRAM_UnSafe &rArr; ReadData_FRAM_UnSafe &rArr; FRAM_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteData_FRAM
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserData_Save
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserData_ResetALL
</UL>

<P><STRONG><a name="[268]"></a>User_Filter</STRONG> (Thumb, 122 bytes, Stack size 36 bytes, app_ui.o(i.User_Filter))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = User_Filter
</UL>
<BR>[Called By]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_1_2_3
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_1_2_2
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_1_2_1
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_1_1_2_1
</UL>

<P><STRONG><a name="[303]"></a>W25QXX_Erase_Sector</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, w25qxx.o(i.W25QXX_Erase_Sector))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = W25QXX_Erase_Sector &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR &rArr; SPI1_ReadWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Write_Enable
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Wait_Busy
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_ReadWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiFlashErase
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_WriteBuffer
</UL>

<P><STRONG><a name="[306]"></a>W25QXX_GPIO_Init</STRONG> (Thumb, 172 bytes, Stack size 32 bytes, w25qxx.o(i.W25QXX_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = W25QXX_GPIO_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Init
</UL>

<P><STRONG><a name="[307]"></a>W25QXX_Init</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, w25qxx.o(i.W25QXX_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = W25QXX_Init &rArr; spiFlash_SysInit &rArr; osMutexCreate &rArr; xQueueCreateMutex &rArr; prvInitialiseMutex &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_ReadID
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_ReadSR
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_GPIO_Init
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiFlash_SysInit
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_SetSpeed
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_ReadWriteByte
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI1_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[30c]"></a>W25QXX_PageWrite</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, w25qxx.o(i.W25QXX_PageWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = W25QXX_PageWrite &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR &rArr; SPI1_ReadWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Write_Enable
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Wait_Busy
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_ReadWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_SectorWrite
</UL>

<P><STRONG><a name="[293]"></a>W25QXX_ReadBuffer</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, w25qxx.o(i.W25QXX_ReadBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = W25QXX_ReadBuffer &rArr; SPI1_ReadWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_ReadWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiFlashRead
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteData_SPIFlash_UnSafe
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadData_SPIFlash_UnSafe
</UL>

<P><STRONG><a name="[309]"></a>W25QXX_ReadID</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, w25qxx.o(i.W25QXX_ReadID))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = W25QXX_ReadID &rArr; SPI1_ReadWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_ReadWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Init
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[30a]"></a>W25QXX_ReadSR</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, w25qxx.o(i.W25QXX_ReadSR))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = W25QXX_ReadSR &rArr; SPI1_ReadWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_ReadWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Init
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Wait_Busy
</UL>

<P><STRONG><a name="[30d]"></a>W25QXX_SectorWrite</STRONG> (Thumb, 256 bytes, Stack size 40 bytes, w25qxx.o(i.W25QXX_SectorWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = W25QXX_SectorWrite &rArr; W25QXX_PageWrite &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR &rArr; SPI1_ReadWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_PageWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiFlashWrite
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_WriteBuffer
</UL>

<P><STRONG><a name="[305]"></a>W25QXX_Wait_Busy</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, w25qxx.o(i.W25QXX_Wait_Busy))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = W25QXX_Wait_Busy &rArr; W25QXX_ReadSR &rArr; SPI1_ReadWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_TogglePin
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_ReadSR
</UL>
<BR>[Called By]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_PageWrite
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Erase_Sector
</UL>

<P><STRONG><a name="[30e]"></a>W25QXX_WriteBuffer</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, w25qxx.o(i.W25QXX_WriteBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = W25QXX_WriteBuffer &rArr; W25QXX_SectorWrite &rArr; W25QXX_PageWrite &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR &rArr; SPI1_ReadWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_SectorWrite
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Erase_Sector
</UL>
<BR>[Called By]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteData_SPIFlash_UnSafe
</UL>

<P><STRONG><a name="[304]"></a>W25QXX_Write_Enable</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, w25qxx.o(i.W25QXX_Write_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = W25QXX_Write_Enable &rArr; SPI1_ReadWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_ReadWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_PageWrite
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Erase_Sector
</UL>

<P><STRONG><a name="[28c]"></a>WriteData_FRAM</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, fram.o(i.WriteData_FRAM))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = WriteData_FRAM &rArr; WriteData_FRAM_UnSafe &rArr; ReadData_FRAM_UnSafe &rArr; FRAM_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexWait
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteData_FRAM_UnSafe
</UL>
<BR>[Called By]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerStateRecord_Update
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysDevData_Update
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserData_Update
</UL>

<P><STRONG><a name="[2c8]"></a>WriteData_SPIFlash</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, w25qxx.o(i.WriteData_SPIFlash))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = WriteData_SPIFlash &rArr; WriteData_SPIFlash_UnSafe &rArr; W25QXX_WriteBuffer &rArr; W25QXX_SectorWrite &rArr; W25QXX_PageWrite &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR &rArr; SPI1_ReadWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexWait
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteData_SPIFlash_UnSafe
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysPara_Update
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysDeviceList_Update
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysUserList_Update
</UL>

<P><STRONG><a name="[312]"></a>XY188_Pack_0X01_S</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, xy188pro.o(i.XY188_Pack_0X01_S))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = XY188_Pack_0X01_S &rArr; SUMCheck_Input
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUMCheck_Input
</UL>
<BR>[Called By]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XY188_Pack_TxServer_S
</UL>

<P><STRONG><a name="[315]"></a>XY188_Pack_0X129_S</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, xy188pro.o(i.XY188_Pack_0X129_S))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = XY188_Pack_0X129_S
</UL>
<BR>[Called By]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XY188_Pack_Rx_S
</UL>

<P><STRONG><a name="[313]"></a>XY188_Pack_RxAnalyze_S</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, xy188pro.o(i.XY188_Pack_RxAnalyze_S))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = XY188_Pack_RxAnalyze_S &rArr; XY188_Pack_Rx_S &rArr; SysDevData_Save &rArr; SysDevData_Update &rArr; WriteData_FRAM &rArr; WriteData_FRAM_UnSafe &rArr; ReadData_FRAM_UnSafe &rArr; FRAM_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUMCheck_Check
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XY188_Pack_Rx_S
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XY188_Pack_RxServer_S
</UL>

<P><STRONG><a name="[83]"></a>XY188_Pack_RxServer_S</STRONG> (Thumb, 484 bytes, Stack size 24 bytes, xy188pro.o(i.XY188_Pack_RxServer_S))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = XY188_Pack_RxServer_S &rArr; XY188_Pack_RxAnalyze_S &rArr; XY188_Pack_Rx_S &rArr; SysDevData_Save &rArr; SysDevData_Update &rArr; WriteData_FRAM &rArr; WriteData_FRAM_UnSafe &rArr; ReadData_FRAM_UnSafe &rArr; FRAM_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XY188_Pack_RxAnalyze_S
</UL>
<BR>[Address Reference Count : 1]<UL><LI> com_server.o(i.UART_TO_XY188_CCB_Init_S)
</UL>
<P><STRONG><a name="[314]"></a>XY188_Pack_Rx_S</STRONG> (Thumb, 1778 bytes, Stack size 160 bytes, xy188pro.o(i.XY188_Pack_Rx_S))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = XY188_Pack_Rx_S &rArr; SysDevData_Save &rArr; SysDevData_Update &rArr; WriteData_FRAM &rArr; WriteData_FRAM_UnSafe &rArr; ReadData_FRAM_UnSafe &rArr; FRAM_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserData_Save
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY_1000Send_Code_QInput
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexWait
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelSysTick
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysDevData_Save
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetUser_Num
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XY188_Pack_0X129_S
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BcdToHex4
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BcdToHex2
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BcdToHex
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strrchr
</UL>
<BR>[Called By]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XY188_Pack_RxAnalyze_S
</UL>

<P><STRONG><a name="[2da]"></a>XY188_Pack_TxServer_S</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, xy188pro.o(i.XY188_Pack_TxServer_S))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = XY188_Pack_TxServer_S &rArr; xQueueGenericReceive &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XY188_Pack_0X01_S
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task07_F
</UL>

<P><STRONG><a name="[184]"></a>XY_188Send_Code_QInput</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, clientapp.o(i.XY_188Send_Code_QInput))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = XY_188Send_Code_QInput &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexWait
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClientCH1_QueueSend
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task08_F
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY1000_Pack_Rx_S
</UL>

<P><STRONG><a name="[2c0]"></a>Ymodem_Receive</STRONG> (Thumb, 554 bytes, Stack size 1112 bytes, ymodem.o(i.Ymodem_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 1336<LI>Call Chain = Ymodem_Receive &rArr; spiFlashWrite &rArr; W25QXX_SectorWrite &rArr; W25QXX_PageWrite &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR &rArr; SPI1_ReadWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;feedIWDG
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiFlashWrite
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiFlashRead
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Str2Int
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Byte
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Receive_Packet
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialDownload
</UL>

<P><STRONG><a name="[1fc]"></a>_Error_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, main.o(i._Error_Handler))
<BR><BR>[Called By]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART2_UART_Init
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART2_MspInit
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART1_MspInit
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SDIO_SD_Init
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_MspInit
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C2_Init
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_CRC_Init
</UL>

<P><STRONG><a name="[317]"></a>__0printf</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[3fd]"></a>__1printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[f2]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dogInit
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_main
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_init
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveLog
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HbMainTask
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HbInit
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY_1000Send_Code_QInput
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY1000_Pack_TxServer_S
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AlarmClk_ParaSet
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task13_F
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task12_F
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task09_F
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task08_F
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task07_F
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task01_F
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Alarm_UserShare_CallBack
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Alarm_DataSave_CallBack
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verifyProcessFile
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiFlashErase
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_file_type
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY1000_Pack_Rx_S
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDF2_Pack_Rx_S
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BRC188_Pack_Rx_S
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT2X188_Pack_Rx_S
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XY188_Pack_Rx_S
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HZCRL_Pack_Rx_S
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY2000_Pack_Rx_S
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY188_Pack_Rx_S
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NWK_Pack_Rx_S
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userparareset
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userpara
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userdatareset
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userdata
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systemparareset
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysdataresetall
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setsystype
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setsn
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setshare
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setsend
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setread
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printenv
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;devicestatus
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deviceparareset
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;devicepara
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;devicedatareset
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;devicedata
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ddf2ctrl
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;changeDeviceNum
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClirateSet
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Guard
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveDeviceInfo
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateFileName
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkCard
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MountFS
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisSDCard
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ps_p
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ps_none
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ps_a
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ps_A
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freecmd
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;down_env_data
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiFlashCopy
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialDownload
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calMd5_hash_SPI
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reboot
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tab_complete
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_bad_command
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_input
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_input
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadData_SPIFlash_UnSafe
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printAllAlarm
</UL>

<P><STRONG><a name="[3fe]"></a>__c89printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[3ff]"></a>printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[319]"></a>__0snprintf</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, printfa.o(i.__0snprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[400]"></a>__1snprintf</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, printfa.o(i.__0snprintf), UNUSED)

<P><STRONG><a name="[324]"></a>__2snprintf</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, printfa.o(i.__0snprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settime_s
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settime_f
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settime
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setsystype
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setsn
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setshare
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setsend
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setread
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powrelayctrl
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;devchange
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ddf2ctrl
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uptime_Command
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setServer
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setEnvParameter
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saveData
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ps
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printServer
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_version
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;changedevnum
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysdebug_Command
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;help_command
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_screen
</UL>

<P><STRONG><a name="[401]"></a>__c89snprintf</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, printfa.o(i.__0snprintf), UNUSED)

<P><STRONG><a name="[402]"></a>snprintf</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, printfa.o(i.__0snprintf), UNUSED)

<P><STRONG><a name="[31a]"></a>__0sprintf</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[403]"></a>__1sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[123]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskList
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskGetRunTimeStats
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveDeviceInfo
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateFileName
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ps_p
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sprintfhex
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Integer
</UL>

<P><STRONG><a name="[404]"></a>__c89sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[405]"></a>sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[d8]"></a>__aeabi_errno_addr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr))
<BR><BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[406]"></a>__rt_errno_addr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr), UNUSED)

<P><STRONG><a name="[31b]"></a>__kfifo_get</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, kfifo.o(i.__kfifo_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __kfifo_get &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fgetc
</UL>

<P><STRONG><a name="[2fd]"></a>__kfifo_put</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, kfifo.o(i.__kfifo_put))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __kfifo_put &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[407]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[408]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[409]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[be]"></a>alarm</STRONG> (Thumb, 20 bytes, Stack size 24 bytes, debug.o(i.alarm))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = alarm &rArr; printAllAlarm &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printAllAlarm
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_cli.o(.constdata)
</UL>
<P><STRONG><a name="[322]"></a>calMd5_hash_SPI</STRONG> (Thumb, 306 bytes, Stack size 184 bytes, calmd5.o(i.calMd5_hash_SPI))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = calMd5_hash_SPI &rArr; MD5_Finish &rArr; crl_u_MD5_Finish &rArr; crl_u_MD5_Update &rArr; md5_process &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexWait
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelSysTick
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiFlashRead
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MD5_Init
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MD5_Finish
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MD5_Append
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strrchr
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verifyProcessFile
</UL>

<P><STRONG><a name="[323]"></a>changeDeviceNum</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, sys_state.o(i.changeDeviceNum))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = changeDeviceNum &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexWait
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;changedevnum
</UL>

<P><STRONG><a name="[bf]"></a>changedevnum</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, debug.o(i.changedevnum))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = changedevnum &rArr; changeDeviceNum &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;changeDeviceNum
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_cli.o(.constdata)
</UL>
<P><STRONG><a name="[327]"></a>cli_getchar</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, rtx_cli.o(i.cli_getchar))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = cli_getchar &rArr; getc &rArr; fgetc &rArr; __kfifo_get &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getc
</UL>
<BR>[Called By]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_input
</UL>

<P><STRONG><a name="[328]"></a>cli_init</STRONG> (Thumb, 130 bytes, Stack size 8 bytes, rtx_cli.o(i.cli_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = cli_init &rArr; cli_sysinit &rArr; osMutexCreate &rArr; xQueueCreateMutex &rArr; prvInitialiseMutex &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createIWDG
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexWait
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_sysinit
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_register_commands
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2e6]"></a>cli_main</STRONG> (Thumb, 224 bytes, Stack size 16 bytes, rtx_cli.o(i.cli_main))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = cli_main &rArr; get_input &rArr; tab_complete &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;feedIWDG
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexWait
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_bad_command
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_input
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_input
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskCli
</UL>

<P><STRONG><a name="[330]"></a>cli_register_command</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, rtx_cli.o(i.cli_register_command))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = cli_register_command
</UL>
<BR>[Called By]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_register_commands
</UL>

<P><STRONG><a name="[32b]"></a>cli_register_commands</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, rtx_cli.o(i.cli_register_commands))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = cli_register_commands &rArr; cli_register_command
</UL>
<BR>[Calls]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_register_command
</UL>
<BR>[Called By]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_init
</UL>

<P><STRONG><a name="[329]"></a>cli_sysinit</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, rtx_cli.o(i.cli_sysinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = cli_sysinit &rArr; osMutexCreate &rArr; xQueueCreateMutex &rArr; prvInitialiseMutex &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexCreate
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kfifo_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_init
</UL>

<P><STRONG><a name="[34a]"></a>clust2sect</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, ff.o(i.clust2sect))
<BR><BR>[Called By]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
</UL>

<P><STRONG><a name="[334]"></a>contextInit</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, context.o(i.contextInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = contextInit &rArr; spiFlashWrite &rArr; W25QXX_SectorWrite &rArr; W25QXX_PageWrite &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR &rArr; SPI1_ReadWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiFlashWrite
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiFlashErase
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_file_type
</UL>

<P><STRONG><a name="[335]"></a>contextLoad</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, context.o(i.contextLoad))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = contextLoad &rArr; spiFlashRead &rArr; W25QXX_ReadBuffer &rArr; SPI1_ReadWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiFlashRead
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_file_type
</UL>

<P><STRONG><a name="[336]"></a>contextSave</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, context.o(i.contextSave))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = contextSave &rArr; spiFlashWrite &rArr; W25QXX_SectorWrite &rArr; W25QXX_PageWrite &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR &rArr; SPI1_ReadWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiFlashWrite
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiFlashErase
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_file_type
</UL>

<P><STRONG><a name="[283]"></a>crc_16_modbus</STRONG> (Thumb, 38 bytes, Stack size 20 bytes, check.o(i.crc_16_modbus))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = crc_16_modbus &rArr; update_crc_16
</UL>
<BR>[Calls]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_crc_16
</UL>
<BR>[Called By]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NWK_Pack_RxAnalyze_S
</UL>

<P><STRONG><a name="[2d1]"></a>createIWDG</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, watchdog.o(i.createIWDG))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = createIWDG &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexWait
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
</UL>
<BR>[Called By]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_init
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task10_F
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task09_F
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task08_F
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task07_F
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task06_F
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task05_F
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task02_F
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task01_F
</UL>

<P><STRONG><a name="[257]"></a>crl_u_MD5_Finish</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, crypto.o(i.crl_u_MD5_Finish))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = crl_u_MD5_Finish &rArr; crl_u_MD5_Update &rArr; md5_process &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crl_u_MD5_Update
</UL>
<BR>[Called By]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MD5_Finish
</UL>

<P><STRONG><a name="[259]"></a>crl_u_MD5_Init</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, crypto.o(i.crl_u_MD5_Init))
<BR><BR>[Called By]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MD5_Init
</UL>

<P><STRONG><a name="[255]"></a>crl_u_MD5_Update</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, crypto.o(i.crl_u_MD5_Update))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = crl_u_MD5_Update &rArr; md5_process &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5_process
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MD5_Append
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crl_u_MD5_Finish
</UL>

<P><STRONG><a name="[c5]"></a>ddf2ctrl</STRONG> (Thumb, 806 bytes, Stack size 144 bytes, sys_state.o(i.ddf2ctrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = ddf2ctrl &rArr; DDF2_Send_Code_QInput &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDF2_Send_Code_QInput
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexWait
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelSysTick
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HexToBcd4
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMeters_Num
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strrchr
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_cli.o(.constdata)
</UL>
<P><STRONG><a name="[bd]"></a>devchange</STRONG> (Thumb, 308 bytes, Stack size 40 bytes, sys_state.o(i.devchange))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = devchange &rArr; SysDeviceList_Update &rArr; WriteData_SPIFlash &rArr; WriteData_SPIFlash_UnSafe &rArr; W25QXX_WriteBuffer &rArr; W25QXX_SectorWrite &rArr; W25QXX_PageWrite &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR &rArr; SPI1_ReadWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HexToBcd4
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysDeviceList_Update
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Getdevice_Num
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_cli.o(.constdata)
</UL>
<P><STRONG><a name="[af]"></a>devicedata</STRONG> (Thumb, 11582 bytes, Stack size 48 bytes, sys_state.o(i.devicedata))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = devicedata &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexWait
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_cli.o(.constdata)
</UL>
<P><STRONG><a name="[b5]"></a>devicedatareset</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, sys_state.o(i.devicedatareset))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = devicedatareset &rArr; SysDevData_ResetALL &rArr; SysDevData_Update &rArr; WriteData_FRAM &rArr; WriteData_FRAM_UnSafe &rArr; ReadData_FRAM_UnSafe &rArr; FRAM_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexWait
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysDevData_ResetALL
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_cli.o(.constdata)
</UL>
<P><STRONG><a name="[ad]"></a>devicepara</STRONG> (Thumb, 890 bytes, Stack size 40 bytes, sys_state.o(i.devicepara))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = devicepara &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexWait
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_cli.o(.constdata)
</UL>
<P><STRONG><a name="[b3]"></a>deviceparareset</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, sys_state.o(i.deviceparareset))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = deviceparareset &rArr; SysDeviceList_Reset &rArr; SysDeviceList_Update &rArr; WriteData_SPIFlash &rArr; WriteData_SPIFlash_UnSafe &rArr; W25QXX_WriteBuffer &rArr; W25QXX_SectorWrite &rArr; W25QXX_PageWrite &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR &rArr; SPI1_ReadWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexWait
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysDeviceList_Reset
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_cli.o(.constdata)
</UL>
<P><STRONG><a name="[b0]"></a>devicestatus</STRONG> (Thumb, 608 bytes, Stack size 48 bytes, sys_state.o(i.devicestatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = devicestatus &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;feedIWDG
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexWait
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_cli.o(.constdata)
</UL>
<P><STRONG><a name="[35a]"></a>disk_initialize</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, diskio.o(i.disk_initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = disk_initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
</UL>

<P><STRONG><a name="[35b]"></a>disk_ioctl</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, diskio.o(i.disk_ioctl))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = disk_ioctl
</UL>
<BR>[Called By]<UL><LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
</UL>

<P><STRONG><a name="[369]"></a>disk_read</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, diskio.o(i.disk_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
</UL>

<P><STRONG><a name="[36d]"></a>disk_status</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, diskio.o(i.disk_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = disk_status
</UL>
<BR>[Called By]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[35c]"></a>disk_write</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, diskio.o(i.disk_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = disk_write
</UL>
<BR>[Called By]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
</UL>

<P><STRONG><a name="[34f]"></a>dogInit</STRONG> (Thumb, 280 bytes, Stack size 32 bytes, watchdog.o(i.dogInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = dogInit &rArr; iwdg_MetexInit &rArr; osMutexCreate &rArr; xQueueCreateMutex &rArr; prvInitialiseMutex &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupCreate
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexWait
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelSysTick
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iwdg_MetexInit
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strrchr
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[352]"></a>down_env_data</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, updateparm.o(i.down_env_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 1384<LI>Call Chain = down_env_data &rArr; SerialDownload &rArr; Ymodem_Receive &rArr; spiFlashWrite &rArr; W25QXX_SectorWrite &rArr; W25QXX_PageWrite &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR &rArr; SPI1_ReadWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexWait
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelSysTick
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verifyProcessFile
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialDownload
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strrchr
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setEnvParameter
</UL>

<P><STRONG><a name="[353]"></a>eTaskGetState</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, tasks.o(i.eTaskGetState))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = eTaskGetState
</UL>
<BR>[Calls]<UL><LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskGetInfo
</UL>

<P><STRONG><a name="[2bb]"></a>f_close</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, ff.o(i.f_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = f_close &rArr; f_sync &rArr; sync_fs &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dec_lock
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
</UL>
<BR>[Called By]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveDeviceInfo
</UL>

<P><STRONG><a name="[281]"></a>f_mkfs</STRONG> (Thumb, 1580 bytes, Stack size 112 bytes, ff.o(i.f_mkfs))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = f_mkfs &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ldnumber
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
</UL>
<BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MountFS
</UL>

<P><STRONG><a name="[12e]"></a>f_mount</STRONG> (Thumb, 96 bytes, Stack size 40 bytes, ff.o(i.f_mount))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = f_mount &rArr; find_volume &rArr; check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ldnumber
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MountFS
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisSDCard
</UL>

<P><STRONG><a name="[2b8]"></a>f_open</STRONG> (Thumb, 450 bytes, Stack size 736 bytes, ff.o(i.f_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 968<LI>Call Chain = f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_clust
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inc_lock
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enq_lock
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_lock
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
</UL>
<BR>[Called By]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveDeviceInfo
</UL>

<P><STRONG><a name="[356]"></a>f_sync</STRONG> (Thumb, 202 bytes, Stack size 24 bytes, ff.o(i.f_sync))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = f_sync &rArr; sync_fs &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_clust
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
</UL>
<BR>[Called By]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
</UL>

<P><STRONG><a name="[2ba]"></a>f_write</STRONG> (Thumb, 598 bytes, Stack size 64 bytes, ff.o(i.f_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = f_write &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clmt_clust
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
</UL>
<BR>[Called By]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveDeviceInfo
</UL>

<P><STRONG><a name="[2bf]"></a>feedIWDG</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, watchdog.o(i.feedIWDG))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = feedIWDG &rArr; xEventGroupSetBits &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_main
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task10_F
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task09_F
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task08_F
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task07_F
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task06_F
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task05_F
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task02_F
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task01_F
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;devicestatus
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ps_none
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialDownload
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ymodem_Receive
</UL>

<P><STRONG><a name="[33c]"></a>ff_convert</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, cc936.o(i.ff_convert))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ff_convert
</UL>
<BR>[Called By]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>

<P><STRONG><a name="[333]"></a>ff_wtoupper</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, cc936.o(i.ff_wtoupper))
<BR><BR>[Called By]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmp_lfn
</UL>

<P><STRONG><a name="[36b]"></a>fgetc</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, m4_uart1.o(i.fgetc))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = fgetc &rArr; __kfifo_get &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kfifo_get
</UL>
<BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getc
</UL>

<P><STRONG><a name="[234]"></a>fifo_get</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, hzcrl_xpro.o(i.fifo_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fifo_get
</UL>
<BR>[Calls]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_len
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HZCRL_Pack_RxServer_S
</UL>

<P><STRONG><a name="[36c]"></a>fifo_len</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, hzcrl_xpro.o(i.fifo_len))
<BR><BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_get
</UL>

<P><STRONG><a name="[1a3]"></a>flash_file_type</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, updateparm.o(i.flash_file_type))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = flash_file_type &rArr; contextInit &rArr; spiFlashWrite &rArr; W25QXX_SectorWrite &rArr; W25QXX_PageWrite &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR &rArr; SPI1_ReadWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexWait
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelSysTick
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;contextSave
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;contextLoad
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;contextInit
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strrchr
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY1000_Pack_Rx_S
</UL>

<P><STRONG><a name="[84]"></a>fputc</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, m4_uart1.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = fputc &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0printf)
</UL>
<P><STRONG><a name="[15b]"></a>fram_SysInit</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, fram.o(i.fram_SysInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = fram_SysInit &rArr; osMutexCreate &rArr; xQueueCreateMutex &rArr; prvInitialiseMutex &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAM_Init
</UL>

<P><STRONG><a name="[370]"></a>freecmd</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, similarlinux.o(i.freecmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = freecmd &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortGetFreeHeapSize
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexWait
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem
</UL>

<P><STRONG><a name="[372]"></a>fy1000SendMetexInit</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, fy1000pro.o(i.fy1000SendMetexInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = fy1000SendMetexInit &rArr; osMutexCreate &rArr; xQueueCreateMutex &rArr; prvInitialiseMutex &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f4]"></a>getRealTime</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, rtc.o(i.getRealTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = getRealTime &rArr; localtime &rArr; _localtime
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localtime
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Alarm_DataSave_CallBack
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY1000_Pack_Rx_S
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printAllAlarm
</UL>

<P><STRONG><a name="[397]"></a>getServerIP</STRONG> (Thumb, 46 bytes, Stack size 12 bytes, app_ui.o(i.getServerIP))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = getServerIP
</UL>
<BR>[Called By]<UL><LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printServerIP
</UL>

<P><STRONG><a name="[ee]"></a>getTimeTick</STRONG> (Thumb, 138 bytes, Stack size 56 bytes, rtc.o(i.getTimeTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = getTimeTick &rArr; mktime &rArr; _localtime
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mktime
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCF8563_Read
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AlarmClk_ParaSet
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCF8563_Set
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY1000_Pack_Rx_S
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Con_Second
</UL>

<P><STRONG><a name="[339]"></a>get_fat</STRONG> (Thumb, 238 bytes, Stack size 32 bytes, ff.o(i.get_fat))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>
<BR>[Called By]<UL><LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
</UL>

<P><STRONG><a name="[35d]"></a>get_fattime</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fatfs.o(i.get_fattime))
<BR><BR>[Called By]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
</UL>

<P><STRONG><a name="[a2]"></a>get_version</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, debug.o(i.get_version))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = get_version &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_cli.o(.constdata)
</UL>
<P><STRONG><a name="[295]"></a>getc</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, getc.o(i.getc))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = getc &rArr; fgetc &rArr; __kfifo_get &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fgetc
</UL>
<BR>[Called By]<UL><LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ps_none
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Receive_Byte
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_getchar
</UL>

<P><STRONG><a name="[376]"></a>isValidStr</STRONG> (Thumb, 138 bytes, Stack size 48 bytes, updateparm.o(i.isValidStr))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = isValidStr &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateServerIP
</UL>

<P><STRONG><a name="[377]"></a>is_power_of_2</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, kfifo.o(i.is_power_of_2))
<BR><BR>[Called By]<UL><LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kfifo_init
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kfifo_alloc
</UL>

<P><STRONG><a name="[350]"></a>iwdg_MetexInit</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, watchdog.o(i.iwdg_MetexInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = iwdg_MetexInit &rArr; osMutexCreate &rArr; xQueueCreateMutex &rArr; prvInitialiseMutex &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dogInit
</UL>

<P><STRONG><a name="[331]"></a>kfifo_alloc</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, kfifo.o(i.kfifo_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = kfifo_alloc &rArr; kfifo_init &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kfifo_init
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_power_of_2
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;roundup_pow_of_two
</UL>
<BR>[Called By]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_sysinit
</UL>

<P><STRONG><a name="[379]"></a>kfifo_init</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, kfifo.o(i.kfifo_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = kfifo_init &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_power_of_2
</UL>
<BR>[Called By]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kfifo_alloc
</UL>

<P><STRONG><a name="[5a]"></a>main</STRONG> (Thumb, 7686 bytes, Stack size 32 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = main &rArr; SysDevData_InitALL &rArr; SysDevData_Read &rArr; ReadData_FRAM &rArr; ReadData_FRAM_UnSafe &rArr; FRAM_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetREVID
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetDEVID
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fy1000SendMetexInit
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dogInit
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_init
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_ReadID
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Init
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserData_InitALL
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TO_XY188_CCB_Init_S
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TO_NWK_CCB_Init_S
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TO_HZCRL_CCB_Init_S
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TO_HT2X188_CCB_Init_S
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TO_FY2000_CCB_Init_S
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TO_FY188_CCB_Init_S
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TO_FY1000_CCB_Init_S
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TO_DDF2_CCB_Init_S
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TO_BRC188_CCB_Init_S
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RBC_ControlerInit
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3_Cfg
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_Cfg
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_Cfg
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysUserList_Init
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysPara_Reset
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysPara_Init
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysLed_Cfg
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysDeviceList_Init
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysDevData_InitALL
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysBeep_Cfg
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SP706_Cfg
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pulse_Create
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PulseLeaguer_SET
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PulseLeaguer_Enalbe
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerStateRecord_Update
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerStateRecord_Init
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerRelay_Init
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCF8563_Read
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_FATFS_Init
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M4_CRC_PHY_Init
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_PaulseFunction
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC2_Cfg
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC1_Cfg
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_ChipID
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSystemUserNum
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSystemDevMessage
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAM_Init
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClientCH1SendMetexInit
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AlarmClk_ParaSet
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AlarmClk_Init
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AlarmClk_EnableCtrl
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AlarmClk_CreatOne
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateCountingSemaphore
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexWait
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelSysTick
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strrchr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[ba]"></a>mem</STRONG> (Thumb, 20 bytes, Stack size 24 bytes, debug.o(i.mem))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = mem &rArr; freecmd &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freecmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_cli.o(.constdata)
</UL>
<P><STRONG><a name="[1a5]"></a>osDelay</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, cmsis_os.o(i.osDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_REST
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task13_F
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task12_F
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task10_F
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task09_F
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task08_F
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task07_F
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task06_F
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task05_F
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task04_F
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task03_F
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task02_F
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task01_F
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY1000_Pack_Rx_S
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Guard
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ps_none
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Receive_Byte
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_input
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Wait_Busy
</UL>

<P><STRONG><a name="[388]"></a>osKernelStart</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, cmsis_os.o(i.osKernelStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = osKernelStart &rArr; vTaskStartScheduler &rArr; xTimerCreateTimerTask &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f1]"></a>osKernelSysTick</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, cmsis_os.o(i.osKernelSysTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = osKernelSysTick &rArr; xTaskGetTickCountFromISR &rArr; vPortValidateInterruptPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inHandlerMode
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCountFromISR
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
</UL>
<BR>[Called By]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dogInit
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveLog
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HbMainTask
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HbInit
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY_1000Send_Code_QInput
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY1000_Pack_TxServer_S
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AlarmClk_ParaSet
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task13_F
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task12_F
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task09_F
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task08_F
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task07_F
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task01_F
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Alarm_UserShare_CallBack
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Alarm_DataSave_CallBack
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verifyProcessFile
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_file_type
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY1000_Pack_Rx_S
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDF2_Pack_Rx_S
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BRC188_Pack_Rx_S
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT2X188_Pack_Rx_S
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XY188_Pack_Rx_S
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HZCRL_Pack_Rx_S
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY2000_Pack_Rx_S
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY188_Pack_Rx_S
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NWK_Pack_Rx_S
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ddf2ctrl
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Guard
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveDeviceInfo
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateFileName
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkCard
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MountFS
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisSDCard
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;down_env_data
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiFlashCopy
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calMd5_hash_SPI
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadData_SPIFlash_UnSafe
</UL>

<P><STRONG><a name="[11a]"></a>osMutexCreate</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, cmsis_os.o(i.osMutexCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = osMutexCreate &rArr; xQueueCreateMutex &rArr; prvInitialiseMutex &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
</UL>
<BR>[Called By]<UL><LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fy1000SendMetexInit
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClientCH1SendMetexInit
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iwdg_MetexInit
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_sysinit
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiFlash_SysInit
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fram_SysInit
</UL>

<P><STRONG><a name="[f3]"></a>osMutexRelease</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, cmsis_os.o(i.osMutexRelease))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = osMutexRelease &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inHandlerMode
</UL>
<BR>[Called By]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteData_SPIFlash
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteData_FRAM
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadData_SPIFlash
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadData_FRAM
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dogInit
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createIWDG
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_main
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_init
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XY_188Send_Code_QInput
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveLog
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NWK_Send_Code_QInput
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HbMainTask
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HbInit
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HZCRL_188Send_Code_QInput
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT2X_188Send_Code_QInput
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY_2000Send_Code_QInput
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY_188Send_Code_QInput
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY_1000Send_Code_QInput
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY1000_Pack_TxServer_S
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDF2_Send_Code_QInput
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BRC_188Send_Code_QInput
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AlarmClk_ParaSet
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task13_F
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task12_F
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task09_F
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task08_F
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task07_F
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task01_F
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Alarm_UserShare_CallBack
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Alarm_DataSave_CallBack
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verifyProcessFile
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiFlashWrite
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiFlashRead
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiFlashErase
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_file_type
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY1000_Pack_Rx_S
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDF2_Pack_Rx_S
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BRC188_Pack_Rx_S
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT2X188_Pack_Rx_S
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XY188_Pack_Rx_S
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HZCRL_Pack_Rx_S
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY2000_Pack_Rx_S
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY188_Pack_Rx_S
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NWK_Pack_Rx_S
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userparareset
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userpara
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userdatareset
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userdata
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systemparareset
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysdataresetall
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setsystype
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setsn
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setshare
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setsend
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setread
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printenv
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;devicestatus
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deviceparareset
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;devicepara
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;devicedatareset
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;devicedata
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ddf2ctrl
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;changeDeviceNum
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClirateSet
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Guard
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveDeviceInfo
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateFileName
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkCard
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MountFS
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisSDCard
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ps_p
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ps_none
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ps_a
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ps_A
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freecmd
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;down_env_data
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiFlashCopy
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialDownload
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calMd5_hash_SPI
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reboot
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tab_complete
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_bad_command
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_input
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_input
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadData_SPIFlash_UnSafe
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printAllAlarm
</UL>

<P><STRONG><a name="[ef]"></a>osMutexWait</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, cmsis_os.o(i.osMutexWait))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = osMutexWait &rArr; xQueueGenericReceive &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceiveFromISR
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inHandlerMode
</UL>
<BR>[Called By]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteData_SPIFlash
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteData_FRAM
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadData_SPIFlash
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadData_FRAM
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dogInit
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createIWDG
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_main
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_init
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XY_188Send_Code_QInput
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveLog
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NWK_Send_Code_QInput
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HbMainTask
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HbInit
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HZCRL_188Send_Code_QInput
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT2X_188Send_Code_QInput
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY_2000Send_Code_QInput
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY_188Send_Code_QInput
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY_1000Send_Code_QInput
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY1000_Pack_TxServer_S
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDF2_Send_Code_QInput
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BRC_188Send_Code_QInput
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AlarmClk_ParaSet
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task13_F
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task12_F
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task09_F
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task08_F
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task07_F
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task01_F
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Alarm_UserShare_CallBack
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Alarm_DataSave_CallBack
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verifyProcessFile
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiFlashWrite
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiFlashRead
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiFlashErase
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_file_type
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY1000_Pack_Rx_S
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDF2_Pack_Rx_S
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BRC188_Pack_Rx_S
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT2X188_Pack_Rx_S
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XY188_Pack_Rx_S
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HZCRL_Pack_Rx_S
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY2000_Pack_Rx_S
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY188_Pack_Rx_S
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NWK_Pack_Rx_S
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userparareset
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userpara
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userdatareset
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userdata
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systemparareset
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysdataresetall
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setsystype
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setsn
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setshare
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setsend
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setread
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printenv
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;devicestatus
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deviceparareset
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;devicepara
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;devicedatareset
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;devicedata
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ddf2ctrl
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;changeDeviceNum
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClirateSet
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Guard
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveDeviceInfo
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateFileName
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkCard
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MountFS
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisSDCard
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ps_p
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ps_none
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ps_a
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ps_A
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freecmd
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;down_env_data
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiFlashCopy
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialDownload
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calMd5_hash_SPI
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reboot
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tab_complete
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_bad_command
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_input
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_input
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadData_SPIFlash_UnSafe
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printAllAlarm
</UL>

<P><STRONG><a name="[2cb]"></a>osSystickHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, cmsis_os.o(i.osSystickHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = osSystickHandler &rArr; xPortSysTickHandler &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortSysTickHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[2e7]"></a>osThreadTerminate</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, cmsis_os.o(i.osThreadTerminate))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = osThreadTerminate &rArr; vTaskDelete &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskCli
</UL>

<P><STRONG><a name="[2d5]"></a>osTimerCreate</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, cmsis_os.o(i.osTimerCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = osTimerCreate &rArr; xTimerCreate &rArr; prvInitialiseNewTimer &rArr; prvCheckForValidListAndQueue &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task03_F
</UL>

<P><STRONG><a name="[2d6]"></a>osTimerStart</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, cmsis_os.o(i.osTimerStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = osTimerStart &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inHandlerMode
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task03_F
</UL>

<P><STRONG><a name="[236]"></a>pack_Hton</STRONG> (Thumb, 134 bytes, Stack size 8 bytes, hzcrl_xpro.o(i.pack_Hton))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pack_Hton
</UL>
<BR>[Calls]<UL><LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_htons
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_htonl
</UL>
<BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HZCRL_Pack_Rx_S
</UL>

<P><STRONG><a name="[c4]"></a>powrelayctrl</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, sys_state.o(i.powrelayctrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = powrelayctrl &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_cli.o(.constdata)
</UL>
<P><STRONG><a name="[321]"></a>printAllAlarm</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, alarmclk.o(i.printAllAlarm))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = printAllAlarm &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getRealTime
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexWait
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarm
</UL>

<P><STRONG><a name="[aa]"></a>printServer</STRONG> (Thumb, 84 bytes, Stack size 48 bytes, debug.o(i.printServer))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = printServer &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printServerIP
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_cli.o(.constdata)
</UL>
<P><STRONG><a name="[396]"></a>printServerIP</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, updateparm.o(i.printServerIP))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = printServerIP &rArr; getServerIP
</UL>
<BR>[Calls]<UL><LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getServerIP
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printServer
</UL>

<P><STRONG><a name="[a7]"></a>printenv</STRONG> (Thumb, 2172 bytes, Stack size 64 bytes, sys_state.o(i.printenv))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = printenv &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexWait
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_cli.o(.constdata)
</UL>
<P><STRONG><a name="[ab]"></a>ps</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, debug.o(i.ps))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = ps &rArr; ps_p &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ps_p
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ps_none
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ps_a
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ps_A
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_cli.o(.constdata)
</UL>
<P><STRONG><a name="[3c3]"></a>ps_A</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, similarlinux.o(i.ps_A))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = ps_A &rArr; vTaskList &rArr; uxTaskGetSystemState &rArr; prvListTasksWithinSingleList &rArr; vTaskGetInfo &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskList
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxTaskGetNumberOfTasks
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexWait
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ps
</UL>

<P><STRONG><a name="[3c2]"></a>ps_a</STRONG> (Thumb, 188 bytes, Stack size 32 bytes, similarlinux.o(i.ps_a))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = ps_a &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxTaskGetSystemState
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxTaskGetNumberOfTasks
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexWait
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ps
</UL>

<P><STRONG><a name="[3c1]"></a>ps_none</STRONG> (Thumb, 266 bytes, Stack size 32 bytes, similarlinux.o(i.ps_none))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = ps_none &rArr; vTaskGetRunTimeStats &rArr; uxTaskGetSystemState &rArr; prvListTasksWithinSingleList &rArr; vTaskGetInfo &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;feedIWDG
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskGetRunTimeStats
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxTaskGetNumberOfTasks
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexWait
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getc
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ps
</UL>

<P><STRONG><a name="[3c4]"></a>ps_p</STRONG> (Thumb, 430 bytes, Stack size 80 bytes, similarlinux.o(i.ps_p))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = ps_p &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskGetInfo
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxTaskGetSystemState
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxTaskGetNumberOfTasks
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexWait
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ps
</UL>

<P><STRONG><a name="[33a]"></a>put_fat</STRONG> (Thumb, 326 bytes, Stack size 32 bytes, ff.o(i.put_fat))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>
<BR>[Called By]<UL><LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
</UL>

<P><STRONG><a name="[2bd]"></a>putc</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, putc.o(i.putc))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = putc &rArr; fputc &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>
<BR>[Called By]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Byte
</UL>

<P><STRONG><a name="[19e]"></a>pvPortMalloc</STRONG> (Thumb, 296 bytes, Stack size 24 bytes, heap_4.o(i.pvPortMalloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertBlockIntoFreeList
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvHeapInit
</UL>
<BR>[Called By]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_init
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupCreate
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskList
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskGetRunTimeStats
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreate
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_file_type
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY1000_Pack_Rx_S
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveDeviceInfo
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ps_p
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ps_none
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ps_a
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ps_A
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kfifo_init
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kfifo_alloc
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadData_SPIFlash_UnSafe
</UL>

<P><STRONG><a name="[3e4]"></a>pvTaskIncrementMutexHeldCount</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, tasks.o(i.pvTaskIncrementMutexHeldCount))
<BR><BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[3ae]"></a>pxPortInitialiseStack</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, port.o(i.pxPortInitialiseStack))
<BR><BR>[Called By]<UL><LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>

<P><STRONG><a name="[a4]"></a>reboot</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, debug.o(i.reboot))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = reboot &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexWait
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_cli.o(.constdata)
</UL>
<P><STRONG><a name="[bc]"></a>saveData</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, debug.o(i.saveData))
<BR><BR>[Stack]<UL><LI>Max Depth = 1680<LI>Call Chain = saveData &rArr; SaveLog &rArr; SaveDeviceInfo &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveLog
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_cli.o(.constdata)
</UL>
<P><STRONG><a name="[a8]"></a>setEnvParameter</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, debug.o(i.setEnvParameter))
<BR><BR>[Stack]<UL><LI>Max Depth = 1408<LI>Call Chain = setEnvParameter &rArr; down_env_data &rArr; SerialDownload &rArr; Ymodem_Receive &rArr; spiFlashWrite &rArr; W25QXX_SectorWrite &rArr; W25QXX_PageWrite &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR &rArr; SPI1_ReadWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;down_env_data
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_cli.o(.constdata)
</UL>
<P><STRONG><a name="[a9]"></a>setServer</STRONG> (Thumb, 264 bytes, Stack size 24 bytes, debug.o(i.setServer))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = setServer &rArr; updateServerIP &rArr; setServerIP &rArr; SysPara_Update &rArr; WriteData_SPIFlash &rArr; WriteData_SPIFlash_UnSafe &rArr; W25QXX_WriteBuffer &rArr; W25QXX_SectorWrite &rArr; W25QXX_PageWrite &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR &rArr; SPI1_ReadWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateServerIP
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_cli.o(.constdata)
</UL>
<P><STRONG><a name="[23d]"></a>setServerIP</STRONG> (Thumb, 132 bytes, Stack size 104 bytes, app_ui.o(i.setServerIP))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = setServerIP &rArr; SysPara_Update &rArr; WriteData_SPIFlash &rArr; WriteData_SPIFlash_UnSafe &rArr; W25QXX_WriteBuffer &rArr; W25QXX_SectorWrite &rArr; W25QXX_PageWrite &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR &rArr; SPI1_ReadWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysPara_Update
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY_1000Send_Code_QInput
</UL>
<BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HbMainTask
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateServerIP
</UL>

<P><STRONG><a name="[c1]"></a>setread</STRONG> (Thumb, 334 bytes, Stack size 24 bytes, sys_state.o(i.setread))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = setread &rArr; SysPara_Update &rArr; WriteData_SPIFlash &rArr; WriteData_SPIFlash_UnSafe &rArr; W25QXX_WriteBuffer &rArr; W25QXX_SectorWrite &rArr; W25QXX_PageWrite &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR &rArr; SPI1_ReadWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysPara_Update
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexWait
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_cli.o(.constdata)
</UL>
<P><STRONG><a name="[c2]"></a>setsend</STRONG> (Thumb, 332 bytes, Stack size 32 bytes, sys_state.o(i.setsend))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = setsend &rArr; SysPara_Update &rArr; WriteData_SPIFlash &rArr; WriteData_SPIFlash_UnSafe &rArr; W25QXX_WriteBuffer &rArr; W25QXX_SectorWrite &rArr; W25QXX_PageWrite &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR &rArr; SPI1_ReadWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysPara_Update
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexWait
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_cli.o(.constdata)
</UL>
<P><STRONG><a name="[c3]"></a>setshare</STRONG> (Thumb, 230 bytes, Stack size 24 bytes, sys_state.o(i.setshare))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = setshare &rArr; SysPara_Update &rArr; WriteData_SPIFlash &rArr; WriteData_SPIFlash_UnSafe &rArr; W25QXX_WriteBuffer &rArr; W25QXX_SectorWrite &rArr; W25QXX_PageWrite &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR &rArr; SPI1_ReadWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysPara_Update
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexWait
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_cli.o(.constdata)
</UL>
<P><STRONG><a name="[c0]"></a>setsn</STRONG> (Thumb, 196 bytes, Stack size 32 bytes, sys_state.o(i.setsn))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = setsn &rArr; SysPara_Update &rArr; WriteData_SPIFlash &rArr; WriteData_SPIFlash_UnSafe &rArr; W25QXX_WriteBuffer &rArr; W25QXX_SectorWrite &rArr; W25QXX_PageWrite &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR &rArr; SPI1_ReadWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysPara_Update
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexWait
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HexToBcd4
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_cli.o(.constdata)
</UL>
<P><STRONG><a name="[bb]"></a>setsystype</STRONG> (Thumb, 390 bytes, Stack size 24 bytes, sys_state.o(i.setsystype))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = setsystype &rArr; SysPara_Update &rArr; WriteData_SPIFlash &rArr; WriteData_SPIFlash_UnSafe &rArr; W25QXX_WriteBuffer &rArr; W25QXX_SectorWrite &rArr; W25QXX_PageWrite &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR &rArr; SPI1_ReadWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysPara_Update
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexWait
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_cli.o(.constdata)
</UL>
<P><STRONG><a name="[b7]"></a>settime</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, sys_state.o(i.settime))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = settime &rArr; updatetime &rArr; PCF8563_Set &rArr; PCF8563_Set_DEV &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updatetime
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_cli.o(.constdata)
</UL>
<P><STRONG><a name="[b9]"></a>settime_f</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, sys_state.o(i.settime_f))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = settime_f &rArr; updatetimef &rArr; SysPara_Update &rArr; WriteData_SPIFlash &rArr; WriteData_SPIFlash_UnSafe &rArr; W25QXX_WriteBuffer &rArr; W25QXX_SectorWrite &rArr; W25QXX_PageWrite &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR &rArr; SPI1_ReadWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updatetimef
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_cli.o(.constdata)
</UL>
<P><STRONG><a name="[b8]"></a>settime_s</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, sys_state.o(i.settime_s))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = settime_s &rArr; updatetimes &rArr; SysPara_Update &rArr; WriteData_SPIFlash &rArr; WriteData_SPIFlash_UnSafe &rArr; W25QXX_WriteBuffer &rArr; W25QXX_SectorWrite &rArr; W25QXX_PageWrite &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR &rArr; SPI1_ReadWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updatetimes
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_cli.o(.constdata)
</UL>
<P><STRONG><a name="[19c]"></a>spiFlashErase</STRONG> (Thumb, 232 bytes, Stack size 32 bytes, w25qxx.o(i.spiFlashErase))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = spiFlashErase &rArr; W25QXX_Erase_Sector &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR &rArr; SPI1_ReadWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexWait
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Erase_Sector
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY1000_Pack_Rx_S
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;contextSave
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;contextInit
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiFlashCopy
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialDownload
</UL>

<P><STRONG><a name="[19f]"></a>spiFlashRead</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, w25qxx.o(i.spiFlashRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = spiFlashRead &rArr; W25QXX_ReadBuffer &rArr; SPI1_ReadWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexWait
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_ReadBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verifyProcessFile
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY1000_Pack_Rx_S
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;contextLoad
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiFlashCopy
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calMd5_hash_SPI
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ymodem_Receive
</UL>

<P><STRONG><a name="[19d]"></a>spiFlashWrite</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, w25qxx.o(i.spiFlashWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = spiFlashWrite &rArr; W25QXX_SectorWrite &rArr; W25QXX_PageWrite &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR &rArr; SPI1_ReadWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexWait
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_SectorWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY1000_Pack_Rx_S
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;contextSave
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;contextInit
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiFlashCopy
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ymodem_Receive
</UL>

<P><STRONG><a name="[b6]"></a>sysdataresetall</STRONG> (Thumb, 366 bytes, Stack size 24 bytes, sys_state.o(i.sysdataresetall))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = sysdataresetall &rArr; SysDevData_ResetALL &rArr; SysDevData_Update &rArr; WriteData_FRAM &rArr; WriteData_FRAM_UnSafe &rArr; ReadData_FRAM_UnSafe &rArr; FRAM_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysPara_Reset
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexWait
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysDeviceList_Reset
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysDevData_ResetALL
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserData_ResetALL
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysUserList_Reset
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_cli.o(.constdata)
</UL>
<P><STRONG><a name="[b1]"></a>systemparareset</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, sys_state.o(i.systemparareset))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = systemparareset &rArr; SysPara_Reset &rArr; SysPara_Update &rArr; WriteData_SPIFlash &rArr; WriteData_SPIFlash_UnSafe &rArr; W25QXX_WriteBuffer &rArr; W25QXX_SectorWrite &rArr; W25QXX_PageWrite &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR &rArr; SPI1_ReadWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysPara_Reset
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexWait
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_cli.o(.constdata)
</UL>
<P><STRONG><a name="[190]"></a>tcpRevEvent</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, heartbeat.o(i.tcpRevEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = tcpRevEvent &rArr; xEventGroupSetBits &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY1000_Pack_Rx_S
</UL>

<P><STRONG><a name="[3cb]"></a>updateServerIP</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, updateparm.o(i.updateServerIP))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = updateServerIP &rArr; setServerIP &rArr; SysPara_Update &rArr; WriteData_SPIFlash &rArr; WriteData_SPIFlash_UnSafe &rArr; W25QXX_WriteBuffer &rArr; W25QXX_SectorWrite &rArr; W25QXX_PageWrite &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR &rArr; SPI1_ReadWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setServerIP
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isValidStr
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setServer
</UL>

<P><STRONG><a name="[337]"></a>update_crc_16</STRONG> (Thumb, 22 bytes, Stack size 12 bytes, check.o(i.update_crc_16))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = update_crc_16
</UL>
<BR>[Called By]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc_16_modbus
</UL>

<P><STRONG><a name="[3cc]"></a>updatetime</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, sys_state.o(i.updatetime))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = updatetime &rArr; PCF8563_Set &rArr; PCF8563_Set_DEV &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCF8563_Set
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settime
</UL>

<P><STRONG><a name="[3cd]"></a>updatetimef</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, sys_state.o(i.updatetimef))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = updatetimef &rArr; SysPara_Update &rArr; WriteData_SPIFlash &rArr; WriteData_SPIFlash_UnSafe &rArr; W25QXX_WriteBuffer &rArr; W25QXX_SectorWrite &rArr; W25QXX_PageWrite &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR &rArr; SPI1_ReadWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysPara_Update
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settime_f
</UL>

<P><STRONG><a name="[3ce]"></a>updatetimes</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, sys_state.o(i.updatetimes))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = updatetimes &rArr; SysPara_Update &rArr; WriteData_SPIFlash &rArr; WriteData_SPIFlash_UnSafe &rArr; W25QXX_WriteBuffer &rArr; W25QXX_SectorWrite &rArr; W25QXX_PageWrite &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR &rArr; SPI1_ReadWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysPara_Update
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settime_s
</UL>

<P><STRONG><a name="[a5]"></a>uptime_Command</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, debug.o(i.uptime_Command))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = uptime_Command &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_cli.o(.constdata)
</UL>
<P><STRONG><a name="[ae]"></a>userdata</STRONG> (Thumb, 366 bytes, Stack size 40 bytes, sys_state.o(i.userdata))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = userdata &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexWait
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_cli.o(.constdata)
</UL>
<P><STRONG><a name="[b4]"></a>userdatareset</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, sys_state.o(i.userdatareset))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = userdatareset &rArr; UserData_ResetALL &rArr; UserData_Update &rArr; WriteData_FRAM &rArr; WriteData_FRAM_UnSafe &rArr; ReadData_FRAM_UnSafe &rArr; FRAM_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexWait
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserData_ResetALL
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_cli.o(.constdata)
</UL>
<P><STRONG><a name="[ac]"></a>userpara</STRONG> (Thumb, 326 bytes, Stack size 32 bytes, sys_state.o(i.userpara))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = userpara &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexWait
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_cli.o(.constdata)
</UL>
<P><STRONG><a name="[b2]"></a>userparareset</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, sys_state.o(i.userparareset))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = userparareset &rArr; SysUserList_Reset &rArr; SysUserList_Update &rArr; WriteData_SPIFlash &rArr; WriteData_SPIFlash_UnSafe &rArr; W25QXX_WriteBuffer &rArr; W25QXX_SectorWrite &rArr; W25QXX_PageWrite &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR &rArr; SPI1_ReadWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexWait
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysUserList_Reset
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_cli.o(.constdata)
</UL>
<P><STRONG><a name="[399]"></a>uxListRemove</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, list.o(i.uxListRemove))
<BR><BR>[Called By]<UL><LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessExpiredTimer
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityInherit
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromUnorderedEventList
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>

<P><STRONG><a name="[2db]"></a>uxQueueSpacesAvailable</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, queue.o(i.uxQueueSpacesAvailable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = uxQueueSpacesAvailable
</UL>
<BR>[Calls]<UL><LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task08_F
</UL>

<P><STRONG><a name="[3c5]"></a>uxTaskGetNumberOfTasks</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tasks.o(i.uxTaskGetNumberOfTasks))
<BR><BR>[Called By]<UL><LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ps_p
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ps_none
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ps_a
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ps_A
</UL>

<P><STRONG><a name="[3c7]"></a>uxTaskGetSystemState</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, tasks.o(i.uxTaskGetSystemState))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = uxTaskGetSystemState &rArr; prvListTasksWithinSingleList &rArr; vTaskGetInfo &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvListTasksWithinSingleList
</UL>
<BR>[Called By]<UL><LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskList
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskGetRunTimeStats
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ps_p
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ps_a
</UL>

<P><STRONG><a name="[3df]"></a>uxTaskResetEventItemValue</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, tasks.o(i.uxTaskResetEventItemValue))
<BR><BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
</UL>

<P><STRONG><a name="[3a8]"></a>vApplicationIdleHook</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, main.o(i.vApplicationIdleHook))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = vApplicationIdleHook &rArr; PulseCtrl_Executing
</UL>
<BR>[Calls]<UL><LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PulseCtrl_Executing
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
</UL>

<P><STRONG><a name="[39f]"></a>vListInitialise</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, list.o(i.vListInitialise))
<BR><BR>[Called By]<UL><LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupCreate
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseTaskLists
</UL>

<P><STRONG><a name="[3ad]"></a>vListInitialiseItem</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, list.o(i.vListInitialiseItem))
<BR><BR>[Called By]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTimer
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>

<P><STRONG><a name="[39b]"></a>vListInsert</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, list.o(i.vListInsert))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertTimerInActiveList
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>

<P><STRONG><a name="[39a]"></a>vListInsertEnd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, list.o(i.vListInsertEnd))
<BR><BR>[Called By]<UL><LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityInherit
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromUnorderedEventList
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnUnorderedEventList
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>

<P><STRONG><a name="[354]"></a>vPortEnterCritical</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, port.o(i.vPortEnterCritical))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxQueueSpacesAvailable
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueFull
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eTaskGetState
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ps_p
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ps_none
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ps_a
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ps_A
</UL>

<P><STRONG><a name="[355]"></a>vPortExitCritical</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, port.o(i.vPortExitCritical))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxQueueSpacesAvailable
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueFull
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eTaskGetState
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ps_p
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ps_none
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ps_a
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ps_A
</UL>

<P><STRONG><a name="[1a0]"></a>vPortFree</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, heap_4.o(i.vPortFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertBlockIntoFreeList
</UL>
<BR>[Called By]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_main
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_init
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskList
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskGetRunTimeStats
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_file_type
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY1000_Pack_Rx_S
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveDeviceInfo
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ps_p
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ps_none
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ps_a
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ps_A
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kfifo_alloc
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadData_SPIFlash_UnSafe
</UL>

<P><STRONG><a name="[3e0]"></a>vPortSetupTimerInterrupt</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, port.o(i.vPortSetupTimerInterrupt))
<BR><BR>[Called By]<UL><LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[3d2]"></a>vPortValidateInterruptPriority</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, port.o(i.vPortValidateInterruptPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = vPortValidateInterruptPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortGetIPSR
</UL>
<BR>[Called By]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceiveFromISR
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCountFromISR
</UL>

<P><STRONG><a name="[3a0]"></a>vQueueAddToRegistry</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, queue.o(i.vQueueAddToRegistry))
<BR><BR>[Called By]<UL><LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
</UL>

<P><STRONG><a name="[3b9]"></a>vQueueWaitForMessageRestricted</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, queue.o(i.vQueueWaitForMessageRestricted))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = vQueueWaitForMessageRestricted &rArr; vTaskPlaceOnEventListRestricted &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
</UL>

<P><STRONG><a name="[389]"></a>vTaskDelay</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, tasks.o(i.vTaskDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
</UL>

<P><STRONG><a name="[392]"></a>vTaskDelete</STRONG> (Thumb, 202 bytes, Stack size 16 bytes, tasks.o(i.vTaskDelete))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = vTaskDelete &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadTerminate
</UL>

<P><STRONG><a name="[3b4]"></a>vTaskGetInfo</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, tasks.o(i.vTaskGetInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = vTaskGetInfo &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eTaskGetState
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTaskCheckFreeStackSpace
</UL>
<BR>[Called By]<UL><LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvListTasksWithinSingleList
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ps_p
</UL>

<P><STRONG><a name="[3c8]"></a>vTaskGetRunTimeStats</STRONG> (Thumb, 182 bytes, Stack size 32 bytes, tasks.o(i.vTaskGetRunTimeStats))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = vTaskGetRunTimeStats &rArr; uxTaskGetSystemState &rArr; prvListTasksWithinSingleList &rArr; vTaskGetInfo &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxTaskGetSystemState
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvWriteNameToBuffer
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ps_none
</UL>

<P><STRONG><a name="[3c6]"></a>vTaskList</STRONG> (Thumb, 204 bytes, Stack size 32 bytes, tasks.o(i.vTaskList))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = vTaskList &rArr; uxTaskGetSystemState &rArr; prvListTasksWithinSingleList &rArr; vTaskGetInfo &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxTaskGetSystemState
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvWriteNameToBuffer
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ps_A
</UL>

<P><STRONG><a name="[3be]"></a>vTaskMissedYield</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tasks.o(i.vTaskMissedYield))
<BR><BR>[Called By]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[3d7]"></a>vTaskPlaceOnEventList</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, tasks.o(i.vTaskPlaceOnEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[3d4]"></a>vTaskPlaceOnEventListRestricted</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, tasks.o(i.vTaskPlaceOnEventListRestricted))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = vTaskPlaceOnEventListRestricted &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>
<BR>[Called By]<UL><LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
</UL>

<P><STRONG><a name="[3d8]"></a>vTaskPlaceOnUnorderedEventList</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, tasks.o(i.vTaskPlaceOnUnorderedEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = vTaskPlaceOnUnorderedEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>
<BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
</UL>

<P><STRONG><a name="[3d9]"></a>vTaskPriorityInherit</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, tasks.o(i.vTaskPriorityInherit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = vTaskPriorityInherit
</UL>
<BR>[Calls]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[3e5]"></a>vTaskSetTimeOutState</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, tasks.o(i.vTaskSetTimeOutState))
<BR><BR>[Called By]<UL><LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[38a]"></a>vTaskStartScheduler</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, tasks.o(i.vTaskStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = vTaskStartScheduler &rArr; xTimerCreateTimerTask &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigureTimeForRunTimeStats
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
</UL>
<BR>[Called By]<UL><LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
</UL>

<P><STRONG><a name="[3a2]"></a>vTaskSuspendAll</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tasks.o(i.vTaskSuspendAll))
<BR><BR>[Called By]<UL><LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSetBits
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskGetInfo
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxTaskGetSystemState
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
</UL>

<P><STRONG><a name="[ca]"></a>vTaskSwitchContext</STRONG> (Thumb, 172 bytes, Stack size 0 bytes, tasks.o(i.vTaskSwitchContext))
<BR><BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>

<P><STRONG><a name="[1a4]"></a>verifyProcessFile</STRONG> (Thumb, 1898 bytes, Stack size 112 bytes, updateparm.o(i.verifyProcessFile))
<BR><BR>[Stack]<UL><LI>Max Depth = 632<LI>Call Chain = verifyProcessFile &rArr; calMd5_hash_SPI &rArr; MD5_Finish &rArr; crl_u_MD5_Finish &rArr; crl_u_MD5_Update &rArr; md5_process &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexWait
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelSysTick
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiFlashRead
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sprintfhex
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiFlashCopy
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calMd5_hash_SPI
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strrchr
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY1000_Pack_Rx_S
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;down_env_data
</UL>

<P><STRONG><a name="[239]"></a>xEventGroupCreate</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, event_groups.o(i.xEventGroupCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = xEventGroupCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dogInit
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HbInit
</UL>

<P><STRONG><a name="[36a]"></a>xEventGroupSetBits</STRONG> (Thumb, 206 bytes, Stack size 48 bytes, event_groups.o(i.xEventGroupSetBits))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = xEventGroupSetBits &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromUnorderedEventList
</UL>
<BR>[Called By]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;feedIWDG
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpRevEvent
</UL>

<P><STRONG><a name="[23c]"></a>xEventGroupWaitBits</STRONG> (Thumb, 334 bytes, Stack size 64 bytes, event_groups.o(i.xEventGroupWaitBits))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = xEventGroupWaitBits &rArr; vTaskPlaceOnUnorderedEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTestWaitCondition
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnUnorderedEventList
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxTaskResetEventItemValue
</UL>
<BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HbMainTask
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Guard
</UL>

<P><STRONG><a name="[371]"></a>xPortGetFreeHeapSize</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, heap_4.o(i.xPortGetFreeHeapSize))
<BR><BR>[Called By]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freecmd
</UL>

<P><STRONG><a name="[3db]"></a>xPortStartScheduler</STRONG> (Thumb, 288 bytes, Stack size 16 bytes, port.o(i.xPortStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xPortStartScheduler
</UL>
<BR>[Calls]<UL><LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSetupTimerInterrupt
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___6_port_c_39a90d8d__prvEnableVFP
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___6_port_c_39a90d8d__prvStartFirstTask
</UL>
<BR>[Called By]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[391]"></a>xPortSysTickHandler</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, port.o(i.xPortSysTickHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = xPortSysTickHandler &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>
<BR>[Called By]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSystickHandler
</UL>

<P><STRONG><a name="[387]"></a>xQueueCreateCountingSemaphore</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, queue.o(i.xQueueCreateCountingSemaphore))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = xQueueCreateCountingSemaphore &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[38d]"></a>xQueueCreateMutex</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, queue.o(i.xQueueCreateMutex))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = xQueueCreateMutex &rArr; prvInitialiseMutex &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseMutex
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexCreate
</UL>

<P><STRONG><a name="[386]"></a>xQueueGenericCreate</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, queue.o(i.xQueueGenericCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateCountingSemaphore
</UL>

<P><STRONG><a name="[106]"></a>xQueueGenericReceive</STRONG> (Thumb, 446 bytes, Stack size 56 bytes, queue.o(i.xQueueGenericReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = xQueueGenericReceive &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSetTimeOutState
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityInherit
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvTaskIncrementMutexHeldCount
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XY188_Pack_TxServer_S
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NWK_Pack_TxServer_S
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HZCRL_Pack_TxServer_S
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT2X188_Pack_TxServer_S
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY2000_Pack_TxServer_S
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY188_Pack_TxServer_S
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FY1000_Pack_TxServer_S
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDF2_Pack_TxServer_S
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BRC188_Pack_TxServer_S
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task12_F
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task08_F
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task04_F
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task03_F
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexWait
</UL>

<P><STRONG><a name="[3ab]"></a>xQueueGenericReset</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, queue.o(i.xQueueGenericReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewQueue
</UL>

<P><STRONG><a name="[f7]"></a>xQueueGenericSend</STRONG> (Thumb, 420 bytes, Stack size 56 bytes, queue.o(i.xQueueGenericSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSetTimeOutState
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueFull
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TO_XY188_CCB_QueueSend
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TO_NWK_CCB_QueueSend
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TO_HZCRL_CCB_QueueSend
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TO_HT2X188_CCB_QueueSend
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TO_FY2000_CCB_QueueSend
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TO_FY188_CCB_QueueSend
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TO_DDF2_CCB_QueueSend
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TO_BRC188_CCB_QueueSend
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer01Callback
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task04_F
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task03_F
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Alarm_UserShare_CallBack
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseMutex
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TO_FY1000_CCB_QueueSend
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClientCH1_QueueSend
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyOUT_K6
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyOUT_K5
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyOUT_K4
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyOUT_K3
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyOUT_K2
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyOUT_K1
</UL>

<P><STRONG><a name="[3e7]"></a>xQueueGenericSendFromISR</STRONG> (Thumb, 248 bytes, Stack size 40 bytes, queue.o(i.xQueueGenericSendFromISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
</UL>

<P><STRONG><a name="[38e]"></a>xQueueGiveFromISR</STRONG> (Thumb, 224 bytes, Stack size 32 bytes, queue.o(i.xQueueGiveFromISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = xQueueGiveFromISR &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
</UL>

<P><STRONG><a name="[38f]"></a>xQueueReceiveFromISR</STRONG> (Thumb, 202 bytes, Stack size 40 bytes, queue.o(i.xQueueReceiveFromISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = xQueueReceiveFromISR &rArr; prvCopyDataFromQueue &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexWait
</UL>

<P><STRONG><a name="[3e6]"></a>xTaskCheckForTimeOut</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, tasks.o(i.xTaskCheckForTimeOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskCheckForTimeOut
</UL>
<BR>[Calls]<UL><LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSetTimeOutState
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[351]"></a>xTaskCreate</STRONG> (Thumb, 96 bytes, Stack size 72 bytes, tasks.o(i.xTaskCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>
<BR>[Called By]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dogInit
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
</UL>

<P><STRONG><a name="[390]"></a>xTaskGetSchedulerState</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, tasks.o(i.xTaskGetSchedulerState))
<BR><BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSystickHandler
</UL>

<P><STRONG><a name="[23a]"></a>xTaskGetTickCount</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tasks.o(i.xTaskGetTickCount))
<BR><BR>[Called By]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_main
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HbMainTask
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HbInit
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationIdleHook
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelSysTick
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Receive_Byte
</UL>

<P><STRONG><a name="[38c]"></a>xTaskGetTickCountFromISR</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, tasks.o(i.xTaskGetTickCountFromISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = xTaskGetTickCountFromISR &rArr; vPortValidateInterruptPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelSysTick
</UL>

<P><STRONG><a name="[3e3]"></a>xTaskIncrementTick</STRONG> (Thumb, 282 bytes, Stack size 24 bytes, tasks.o(i.xTaskIncrementTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortSysTickHandler
</UL>

<P><STRONG><a name="[3a7]"></a>xTaskPriorityDisinherit</STRONG> (Thumb, 188 bytes, Stack size 16 bytes, tasks.o(i.xTaskPriorityDisinherit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
</UL>

<P><STRONG><a name="[3bd]"></a>xTaskRemoveFromEventList</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, tasks.o(i.xTaskRemoveFromEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceiveFromISR
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[3dd]"></a>xTaskRemoveFromUnorderedEventList</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, tasks.o(i.xTaskRemoveFromUnorderedEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = xTaskRemoveFromUnorderedEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSetBits
</UL>

<P><STRONG><a name="[3a3]"></a>xTaskResumeAll</STRONG> (Thumb, 224 bytes, Stack size 16 bytes, tasks.o(i.xTaskResumeAll))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSetBits
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskGetInfo
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxTaskGetSystemState
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
</UL>

<P><STRONG><a name="[393]"></a>xTimerCreate</STRONG> (Thumb, 48 bytes, Stack size 40 bytes, timers.o(i.xTimerCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = xTimerCreate &rArr; prvInitialiseNewTimer &rArr; prvCheckForValidListAndQueue &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTimer
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerCreate
</UL>

<P><STRONG><a name="[3da]"></a>xTimerCreateTimerTask</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, timers.o(i.xTimerCreateTimerTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = xTimerCreateTimerTask &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[394]"></a>xTimerGenericCommand</STRONG> (Thumb, 128 bytes, Stack size 48 bytes, timers.o(i.xTimerGenericCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = xTimerGenericCommand &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessExpiredTimer
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerStart
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[1e3]"></a>NVIC_GetPriorityGrouping</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(i.NVIC_GetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[1e4]"></a>NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32f4xx_hal_cortex.o(i.NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[1ca]"></a>DMA_CalcBaseAndBitshift</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, stm32f4xx_hal_dma.o(i.DMA_CalcBaseAndBitshift))
<BR><BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_DeInit
</UL>

<P><STRONG><a name="[1cc]"></a>DMA_CheckFifoParam</STRONG> (Thumb, 170 bytes, Stack size 0 bytes, stm32f4xx_hal_dma.o(i.DMA_CheckFifoParam))
<BR><BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
</UL>

<P><STRONG><a name="[1ce]"></a>DMA_SetConfig</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, stm32f4xx_hal_dma.o(i.DMA_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = DMA_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>

<P><STRONG><a name="[66]"></a>UART_DMAAbortOnError</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, stm32f4xx_hal_uart.o(i.UART_DMAAbortOnError))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_DMAAbortOnError
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_uart.o(i.HAL_UART_IRQHandler)
</UL>
<P><STRONG><a name="[69]"></a>UART_DMAError</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, stm32f4xx_hal_uart.o(i.UART_DMAError))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_DMAError
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndTxTransfer
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndRxTransfer
</UL>
<BR>[Address Reference Count : 2]<UL><LI> stm32f4xx_hal_uart.o(i.HAL_UART_Receive_DMA)
<LI> stm32f4xx_hal_uart.o(i.HAL_UART_Transmit_DMA)
</UL>
<P><STRONG><a name="[67]"></a>UART_DMAReceiveCplt</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, stm32f4xx_hal_uart.o(i.UART_DMAReceiveCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_DMAReceiveCplt
</UL>
<BR>[Calls]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_uart.o(i.HAL_UART_Receive_DMA)
</UL>
<P><STRONG><a name="[68]"></a>UART_DMARxHalfCplt</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, stm32f4xx_hal_uart.o(i.UART_DMARxHalfCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_DMARxHalfCplt
</UL>
<BR>[Calls]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxHalfCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_uart.o(i.HAL_UART_Receive_DMA)
</UL>
<P><STRONG><a name="[6a]"></a>UART_DMATransmitCplt</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, stm32f4xx_hal_uart.o(i.UART_DMATransmitCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_DMATransmitCplt
</UL>
<BR>[Calls]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_uart.o(i.HAL_UART_Transmit_DMA)
</UL>
<P><STRONG><a name="[6b]"></a>UART_DMATxHalfCplt</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, stm32f4xx_hal_uart.o(i.UART_DMATxHalfCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_DMATxHalfCplt
</UL>
<BR>[Calls]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxHalfCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_uart.o(i.HAL_UART_Transmit_DMA)
</UL>
<P><STRONG><a name="[21f]"></a>UART_EndRxTransfer</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(i.UART_EndRxTransfer))
<BR><BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_DMAStop
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAError
</UL>

<P><STRONG><a name="[225]"></a>UART_EndTransmit_IT</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32f4xx_hal_uart.o(i.UART_EndTransmit_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_EndTransmit_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[21e]"></a>UART_EndTxTransfer</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(i.UART_EndTxTransfer))
<BR><BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_DMAStop
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAError
</UL>

<P><STRONG><a name="[222]"></a>UART_Receive_IT</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, stm32f4xx_hal_uart.o(i.UART_Receive_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_Receive_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[227]"></a>UART_SetConfig</STRONG> (Thumb, 864 bytes, Stack size 24 bytes, stm32f4xx_hal_uart.o(i.UART_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = UART_SetConfig &rArr; HAL_RCC_GetPCLK2Freq
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[224]"></a>UART_Transmit_IT</STRONG> (Thumb, 104 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(i.UART_Transmit_IT))
<BR><BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[22a]"></a>UART_WaitOnFlagUntilTimeout</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, stm32f4xx_hal_uart.o(i.UART_WaitOnFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
</UL>

<P><STRONG><a name="[23f]"></a>I2C_IsAcknowledgeFailed</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, stm32f4xx_hal_i2c.o(i.I2C_IsAcknowledgeFailed))
<BR><BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXEFlagUntilTimeout
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnBTFFlagUntilTimeout
</UL>

<P><STRONG><a name="[1d3]"></a>I2C_RequestMemoryRead</STRONG> (Thumb, 340 bytes, Stack size 32 bytes, stm32f4xx_hal_i2c.o(i.I2C_RequestMemoryRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXEFlagUntilTimeout
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnMasterAddressFlagUntilTimeout
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
</UL>

<P><STRONG><a name="[1d5]"></a>I2C_RequestMemoryWrite</STRONG> (Thumb, 218 bytes, Stack size 32 bytes, stm32f4xx_hal_i2c.o(i.I2C_RequestMemoryWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = I2C_RequestMemoryWrite &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXEFlagUntilTimeout
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnMasterAddressFlagUntilTimeout
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
</UL>

<P><STRONG><a name="[1d7]"></a>I2C_WaitOnBTFFlagUntilTimeout</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, stm32f4xx_hal_i2c.o(i.I2C_WaitOnBTFFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2C_WaitOnBTFFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IsAcknowledgeFailed
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
</UL>

<P><STRONG><a name="[1d2]"></a>I2C_WaitOnFlagUntilTimeout</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, stm32f4xx_hal_i2c.o(i.I2C_WaitOnFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryWrite
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryRead
</UL>

<P><STRONG><a name="[23e]"></a>I2C_WaitOnMasterAddressFlagUntilTimeout</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, stm32f4xx_hal_i2c.o(i.I2C_WaitOnMasterAddressFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryWrite
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryRead
</UL>

<P><STRONG><a name="[1d4]"></a>I2C_WaitOnRXNEFlagUntilTimeout</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, stm32f4xx_hal_i2c.o(i.I2C_WaitOnRXNEFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2C_WaitOnRXNEFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
</UL>

<P><STRONG><a name="[1d6]"></a>I2C_WaitOnTXEFlagUntilTimeout</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, stm32f4xx_hal_i2c.o(i.I2C_WaitOnTXEFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2C_WaitOnTXEFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IsAcknowledgeFailed
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryWrite
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryRead
</UL>

<P><STRONG><a name="[208]"></a>SPI_CheckFlag_BSY</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, stm32f4xx_hal_spi.o(i.SPI_CheckFlag_BSY))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
</UL>

<P><STRONG><a name="[207]"></a>SPI_WaitFlagStateUntilTimeout</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, stm32f4xx_hal_spi.o(i.SPI_WaitFlagStateUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CheckFlag_BSY
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
</UL>

<P><STRONG><a name="[64]"></a>SD_DMAError</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, stm32f4xx_hal_sd.o(i.SD_DMAError))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = SD_DMAError &rArr; HAL_SD_GetCardState &rArr; SD_SendStatus &rArr; SDMMC_CmdSendStatus &rArr; SDMMC_GetCmdResp1 &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ErrorCallback
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdStopTransfer
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_GetCardState
</UL>
<BR>[Address Reference Count : 2]<UL><LI> stm32f4xx_hal_sd.o(i.HAL_SD_ReadBlocks_DMA)
<LI> stm32f4xx_hal_sd.o(i.HAL_SD_WriteBlocks_DMA)
</UL>
<P><STRONG><a name="[63]"></a>SD_DMAReceiveCplt</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, stm32f4xx_hal_sd.o(i.SD_DMAReceiveCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SD_DMAReceiveCplt &rArr; SDMMC_CmdStopTransfer &rArr; SDMMC_GetCmdResp1 &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_RxCpltCallback
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ErrorCallback
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdStopTransfer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_sd.o(i.HAL_SD_ReadBlocks_DMA)
</UL>
<P><STRONG><a name="[62]"></a>SD_DMARxAbort</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, stm32f4xx_hal_sd.o(i.SD_DMARxAbort))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = SD_DMARxAbort &rArr; HAL_SD_GetCardState &rArr; SD_SendStatus &rArr; SDMMC_CmdSendStatus &rArr; SDMMC_GetCmdResp1 &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ErrorCallback
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_AbortCallback
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdStopTransfer
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_GetCardState
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_sd.o(i.HAL_SD_IRQHandler)
</UL>
<P><STRONG><a name="[65]"></a>SD_DMATransmitCplt</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_hal_sd.o(i.SD_DMATransmitCplt))
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_sd.o(i.HAL_SD_WriteBlocks_DMA)
</UL>
<P><STRONG><a name="[61]"></a>SD_DMATxAbort</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, stm32f4xx_hal_sd.o(i.SD_DMATxAbort))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = SD_DMATxAbort &rArr; HAL_SD_GetCardState &rArr; SD_SendStatus &rArr; SDMMC_CmdSendStatus &rArr; SDMMC_GetCmdResp1 &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ErrorCallback
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_AbortCallback
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdStopTransfer
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_GetCardState
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_sd.o(i.HAL_SD_IRQHandler)
</UL>
<P><STRONG><a name="[2af]"></a>SD_FindSCR</STRONG> (Thumb, 300 bytes, Stack size 56 bytes, stm32f4xx_hal_sd.o(i.SD_FindSCR))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = SD_FindSCR &rArr; SDMMC_CmdBlockLength &rArr; SDMMC_GetCmdResp1 &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSendSCR
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdBlockLength
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdAppCommand
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ReadFIFO
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ConfigData
</UL>
<BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WideBus_Enable
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WideBus_Disable
</UL>

<P><STRONG><a name="[1fb]"></a>SD_InitCard</STRONG> (Thumb, 252 bytes, Stack size 72 bytes, stm32f4xx_hal_sd.o(i.SD_InitCard))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = SD_InitCard &rArr; SDMMC_CmdSetRelAdd &rArr; SDMMC_GetCmdResp6 &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSetRelAdd
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSendCSD
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSendCID
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSelDesel
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_Init
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetResponse
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetPowerState
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_GetCardCSD
</UL>
<BR>[Called By]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_InitCard
</UL>

<P><STRONG><a name="[1fa]"></a>SD_PowerON</STRONG> (Thumb, 238 bytes, Stack size 24 bytes, stm32f4xx_hal_sd.o(i.SD_PowerON))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SD_PowerON &rArr; SDMMC_CmdAppCommand &rArr; SDMMC_GetCmdResp1 &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdOperCond
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdGoIdleState
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdAppOperCommand
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdAppCommand
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetResponse
</UL>
<BR>[Called By]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_InitCard
</UL>

<P><STRONG><a name="[1f4]"></a>SD_Read_IT</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, stm32f4xx_hal_sd.o(i.SD_Read_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SD_Read_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ReadFIFO
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_IRQHandler
</UL>

<P><STRONG><a name="[1ed]"></a>SD_SendStatus</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, stm32f4xx_hal_sd.o(i.SD_SendStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SD_SendStatus &rArr; SDMMC_CmdSendStatus &rArr; SDMMC_GetCmdResp1 &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSendStatus
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetResponse
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_GetCardState
</UL>

<P><STRONG><a name="[1eb]"></a>SD_WideBus_Disable</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, stm32f4xx_hal_sd.o(i.SD_WideBus_Disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = SD_WideBus_Disable &rArr; SD_FindSCR &rArr; SDMMC_CmdBlockLength &rArr; SDMMC_GetCmdResp1 &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdBusWidth
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdAppCommand
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetResponse
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_FindSCR
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ConfigWideBusOperation
</UL>

<P><STRONG><a name="[1ea]"></a>SD_WideBus_Enable</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, stm32f4xx_hal_sd.o(i.SD_WideBus_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = SD_WideBus_Enable &rArr; SD_FindSCR &rArr; SDMMC_CmdBlockLength &rArr; SDMMC_GetCmdResp1 &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdBusWidth
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdAppCommand
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetResponse
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_FindSCR
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ConfigWideBusOperation
</UL>

<P><STRONG><a name="[1f3]"></a>SD_Write_IT</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, stm32f4xx_hal_sd.o(i.SD_Write_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SD_Write_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_WriteFIFO
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_IRQHandler
</UL>

<P><STRONG><a name="[2a2]"></a>SDMMC_GetCmdError</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, stm32f4xx_ll_sdmmc.o(i.SDMMC_GetCmdError))
<BR><BR>[Called By]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdGoIdleState
</UL>

<P><STRONG><a name="[29d]"></a>SDMMC_GetCmdResp1</STRONG> (Thumb, 412 bytes, Stack size 24 bytes, stm32f4xx_ll_sdmmc.o(i.SDMMC_GetCmdResp1))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SDMMC_GetCmdResp1 &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetCommandResponse
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetResponse
</UL>
<BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdWriteSingleBlock
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdWriteMultiBlock
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdStopTransfer
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSendStatus
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSendSCR
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSelDesel
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdReadSingleBlock
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdReadMultiBlock
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdBusWidth
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdBlockLength
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdAppCommand
</UL>

<P><STRONG><a name="[2a7]"></a>SDMMC_GetCmdResp2</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, stm32f4xx_ll_sdmmc.o(i.SDMMC_GetCmdResp2))
<BR><BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSendCSD
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSendCID
</UL>

<P><STRONG><a name="[29f]"></a>SDMMC_GetCmdResp3</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, stm32f4xx_ll_sdmmc.o(i.SDMMC_GetCmdResp3))
<BR><BR>[Called By]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdAppOperCommand
</UL>

<P><STRONG><a name="[2ac]"></a>SDMMC_GetCmdResp6</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, stm32f4xx_ll_sdmmc.o(i.SDMMC_GetCmdResp6))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SDMMC_GetCmdResp6 &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetCommandResponse
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetResponse
</UL>
<BR>[Called By]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSetRelAdd
</UL>

<P><STRONG><a name="[2a4]"></a>SDMMC_GetCmdResp7</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, stm32f4xx_ll_sdmmc.o(i.SDMMC_GetCmdResp7))
<BR><BR>[Called By]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdOperCond
</UL>

<P><STRONG><a name="[325]"></a>check_fs</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, ff.o(i.check_fs))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>
<BR>[Called By]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[33d]"></a>chk_chr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ff.o(i.chk_chr))
<BR><BR>[Called By]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>

<P><STRONG><a name="[361]"></a>chk_lock</STRONG> (Thumb, 140 bytes, Stack size 12 bytes, ff.o(i.chk_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = chk_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[35e]"></a>clear_lock</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, ff.o(i.clear_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = clear_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
</UL>

<P><STRONG><a name="[368]"></a>clmt_clust</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, ff.o(i.clmt_clust))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = clmt_clust
</UL>
<BR>[Called By]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
</UL>

<P><STRONG><a name="[332]"></a>cmp_lfn</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, ff.o(i.cmp_lfn))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = cmp_lfn
</UL>
<BR>[Calls]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_wtoupper
</UL>
<BR>[Called By]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
</UL>

<P><STRONG><a name="[338]"></a>create_chain</STRONG> (Thumb, 234 bytes, Stack size 32 bytes, ff.o(i.create_chain))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
</UL>
<BR>[Called By]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
</UL>

<P><STRONG><a name="[33b]"></a>create_name</STRONG> (Thumb, 604 bytes, Stack size 56 bytes, ff.o(i.create_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = create_name &rArr; ff_convert
</UL>
<BR>[Calls]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_chr
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_wtoupper
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_convert
</UL>
<BR>[Called By]<UL><LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
</UL>

<P><STRONG><a name="[358]"></a>dec_lock</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, ff.o(i.dec_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = dec_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
</UL>

<P><STRONG><a name="[343]"></a>dir_alloc</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, ff.o(i.dir_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = dir_alloc &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>
<BR>[Called By]<UL><LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[346]"></a>dir_find</STRONG> (Thumb, 258 bytes, Stack size 32 bytes, ff.o(i.dir_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sum_sfn
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cmp
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmp_lfn
</UL>
<BR>[Called By]<UL><LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[345]"></a>dir_next</STRONG> (Thumb, 346 bytes, Stack size 24 bytes, ff.o(i.dir_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
</UL>
<BR>[Called By]<UL><LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_alloc
</UL>

<P><STRONG><a name="[34b]"></a>dir_register</STRONG> (Thumb, 330 bytes, Stack size 48 bytes, ff.o(i.dir_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sum_sfn
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_numname
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fit_lfn
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[344]"></a>dir_sdi</STRONG> (Thumb, 200 bytes, Stack size 24 bytes, ff.o(i.dir_sdi))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = dir_sdi &rArr; get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
</UL>
<BR>[Called By]<UL><LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_alloc
</UL>

<P><STRONG><a name="[362]"></a>enq_lock</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, ff.o(i.enq_lock))
<BR><BR>[Called By]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[35f]"></a>find_volume</STRONG> (Thumb, 970 bytes, Stack size 88 bytes, ff.o(i.find_volume))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = find_volume &rArr; check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ldnumber
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_lock
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_status
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
</UL>

<P><STRONG><a name="[34e]"></a>fit_lfn</STRONG> (Thumb, 122 bytes, Stack size 20 bytes, ff.o(i.fit_lfn))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = fit_lfn
</UL>
<BR>[Called By]<UL><LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[360]"></a>follow_path</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, ff.o(i.follow_path))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>
<BR>[Called By]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[34d]"></a>gen_numname</STRONG> (Thumb, 198 bytes, Stack size 64 bytes, ff.o(i.gen_numname))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = gen_numname &rArr; mem_cpy
</UL>
<BR>[Calls]<UL><LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
</UL>
<BR>[Called By]<UL><LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[359]"></a>get_ldnumber</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, ff.o(i.get_ldnumber))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = get_ldnumber
</UL>
<BR>[Called By]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
</UL>

<P><STRONG><a name="[366]"></a>inc_lock</STRONG> (Thumb, 226 bytes, Stack size 12 bytes, ff.o(i.inc_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = inc_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[363]"></a>ld_clust</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, ff.o(i.ld_clust))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ld_clust
</UL>
<BR>[Called By]<UL><LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[348]"></a>mem_cmp</STRONG> (Thumb, 38 bytes, Stack size 20 bytes, ff.o(i.mem_cmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = mem_cmp
</UL>
<BR>[Called By]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
</UL>

<P><STRONG><a name="[34c]"></a>mem_cpy</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, ff.o(i.mem_cpy))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mem_cpy
</UL>
<BR>[Called By]<UL><LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_numname
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
</UL>

<P><STRONG><a name="[33e]"></a>mem_set</STRONG> (Thumb, 20 bytes, Stack size 12 bytes, ff.o(i.mem_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = mem_set
</UL>
<BR>[Called By]<UL><LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
</UL>

<P><STRONG><a name="[326]"></a>move_window</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, ff.o(i.move_window))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_alloc
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[365]"></a>remove_chain</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, ff.o(i.remove_chain))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = remove_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
</UL>
<BR>[Called By]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[364]"></a>st_clust</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ff.o(i.st_clust))
<BR><BR>[Called By]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[347]"></a>sum_sfn</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, ff.o(i.sum_sfn))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = sum_sfn
</UL>
<BR>[Called By]<UL><LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
</UL>

<P><STRONG><a name="[367]"></a>sync_fs</STRONG> (Thumb, 244 bytes, Stack size 16 bytes, ff.o(i.sync_fs))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = sync_fs &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl
</UL>
<BR>[Called By]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
</UL>

<P><STRONG><a name="[349]"></a>sync_window</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, ff.o(i.sync_window))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>
<BR>[Called By]<UL><LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>

<P><STRONG><a name="[357]"></a>validate</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, ff.o(i.validate))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = validate &rArr; disk_status
</UL>
<BR>[Calls]<UL><LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_status
</UL>
<BR>[Called By]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
</UL>

<P><STRONG><a name="[3a5]"></a>prvCopyDataFromQueue</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, queue.o(i.prvCopyDataFromQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = prvCopyDataFromQueue &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceiveFromISR
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[3a6]"></a>prvCopyDataToQueue</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, queue.o(i.prvCopyDataToQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[3a9]"></a>prvInitialiseMutex</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, queue.o(i.prvInitialiseMutex))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = prvInitialiseMutex &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
</UL>

<P><STRONG><a name="[3aa]"></a>prvInitialiseNewQueue</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, queue.o(i.prvInitialiseNewQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
</UL>
<BR>[Called By]<UL><LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>

<P><STRONG><a name="[3b1]"></a>prvIsQueueEmpty</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, queue.o(i.prvIsQueueEmpty))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prvIsQueueEmpty
</UL>
<BR>[Calls]<UL><LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[3b2]"></a>prvIsQueueFull</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, queue.o(i.prvIsQueueFull))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prvIsQueueFull
</UL>
<BR>[Calls]<UL><LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[3bc]"></a>prvUnlockQueue</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, queue.o(i.prvUnlockQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = prvUnlockQueue &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskMissedYield
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
</UL>

<P><STRONG><a name="[39e]"></a>prvCheckForValidListAndQueue</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, timers.o(i.prvCheckForValidListAndQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = prvCheckForValidListAndQueue &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueAddToRegistry
</UL>
<BR>[Called By]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTimer
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
</UL>

<P><STRONG><a name="[3bb]"></a>prvGetNextExpireTime</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, timers.o(i.prvGetNextExpireTime))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>

<P><STRONG><a name="[3af]"></a>prvInitialiseNewTimer</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, timers.o(i.prvInitialiseNewTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = prvInitialiseNewTimer &rArr; prvCheckForValidListAndQueue &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialiseItem
</UL>
<BR>[Called By]<UL><LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreate
</UL>

<P><STRONG><a name="[3b0]"></a>prvInsertTimerInActiveList</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, timers.o(i.prvInsertTimerInActiveList))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = prvInsertTimerInActiveList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessExpiredTimer
</UL>

<P><STRONG><a name="[3b5]"></a>prvProcessExpiredTimer</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, timers.o(i.prvProcessExpiredTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = prvProcessExpiredTimer &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertTimerInActiveList
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
</UL>

<P><STRONG><a name="[3b6]"></a>prvProcessReceivedCommands</STRONG> (Thumb, 286 bytes, Stack size 48 bytes, timers.o(i.prvProcessReceivedCommands))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = prvProcessReceivedCommands &rArr; prvSampleTimeNow &rArr; prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertTimerInActiveList
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>

<P><STRONG><a name="[3b8]"></a>prvProcessTimerOrBlockTask</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, timers.o(i.prvProcessTimerOrBlockTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = prvProcessTimerOrBlockTask &rArr; prvSampleTimeNow &rArr; prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessExpiredTimer
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>

<P><STRONG><a name="[3b7]"></a>prvSampleTimeNow</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, timers.o(i.prvSampleTimeNow))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = prvSampleTimeNow &rArr; prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
</UL>
<BR>[Called By]<UL><LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
</UL>

<P><STRONG><a name="[3ba]"></a>prvSwitchTimerLists</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, timers.o(i.prvSwitchTimerLists))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
</UL>

<P><STRONG><a name="[9a]"></a>prvTimerTask</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, timers.o(i.prvTimerTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = prvTimerTask &rArr; prvProcessReceivedCommands &rArr; prvSampleTimeNow &rArr; prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvGetNextExpireTime
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timers.o(i.xTimerCreateTimerTask)
</UL>
<P><STRONG><a name="[398]"></a>prvAddCurrentTaskToDelayedList</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, tasks.o(i.prvAddCurrentTaskToDelayedList))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnUnorderedEventList
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>

<P><STRONG><a name="[39c]"></a>prvAddNewTaskToReadyList</STRONG> (Thumb, 156 bytes, Stack size 8 bytes, tasks.o(i.prvAddNewTaskToReadyList))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prvAddNewTaskToReadyList &rArr; prvInitialiseTaskLists
</UL>
<BR>[Calls]<UL><LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseTaskLists
</UL>
<BR>[Called By]<UL><LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[3a1]"></a>prvCheckTasksWaitingTermination</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, tasks.o(i.prvCheckTasksWaitingTermination))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = prvCheckTasksWaitingTermination &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
</UL>

<P><STRONG><a name="[3a4]"></a>prvDeleteTCB</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, tasks.o(i.prvDeleteTCB))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
</UL>
<BR>[Called By]<UL><LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
</UL>

<P><STRONG><a name="[99]"></a>prvIdleTask</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tasks.o(i.prvIdleTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = prvIdleTask &rArr; prvCheckTasksWaitingTermination &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationIdleHook
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasks.o(i.vTaskStartScheduler)
</UL>
<P><STRONG><a name="[3ac]"></a>prvInitialiseNewTask</STRONG> (Thumb, 184 bytes, Stack size 40 bytes, tasks.o(i.prvInitialiseNewTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = prvInitialiseNewTask
</UL>
<BR>[Calls]<UL><LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pxPortInitialiseStack
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialiseItem
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[39d]"></a>prvInitialiseTaskLists</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, tasks.o(i.prvInitialiseTaskLists))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvInitialiseTaskLists
</UL>
<BR>[Calls]<UL><LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>

<P><STRONG><a name="[3b3]"></a>prvListTasksWithinSingleList</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, tasks.o(i.prvListTasksWithinSingleList))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = prvListTasksWithinSingleList &rArr; vTaskGetInfo &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskGetInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxTaskGetSystemState
</UL>

<P><STRONG><a name="[3d5]"></a>prvResetNextTaskUnblockTime</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, tasks.o(i.prvResetNextTaskUnblockTime))
<BR><BR>[Called By]<UL><LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
</UL>

<P><STRONG><a name="[3d6]"></a>prvTaskCheckFreeStackSpace</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, tasks.o(i.prvTaskCheckFreeStackSpace))
<BR><BR>[Called By]<UL><LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskGetInfo
</UL>

<P><STRONG><a name="[3bf]"></a>prvWriteNameToBuffer</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, tasks.o(i.prvWriteNameToBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prvWriteNameToBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskList
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskGetRunTimeStats
</UL>

<P><STRONG><a name="[98]"></a>prvTaskExitError</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, port.o(i.prvTaskExitError))
<BR>[Address Reference Count : 1]<UL><LI> port.o(i.pxPortInitialiseStack)
</UL>
<P><STRONG><a name="[3de]"></a>prvTestWaitCondition</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, event_groups.o(i.prvTestWaitCondition))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvTestWaitCondition
</UL>
<BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
</UL>

<P><STRONG><a name="[38b]"></a>inHandlerMode</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, cmsis_os.o(i.inHandlerMode))
<BR><BR>[Called By]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerStart
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexWait
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelSysTick
</UL>

<P><STRONG><a name="[3c9]"></a>prvHeapInit</STRONG> (Thumb, 98 bytes, Stack size 12 bytes, heap_4.o(i.prvHeapInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = prvHeapInit
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[3ca]"></a>prvInsertBlockIntoFreeList</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, heap_4.o(i.prvInsertBlockIntoFreeList))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvInsertBlockIntoFreeList
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[232]"></a>_htonl</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, hzcrl_xpro.o(i._htonl))
<BR><BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_Hton
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HZCRL_Pack_0X01_S
</UL>

<P><STRONG><a name="[395]"></a>_htons</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, hzcrl_xpro.o(i._htons))
<BR><BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_Hton
</UL>

<P><STRONG><a name="[28f]"></a>ReadData_FRAM_UnSafe</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, fram.o(i.ReadData_FRAM_UnSafe))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = ReadData_FRAM_UnSafe &rArr; FRAM_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC16Check
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAM_Read
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadData_FRAM
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteData_FRAM_UnSafe
</UL>

<P><STRONG><a name="[30f]"></a>WriteData_FRAM_UnSafe</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, fram.o(i.WriteData_FRAM_UnSafe))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = WriteData_FRAM_UnSafe &rArr; ReadData_FRAM_UnSafe &rArr; FRAM_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC16Put
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAM_Write
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadData_FRAM_UnSafe
</UL>
<BR>[Called By]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteData_FRAM
</UL>

<P><STRONG><a name="[253]"></a>MX_CRC_Init</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, m4_crc.o(i.MX_CRC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MX_CRC_Init &rArr; HAL_CRC_Init &rArr; HAL_CRC_MspInit
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Error_Handler
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CRC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M4_CRC_PHY_Init
</UL>

<P><STRONG><a name="[292]"></a>ReadData_SPIFlash_UnSafe</STRONG> (Thumb, 254 bytes, Stack size 40 bytes, w25qxx.o(i.ReadData_SPIFlash_UnSafe))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = ReadData_SPIFlash_UnSafe &rArr; W25QXX_ReadBuffer &rArr; SPI1_ReadWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexWait
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelSysTick
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC16Check
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_ReadBuffer
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strrchr
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadData_SPIFlash
</UL>

<P><STRONG><a name="[311]"></a>WriteData_SPIFlash_UnSafe</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, w25qxx.o(i.WriteData_SPIFlash_UnSafe))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = WriteData_SPIFlash_UnSafe &rArr; W25QXX_WriteBuffer &rArr; W25QXX_SectorWrite &rArr; W25QXX_PageWrite &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR &rArr; SPI1_ReadWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC16Put
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_WriteBuffer
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_ReadBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteData_SPIFlash
</UL>

<P><STRONG><a name="[30b]"></a>spiFlash_SysInit</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, w25qxx.o(i.spiFlash_SysInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = spiFlash_SysInit &rArr; osMutexCreate &rArr; xQueueCreateMutex &rArr; prvInitialiseMutex &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Init
</UL>

<P><STRONG><a name="[36f]"></a>fls</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, kfifo.o(i.fls))
<BR><BR>[Called By]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fls_long
</UL>

<P><STRONG><a name="[36e]"></a>fls_long</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, kfifo.o(i.fls_long))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fls_long
</UL>
<BR>[Calls]<UL><LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fls
</UL>
<BR>[Called By]<UL><LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;roundup_pow_of_two
</UL>

<P><STRONG><a name="[378]"></a>roundup_pow_of_two</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, kfifo.o(i.roundup_pow_of_two))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = roundup_pow_of_two &rArr; fls_long
</UL>
<BR>[Calls]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fls_long
</UL>
<BR>[Called By]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kfifo_alloc
</UL>

<P><STRONG><a name="[a6]"></a>clear_screen</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, rtx_cli.o(i.clear_screen))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = clear_screen &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_cli.o(.constdata)
</UL>
<P><STRONG><a name="[a3]"></a>cli_exit_handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_cli.o(i.cli_exit_handler))
<BR>[Address Reference Count : 1]<UL><LI> rtx_cli.o(.constdata)
</UL>
<P><STRONG><a name="[32c]"></a>get_input</STRONG> (Thumb, 290 bytes, Stack size 16 bytes, rtx_cli.o(i.get_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = get_input &rArr; tab_complete &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexWait
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_getchar
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tab_complete
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_main
</UL>

<P><STRONG><a name="[32e]"></a>handle_input</STRONG> (Thumb, 588 bytes, Stack size 32 bytes, rtx_cli.o(i.handle_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = handle_input &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexWait
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lookup_command
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_main
</UL>

<P><STRONG><a name="[a1]"></a>help_command</STRONG> (Thumb, 224 bytes, Stack size 40 bytes, rtx_cli.o(i.help_command))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = help_command &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_cli.o(.constdata)
</UL>
<P><STRONG><a name="[375]"></a>lookup_command</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, rtx_cli.o(i.lookup_command))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = lookup_command &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_input
</UL>

<P><STRONG><a name="[32f]"></a>print_bad_command</STRONG> (Thumb, 162 bytes, Stack size 16 bytes, rtx_cli.o(i.print_bad_command))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = print_bad_command &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexWait
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_main
</UL>

<P><STRONG><a name="[c7]"></a>sysdebug_Command</STRONG> (Thumb, 250 bytes, Stack size 32 bytes, rtx_cli.o(i.sysdebug_Command))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = sysdebug_Command &rArr; Updatedebug &rArr; SysPara_Update &rArr; WriteData_SPIFlash &rArr; WriteData_SPIFlash_UnSafe &rArr; W25QXX_WriteBuffer &rArr; W25QXX_SectorWrite &rArr; W25QXX_PageWrite &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR &rArr; SPI1_ReadWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Updatedebug
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcasecmp
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_cli.o(.constdata)
</UL>
<P><STRONG><a name="[373]"></a>tab_complete</STRONG> (Thumb, 344 bytes, Stack size 32 bytes, rtx_cli.o(i.tab_complete))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = tab_complete &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexWait
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_input
</UL>

<P><STRONG><a name="[294]"></a>Receive_Byte</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, ymodem.o(i.Receive_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Receive_Byte &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getc
</UL>
<BR>[Called By]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Receive_Packet
</UL>

<P><STRONG><a name="[296]"></a>Receive_Packet</STRONG> (Thumb, 188 bytes, Stack size 32 bytes, ymodem.o(i.Receive_Packet))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = Receive_Packet &rArr; Receive_Byte &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Receive_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ymodem_Receive
</UL>

<P><STRONG><a name="[2bc]"></a>Send_Byte</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ymodem.o(i.Send_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Send_Byte &rArr; putc &rArr; fputc &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putc
</UL>
<BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ymodem_Receive
</UL>

<P><STRONG><a name="[3cf]"></a>spiFlashCopy</STRONG> (Thumb, 256 bytes, Stack size 72 bytes, updateparm.o(i.spiFlashCopy))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = spiFlashCopy &rArr; spiFlashWrite &rArr; W25QXX_SectorWrite &rArr; W25QXX_PageWrite &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR &rArr; SPI1_ReadWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexWait
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelSysTick
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiFlashWrite
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiFlashRead
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiFlashErase
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strrchr
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verifyProcessFile
</UL>

<P><STRONG><a name="[3d0]"></a>sprintfhex</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, updateparm.o(i.sprintfhex))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = sprintfhex &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verifyProcessFile
</UL>

<P><STRONG><a name="[12d]"></a>DisSDCard</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, serialization.o(i.DisSDCard))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = DisSDCard &rArr; f_mount &rArr; find_volume &rArr; check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexWait
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelSysTick
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strrchr
</UL>
<BR>[Called By]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveDeviceInfo
</UL>

<P><STRONG><a name="[247]"></a>InitSDCard</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, serialization.o(i.InitSDCard))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = InitSDCard &rArr; MountFS &rArr; f_mount &rArr; find_volume &rArr; check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkCard
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MountFS
</UL>
<BR>[Called By]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveDeviceInfo
</UL>

<P><STRONG><a name="[249]"></a>MountFS</STRONG> (Thumb, 532 bytes, Stack size 24 bytes, serialization.o(i.MountFS))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = MountFS &rArr; f_mount &rArr; find_volume &rArr; check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexWait
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelSysTick
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strrchr
</UL>
<BR>[Called By]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSDCard
</UL>

<P><STRONG><a name="[248]"></a>checkCard</STRONG> (Thumb, 1452 bytes, Stack size 24 bytes, serialization.o(i.checkCard))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = checkCard &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexWait
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelSysTick
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_GetCardInfo
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strrchr
</UL>
<BR>[Called By]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSDCard
</UL>

<P><STRONG><a name="[33f]"></a>md5_process</STRONG> (Thumb, 1864 bytes, Stack size 232 bytes, crypto.o(i.md5_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = md5_process &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crl_u_MD5_Update
</UL>

<P><STRONG><a name="[31c]"></a>_fp_digits</STRONG> (Thumb, 366 bytes, Stack size 64 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[318]"></a>_printf_core</STRONG> (Thumb, 1744 bytes, Stack size 136 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>
<BR>[Called By]<UL><LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0snprintf
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf
</UL>

<P><STRONG><a name="[31f]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[31e]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[85]"></a>_snputc</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, printfa.o(i._snputc))
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0snprintf)
</UL>
<P><STRONG><a name="[86]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printfa.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0sprintf)
</UL>
<P><STRONG><a name="[5f]"></a>_scanf_char_input</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, scanf_char.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> scanf_char.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
